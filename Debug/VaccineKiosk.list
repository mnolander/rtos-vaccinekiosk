
VaccineKiosk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ae0  08004ae0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae4  08004ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004030  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004040  20004040  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102a2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002982  00000000  00000000  000302e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e38  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bc8  00000000  00000000  00034a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c2d  00000000  00000000  000565d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0860  00000000  00000000  00067205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137a65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f64  00000000  00000000  00137ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049a0 	.word	0x080049a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080049a0 	.word	0x080049a0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000004c 	.word	0x2000004c
 8000504:	200000a0 	.word	0x200000a0

08000508 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b0b2      	sub	sp, #200	; 0xc8
 800050c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of vaccineQueue */
  osMessageQDef(vaccineQueue, 1, uint16_t);
 800050e:	4b49      	ldr	r3, [pc, #292]	; (8000634 <MX_FREERTOS_Init+0x12c>)
 8000510:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vaccineQueueHandle = osMessageCreate(osMessageQ(vaccineQueue), NULL);
 800051a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f002 f802 	bl	800252a <osMessageCreate>
 8000526:	4603      	mov	r3, r0
 8000528:	4a43      	ldr	r2, [pc, #268]	; (8000638 <MX_FREERTOS_Init+0x130>)
 800052a:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskQueue */
  osMessageQDef(taskQueue, 1, uint16_t);
 800052c:	4b41      	ldr	r3, [pc, #260]	; (8000634 <MX_FREERTOS_Init+0x12c>)
 800052e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  taskQueueHandle = osMessageCreate(osMessageQ(taskQueue), NULL);
 8000538:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fff3 	bl	800252a <osMessageCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a3d      	ldr	r2, [pc, #244]	; (800063c <MX_FREERTOS_Init+0x134>)
 8000548:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <MX_FREERTOS_Init+0x138>)
 800054c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f001 ff94 	bl	8002492 <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a35      	ldr	r2, [pc, #212]	; (8000644 <MX_FREERTOS_Init+0x13c>)
 800056e:	6013      	str	r3, [r2, #0]

  /* definition and creation of injectTask */
  osThreadDef(injectTask, StartInjectTask, osPriorityBelowNormal, 0, 128);
 8000570:	4b35      	ldr	r3, [pc, #212]	; (8000648 <MX_FREERTOS_Init+0x140>)
 8000572:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  injectTaskHandle = osThreadCreate(osThread(injectTask), NULL);
 8000584:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f001 ff81 	bl	8002492 <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a2e      	ldr	r2, [pc, #184]	; (800064c <MX_FREERTOS_Init+0x144>)
 8000594:	6013      	str	r3, [r2, #0]

  /* definition and creation of selectTask */
  osThreadDef(selectTask, StartSelectTask, osPriorityHigh, 0, 128);
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <MX_FREERTOS_Init+0x148>)
 8000598:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  selectTaskHandle = osThreadCreate(osThread(selectTask), NULL);
 80005aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 ff6e 	bl	8002492 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <MX_FREERTOS_Init+0x14c>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of paymentTask */
  osThreadDef(paymentTask, StartPaymentTask, osPriorityAboveNormal, 0, 128);
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <MX_FREERTOS_Init+0x150>)
 80005be:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  paymentTaskHandle = osThreadCreate(osThread(paymentTask), NULL);
 80005d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 ff5b 	bl	8002492 <osThreadCreate>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a1f      	ldr	r2, [pc, #124]	; (800065c <MX_FREERTOS_Init+0x154>)
 80005e0:	6013      	str	r3, [r2, #0]

  /* definition and creation of armTask */
  osThreadDef(armTask, StartArmTask, osPriorityNormal, 0, 128);
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_FREERTOS_Init+0x158>)
 80005e4:	f107 041c 	add.w	r4, r7, #28
 80005e8:	461d      	mov	r5, r3
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armTaskHandle = osThreadCreate(osThread(armTask), NULL);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 ff48 	bl	8002492 <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <MX_FREERTOS_Init+0x15c>)
 8000606:	6013      	str	r3, [r2, #0]

  /* definition and creation of failsafeTask */
  osThreadDef(failsafeTask, StartFailSafe, osPriorityHigh, 0, 128);
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_FREERTOS_Init+0x160>)
 800060a:	463c      	mov	r4, r7
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  failsafeTaskHandle = osThreadCreate(osThread(failsafeTask), NULL);
 800061a:	463b      	mov	r3, r7
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 ff37 	bl	8002492 <osThreadCreate>
 8000624:	4603      	mov	r3, r0
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <MX_FREERTOS_Init+0x164>)
 8000628:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800062a:	bf00      	nop
 800062c:	37c8      	adds	r7, #200	; 0xc8
 800062e:	46bd      	mov	sp, r7
 8000630:	bdb0      	pop	{r4, r5, r7, pc}
 8000632:	bf00      	nop
 8000634:	08004a00 	.word	0x08004a00
 8000638:	20000044 	.word	0x20000044
 800063c:	20000048 	.word	0x20000048
 8000640:	08004a10 	.word	0x08004a10
 8000644:	2000002c 	.word	0x2000002c
 8000648:	08004a2c 	.word	0x08004a2c
 800064c:	20000030 	.word	0x20000030
 8000650:	08004a48 	.word	0x08004a48
 8000654:	20000034 	.word	0x20000034
 8000658:	08004a64 	.word	0x08004a64
 800065c:	20000038 	.word	0x20000038
 8000660:	08004a80 	.word	0x08004a80
 8000664:	2000003c 	.word	0x2000003c
 8000668:	08004a9c 	.word	0x08004a9c
 800066c:	20000040 	.word	0x20000040

08000670 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000678:	f04f 31ff 	mov.w	r1, #4294967295
 800067c:	2001      	movs	r0, #1
 800067e:	f003 fbf5 	bl	8003e6c <ulTaskNotifyTake>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4817      	ldr	r0, [pc, #92]	; (80006e8 <StartDefaultTask+0x78>)
 800068a:	f000 ff8b 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000694:	4814      	ldr	r0, [pc, #80]	; (80006e8 <StartDefaultTask+0x78>)
 8000696:	f000 ff85 	bl	80015a4 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a0:	4811      	ldr	r0, [pc, #68]	; (80006e8 <StartDefaultTask+0x78>)
 80006a2:	f000 ff7f 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <StartDefaultTask+0x78>)
 80006ae:	f000 ff79 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2140      	movs	r1, #64	; 0x40
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <StartDefaultTask+0x78>)
 80006b8:	f000 ff74 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2104      	movs	r1, #4
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <StartDefaultTask+0x78>)
 80006c2:	f000 ff6f 	bl	80015a4 <HAL_GPIO_WritePin>

    xTaskNotify(selectTaskHandle, 0, eNoAction);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <StartDefaultTask+0x7c>)
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 fc14 	bl	8003efc <xTaskGenericNotify>
    vTaskResume(selectTaskHandle);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <StartDefaultTask+0x7c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 feb7 	bl	800344c <vTaskResume>
    vTaskSuspend(NULL);
 80006de:	2000      	movs	r0, #0
 80006e0:	f002 fdf0 	bl	80032c4 <vTaskSuspend>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006e4:	e7c8      	b.n	8000678 <StartDefaultTask+0x8>
 80006e6:	bf00      	nop
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	20000034 	.word	0x20000034

080006f0 <StartInjectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInjectTask */
void StartInjectTask(void const * argument)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInjectTask */
  /* Infinite loop */
  uint16_t recValue;
  int injectConfirm = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  TickType_t servoFirstTime = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  TickType_t servoMoveTime = pdMS_TO_TICKS(2000);
 8000700:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000704:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4839      	ldr	r0, [pc, #228]	; (80007f4 <StartInjectTask+0x104>)
 800070e:	f000 ff49 	bl	80015a4 <HAL_GPIO_WritePin>
  for(;;)
  {
    xQueueReceive(taskQueueHandle, &recValue, portMAX_DELAY);
 8000712:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <StartInjectTask+0x108>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f107 010a 	add.w	r1, r7, #10
 800071a:	f04f 32ff 	mov.w	r2, #4294967295
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fa18 	bl	8002b54 <xQueueReceive>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072a:	4832      	ldr	r0, [pc, #200]	; (80007f4 <StartInjectTask+0x104>)
 800072c:	f000 ff3a 	bl	80015a4 <HAL_GPIO_WritePin>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000730:	e031      	b.n	8000796 <StartInjectTask+0xa6>
	if (servoFirstTime == 0)
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d102      	bne.n	800073e <StartInjectTask+0x4e>
	{
		servoFirstTime = xTaskGetTickCount();
 8000738:	f002 fff0 	bl	800371c <xTaskGetTickCount>
 800073c:	6138      	str	r0, [r7, #16]
	}

    if ((xTaskGetTickCount() - servoFirstTime) >= servoMoveTime){
 800073e:	f002 ffed 	bl	800371c <xTaskGetTickCount>
 8000742:	4602      	mov	r2, r0
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	d81b      	bhi.n	8000786 <StartInjectTask+0x96>
    	injectConfirm = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	4826      	ldr	r0, [pc, #152]	; (80007f4 <StartInjectTask+0x104>)
 800075a:	f000 ff23 	bl	80015a4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000764:	4823      	ldr	r0, [pc, #140]	; (80007f4 <StartInjectTask+0x104>)
 8000766:	f000 ff1d 	bl	80015a4 <HAL_GPIO_WritePin>
 800076a:	e014      	b.n	8000796 <StartInjectTask+0xa6>
    }
    else{
    	while((xTaskGetTickCount() - servoFirstTime) < servoMoveTime){
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	4820      	ldr	r0, [pc, #128]	; (80007f4 <StartInjectTask+0x104>)
 8000772:	f000 ff17 	bl	80015a4 <HAL_GPIO_WritePin>
        HAL_Delay(20);
 8000776:	2014      	movs	r0, #20
 8000778:	f000 fc5a 	bl	8001030 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <StartInjectTask+0x104>)
 8000782:	f000 ff0f 	bl	80015a4 <HAL_GPIO_WritePin>
    	while((xTaskGetTickCount() - servoFirstTime) < servoMoveTime){
 8000786:	f002 ffc9 	bl	800371c <xTaskGetTickCount>
 800078a:	4602      	mov	r2, r0
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	429a      	cmp	r2, r3
 8000794:	d8ea      	bhi.n	800076c <StartInjectTask+0x7c>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <StartInjectTask+0x10c>)
 800079a:	f000 feeb 	bl	8001574 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0c6      	beq.n	8000732 <StartInjectTask+0x42>
    	}
    }
    }

    if(injectConfirm == 1){
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d113      	bne.n	80007d2 <StartInjectTask+0xe2>
      //Hooray you got your vaccine without dying!
      HAL_Delay(5000);
 80007aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80007ae:	f000 fc3f 	bl	8001030 <HAL_Delay>
      xTaskNotify(defaultTaskHandle, 0, eNoAction);
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <StartInjectTask+0x110>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	f003 fb9e 	bl	8003efc <xTaskGenericNotify>
      vTaskSuspend(NULL);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f002 fd7f 	bl	80032c4 <vTaskSuspend>
      vTaskResume(defaultTaskHandle);
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <StartInjectTask+0x110>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fe3e 	bl	800344c <vTaskResume>
 80007d0:	e79f      	b.n	8000712 <StartInjectTask+0x22>
    }
    else{
      xTaskNotify(failsafeTaskHandle, 0, eNoAction);
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <StartInjectTask+0x114>)
 80007d4:	6818      	ldr	r0, [r3, #0]
 80007d6:	2300      	movs	r3, #0
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	f003 fb8e 	bl	8003efc <xTaskGenericNotify>
      vTaskSuspend(NULL);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f002 fd6f 	bl	80032c4 <vTaskSuspend>
      vTaskResume(failsafeTaskHandle);
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <StartInjectTask+0x114>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fe2e 	bl	800344c <vTaskResume>
    xQueueReceive(taskQueueHandle, &recValue, portMAX_DELAY);
 80007f0:	e78f      	b.n	8000712 <StartInjectTask+0x22>
 80007f2:	bf00      	nop
 80007f4:	40020c00 	.word	0x40020c00
 80007f8:	20000048 	.word	0x20000048
 80007fc:	40020000 	.word	0x40020000
 8000800:	2000002c 	.word	0x2000002c
 8000804:	20000040 	.word	0x20000040

08000808 <StartSelectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSelectTask */
void StartSelectTask(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSelectTask */
  /* Infinite loop */
	uint16_t selectedVaccine = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	81bb      	strh	r3, [r7, #12]
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2001      	movs	r0, #1
 8000818:	f003 fb28 	bl	8003e6c <ulTaskNotifyTake>
    GPIO_PinState SelectPushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2); // Read user input (select button)
 800081c:	2104      	movs	r1, #4
 800081e:	483a      	ldr	r0, [pc, #232]	; (8000908 <StartSelectTask+0x100>)
 8000820:	f000 fea8 	bl	8001574 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	73fb      	strb	r3, [r7, #15]
    GPIO_PinState ChoosePushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); // Read user input (choose button)
 8000828:	2110      	movs	r1, #16
 800082a:	4837      	ldr	r0, [pc, #220]	; (8000908 <StartSelectTask+0x100>)
 800082c:	f000 fea2 	bl	8001574 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	73bb      	strb	r3, [r7, #14]

    if(SelectPushButton == GPIO_PIN_RESET){ // If button is reversed then update GPIO_InitStruct.Pull = GPIO_PULLUP; in gpio.c
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d137      	bne.n	80008aa <StartSelectTask+0xa2>
    	if(selectedVaccine == 0){ //If blue vaccine was last activated, switch to green
 800083a:	89bb      	ldrh	r3, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d10e      	bne.n	800085e <StartSelectTask+0x56>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000846:	4831      	ldr	r0, [pc, #196]	; (800090c <StartSelectTask+0x104>)
 8000848:	f000 feac 	bl	80015a4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000852:	482e      	ldr	r0, [pc, #184]	; (800090c <StartSelectTask+0x104>)
 8000854:	f000 fea6 	bl	80015a4 <HAL_GPIO_WritePin>
    		selectedVaccine = 1;
 8000858:	2301      	movs	r3, #1
 800085a:	81bb      	strh	r3, [r7, #12]
 800085c:	e022      	b.n	80008a4 <StartSelectTask+0x9c>
    	}
    	else if(selectedVaccine == 1){ //If green vaccine was last activated, switch to orange
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d10e      	bne.n	8000882 <StartSelectTask+0x7a>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086a:	4828      	ldr	r0, [pc, #160]	; (800090c <StartSelectTask+0x104>)
 800086c:	f000 fe9a 	bl	80015a4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000876:	4825      	ldr	r0, [pc, #148]	; (800090c <StartSelectTask+0x104>)
 8000878:	f000 fe94 	bl	80015a4 <HAL_GPIO_WritePin>
    		selectedVaccine = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	81bb      	strh	r3, [r7, #12]
 8000880:	e010      	b.n	80008a4 <StartSelectTask+0x9c>
    	}
    	else if(selectedVaccine == 2){ //If orange vaccine was last activated, switch to blue
 8000882:	89bb      	ldrh	r3, [r7, #12]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d10d      	bne.n	80008a4 <StartSelectTask+0x9c>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088e:	481f      	ldr	r0, [pc, #124]	; (800090c <StartSelectTask+0x104>)
 8000890:	f000 fe88 	bl	80015a4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	481c      	ldr	r0, [pc, #112]	; (800090c <StartSelectTask+0x104>)
 800089c:	f000 fe82 	bl	80015a4 <HAL_GPIO_WritePin>
    		selectedVaccine = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	81bb      	strh	r3, [r7, #12]
    	}
    	vTaskDelay(250); //Delay so options don't switch too fast
 80008a4:	20fa      	movs	r0, #250	; 0xfa
 80008a6:	f002 fcd9 	bl	800325c <vTaskDelay>
    }

    if(ChoosePushButton == GPIO_PIN_RESET){
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1b1      	bne.n	8000814 <StartSelectTask+0xc>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <StartSelectTask+0x104>)
 80008b8:	f000 fe74 	bl	80015a4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <StartSelectTask+0x104>)
 80008c4:	f000 fe6e 	bl	80015a4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <StartSelectTask+0x104>)
 80008d0:	f000 fe68 	bl	80015a4 <HAL_GPIO_WritePin>
    	xQueueSendToFront(vaccineQueueHandle, &selectedVaccine, 10000); //Put selected vaccine into queue
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <StartSelectTask+0x108>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	f107 010c 	add.w	r1, r7, #12
 80008dc:	2301      	movs	r3, #1
 80008de:	f242 7210 	movw	r2, #10000	; 0x2710
 80008e2:	f002 f839 	bl	8002958 <xQueueGenericSend>
    	xTaskNotify(paymentTaskHandle, 0, eNoAction);
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <StartSelectTask+0x10c>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	f003 fb04 	bl	8003efc <xTaskGenericNotify>
    	vTaskSuspend(NULL);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f002 fce5 	bl	80032c4 <vTaskSuspend>
    	vTaskResume(paymentTaskHandle);
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <StartSelectTask+0x10c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fda4 	bl	800344c <vTaskResume>
  {
 8000904:	e786      	b.n	8000814 <StartSelectTask+0xc>
 8000906:	bf00      	nop
 8000908:	40020000 	.word	0x40020000
 800090c:	40020c00 	.word	0x40020c00
 8000910:	20000044 	.word	0x20000044
 8000914:	20000038 	.word	0x20000038

08000918 <StartPaymentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPaymentTask */
void StartPaymentTask(void const * argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint16_t selectedVaccine;
  TickType_t payFirstTime = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  TickType_t paymentTimeout = pdMS_TO_TICKS(5000);
 8000924:	f241 3388 	movw	r3, #5000	; 0x1388
 8000928:	613b      	str	r3, [r7, #16]
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800092a:	f04f 31ff 	mov.w	r1, #4294967295
 800092e:	2001      	movs	r0, #1
 8000930:	f003 fa9c 	bl	8003e6c <ulTaskNotifyTake>
	xQueueReceive(vaccineQueueHandle, &selectedVaccine, portMAX_DELAY);
 8000934:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <StartPaymentTask+0xd4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f107 010e 	add.w	r1, r7, #14
 800093c:	f04f 32ff 	mov.w	r2, #4294967295
 8000940:	4618      	mov	r0, r3
 8000942:	f002 f907 	bl	8002b54 <xQueueReceive>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 8000946:	e025      	b.n	8000994 <StartPaymentTask+0x7c>
		if (payFirstTime == 0)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <StartPaymentTask+0x3c>
		{
			payFirstTime = xTaskGetTickCount();
 800094e:	f002 fee5 	bl	800371c <xTaskGetTickCount>
 8000952:	6178      	str	r0, [r7, #20]
		}

	    if ((xTaskGetTickCount() - payFirstTime) >= paymentTimeout){
 8000954:	f002 fee2 	bl	800371c <xTaskGetTickCount>
 8000958:	4602      	mov	r2, r0
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d80e      	bhi.n	8000982 <StartPaymentTask+0x6a>
	        xTaskNotify(defaultTaskHandle, 0, eNoAction);
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <StartPaymentTask+0xd8>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	f003 fac5 	bl	8003efc <xTaskGenericNotify>
	        vTaskSuspend(NULL);
 8000972:	2000      	movs	r0, #0
 8000974:	f002 fca6 	bl	80032c4 <vTaskSuspend>
	        vTaskResume(defaultTaskHandle);
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <StartPaymentTask+0xd8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fd65 	bl	800344c <vTaskResume>
	    }
		// Flash green LED
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000986:	481b      	ldr	r0, [pc, #108]	; (80009f4 <StartPaymentTask+0xdc>)
 8000988:	f000 fe25 	bl	80015d6 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f002 fc64 	bl	800325c <vTaskDelay>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 8000994:	2120      	movs	r1, #32
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <StartPaymentTask+0xe0>)
 8000998:	f000 fdec 	bl	8001574 <HAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d0d2      	beq.n	8000948 <StartPaymentTask+0x30>
	}
    // Check payment button
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){
 80009a2:	2120      	movs	r1, #32
 80009a4:	4814      	ldr	r0, [pc, #80]	; (80009f8 <StartPaymentTask+0xe0>)
 80009a6:	f000 fde5 	bl	8001574 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1bc      	bne.n	800092a <StartPaymentTask+0x12>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b6:	480f      	ldr	r0, [pc, #60]	; (80009f4 <StartPaymentTask+0xdc>)
 80009b8:	f000 fdf4 	bl	80015a4 <HAL_GPIO_WritePin>
        // Put selected vaccine into queue
        xQueueSendToFront(vaccineQueueHandle, &selectedVaccine, 0);
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <StartPaymentTask+0xd4>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	f107 010e 	add.w	r1, r7, #14
 80009c4:	2301      	movs	r3, #1
 80009c6:	2200      	movs	r2, #0
 80009c8:	f001 ffc6 	bl	8002958 <xQueueGenericSend>
        xTaskNotify(armTaskHandle, 0, eNoAction);
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <StartPaymentTask+0xe4>)
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	2300      	movs	r3, #0
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	f003 fa91 	bl	8003efc <xTaskGenericNotify>
        vTaskSuspend(NULL);
 80009da:	2000      	movs	r0, #0
 80009dc:	f002 fc72 	bl	80032c4 <vTaskSuspend>
        vTaskResume(armTaskHandle);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <StartPaymentTask+0xe4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fd31 	bl	800344c <vTaskResume>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80009ea:	e79e      	b.n	800092a <StartPaymentTask+0x12>
 80009ec:	20000044 	.word	0x20000044
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40020000 	.word	0x40020000
 80009fc:	2000003c 	.word	0x2000003c

08000a00 <StartArmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArmTask */
void StartArmTask(void const * argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArmTask */
  /* Infinite loop */
	uint16_t selectedVaccine;
	TickType_t buttonPressTime = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
	TickType_t buttonHoldTime = pdMS_TO_TICKS(5000);
 8000a0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a10:	617b      	str	r3, [r7, #20]
	int armSuccess, armAttempt = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000a16:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f003 fa26 	bl	8003e6c <ulTaskNotifyTake>
    xQueueReceive(vaccineQueueHandle, &selectedVaccine, portMAX_DELAY);
 8000a20:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <StartArmTask+0x128>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f107 0112 	add.w	r1, r7, #18
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f891 	bl	8002b54 <xQueueReceive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a38:	483c      	ldr	r0, [pc, #240]	; (8000b2c <StartArmTask+0x12c>)
 8000a3a:	f000 fdb3 	bl	80015a4 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){ //Flash red LED while waiting for arm button
 8000a3e:	e008      	b.n	8000a52 <StartArmTask+0x52>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a44:	4839      	ldr	r0, [pc, #228]	; (8000b2c <StartArmTask+0x12c>)
 8000a46:	f000 fdc6 	bl	80015d6 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8000a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4e:	f002 fc05 	bl	800325c <vTaskDelay>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){ //Flash red LED while waiting for arm button
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	4836      	ldr	r0, [pc, #216]	; (8000b30 <StartArmTask+0x130>)
 8000a56:	f000 fd8d 	bl	8001574 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d0ef      	beq.n	8000a40 <StartArmTask+0x40>
	}

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000a60:	e027      	b.n	8000ab2 <StartArmTask+0xb2>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	4830      	ldr	r0, [pc, #192]	; (8000b2c <StartArmTask+0x12c>)
 8000a6a:	f000 fd9b 	bl	80015a4 <HAL_GPIO_WritePin>
		  armAttempt = 1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
	      if (buttonPressTime == 0)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <StartArmTask+0x7e>
	      {
	        buttonPressTime = xTaskGetTickCount(); //Record time user put arm down
 8000a78:	f002 fe50 	bl	800371c <xTaskGetTickCount>
 8000a7c:	61f8      	str	r0, [r7, #28]
	      }

	      if ((xTaskGetTickCount() - buttonPressTime) >= buttonHoldTime) //Check if user has held button for 5 seconds
 8000a7e:	f002 fe4d 	bl	800371c <xTaskGetTickCount>
 8000a82:	4602      	mov	r2, r0
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	697a      	ldr	r2, [r7, #20]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d808      	bhi.n	8000aa0 <StartArmTask+0xa0>
	      {
	        //Success!
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a94:	4825      	ldr	r0, [pc, #148]	; (8000b2c <StartArmTask+0x12c>)
 8000a96:	f000 fd85 	bl	80015a4 <HAL_GPIO_WritePin>
	        armSuccess = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
	        break;
 8000a9e:	e00f      	b.n	8000ac0 <StartArmTask+0xc0>
	      }

	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) //Check if user released button
 8000aa0:	2140      	movs	r1, #64	; 0x40
 8000aa2:	4823      	ldr	r0, [pc, #140]	; (8000b30 <StartArmTask+0x130>)
 8000aa4:	f000 fd66 	bl	8001574 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d101      	bne.n	8000ab2 <StartArmTask+0xb2>
	      {
	        buttonPressTime = 0; //Reset time
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	481e      	ldr	r0, [pc, #120]	; (8000b30 <StartArmTask+0x130>)
 8000ab6:	f000 fd5d 	bl	8001574 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0d0      	beq.n	8000a62 <StartArmTask+0x62>
	      }
	    }

	if(armAttempt == 1){
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d1a7      	bne.n	8000a16 <StartArmTask+0x16>
		if (armSuccess == 1)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d119      	bne.n	8000b00 <StartArmTask+0x100>
		{
			buttonPressTime = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
	        xQueueSendToFront(taskQueueHandle, &armSuccess, 0);
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <StartArmTask+0x134>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	f107 010c 	add.w	r1, r7, #12
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2200      	movs	r2, #0
 8000adc:	f001 ff3c 	bl	8002958 <xQueueGenericSend>
	        xTaskNotify(injectTaskHandle, 0, eNoAction);
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <StartArmTask+0x138>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	f003 fa07 	bl	8003efc <xTaskGenericNotify>
	        vTaskSuspend(NULL);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f002 fbe8 	bl	80032c4 <vTaskSuspend>
	        vTaskResume(injectTaskHandle);
 8000af4:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <StartArmTask+0x138>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 fca7 	bl	800344c <vTaskResume>
 8000afe:	e78a      	b.n	8000a16 <StartArmTask+0x16>
		}
		else if (armSuccess == 0)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d187      	bne.n	8000a16 <StartArmTask+0x16>
		{
	        xTaskNotify(failsafeTaskHandle, 0, eNoAction);
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <StartArmTask+0x13c>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f003 f9f4 	bl	8003efc <xTaskGenericNotify>
	        vTaskSuspend(NULL);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f002 fbd5 	bl	80032c4 <vTaskSuspend>
	        vTaskResume(failsafeTaskHandle);
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <StartArmTask+0x13c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fc94 	bl	800344c <vTaskResume>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b24:	e777      	b.n	8000a16 <StartArmTask+0x16>
 8000b26:	bf00      	nop
 8000b28:	20000044 	.word	0x20000044
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40020000 	.word	0x40020000
 8000b34:	20000048 	.word	0x20000048
 8000b38:	20000030 	.word	0x20000030
 8000b3c:	20000040 	.word	0x20000040

08000b40 <StartFailSafe>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFailSafe */
void StartFailSafe(void const * argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFailSafe */
  /* Infinite loop */
	TickType_t alertTime = pdMS_TO_TICKS(25000);
 8000b48:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000b4c:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000b52:	2001      	movs	r0, #1
 8000b54:	f003 f98a 	bl	8003e6c <ulTaskNotifyTake>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <StartFailSafe+0xac>)
 8000b60:	f000 fd20 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4820      	ldr	r0, [pc, #128]	; (8000bec <StartFailSafe+0xac>)
 8000b6c:	f000 fd1a 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b76:	481d      	ldr	r0, [pc, #116]	; (8000bec <StartFailSafe+0xac>)
 8000b78:	f000 fd14 	bl	80015a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b82:	481a      	ldr	r0, [pc, #104]	; (8000bec <StartFailSafe+0xac>)
 8000b84:	f000 fd0e 	bl	80015a4 <HAL_GPIO_WritePin>

	while(1){
    if (xTaskGetTickCount() >= alertTime)
 8000b88:	f002 fdc8 	bl	800371c <xTaskGetTickCount>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d80e      	bhi.n	8000bb2 <StartFailSafe+0x72>
    {
        xTaskNotify(defaultTaskHandle, 0, eNoAction);
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <StartFailSafe+0xb0>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f003 f9ad 	bl	8003efc <xTaskGenericNotify>
        vTaskSuspend(NULL);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f002 fb8e 	bl	80032c4 <vTaskSuspend>
        vTaskResume(defaultTaskHandle);
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <StartFailSafe+0xb0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fc4d 	bl	800344c <vTaskResume>
    }
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <StartFailSafe+0xac>)
 8000bb8:	f000 fd0d 	bl	80015d6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000bbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc0:	480a      	ldr	r0, [pc, #40]	; (8000bec <StartFailSafe+0xac>)
 8000bc2:	f000 fd08 	bl	80015d6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000bc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <StartFailSafe+0xac>)
 8000bcc:	f000 fd03 	bl	80015d6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <StartFailSafe+0xac>)
 8000bd6:	f000 fcfe 	bl	80015d6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4803      	ldr	r0, [pc, #12]	; (8000bec <StartFailSafe+0xac>)
 8000bde:	f000 fcfa 	bl	80015d6 <HAL_GPIO_TogglePin>
	HAL_Delay(700);
 8000be2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000be6:	f000 fa23 	bl	8001030 <HAL_Delay>
    if (xTaskGetTickCount() >= alertTime)
 8000bea:	e7cd      	b.n	8000b88 <StartFailSafe+0x48>
 8000bec:	40020c00 	.word	0x40020c00
 8000bf0:	2000002c 	.word	0x2000002c

08000bf4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_GPIO_Init+0xb0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000c42:	2200      	movs	r2, #0
 8000c44:	f24f 0144 	movw	r1, #61508	; 0xf044
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c4a:	f000 fcab 	bl	80015a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_GPIO_Init+0xb8>)
 8000c62:	f000 faeb 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c66:	2374      	movs	r3, #116	; 0x74
 8000c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_GPIO_Init+0xb8>)
 8000c7a:	f000 fadf 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD2 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000c7e:	f24f 0344 	movw	r3, #61508	; 0xf044
 8000c82:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_GPIO_Init+0xb4>)
 8000c98:	f000 fad0 	bl	800123c <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	40020000 	.word	0x40020000

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f000 f97a 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f808 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f7ff ff9a 	bl	8000bf4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000cc0:	f7ff fc22 	bl	8000508 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cc4:	f001 fbde 	bl	8002484 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <main+0x18>
	...

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2230      	movs	r2, #48	; 0x30
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fe58 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <SystemClock_Config+0xb4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <SystemClock_Config+0xb4>)
 8000cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <SystemClock_Config+0xb4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <SystemClock_Config+0xb8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <SystemClock_Config+0xb8>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <SystemClock_Config+0xb8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d30:	2310      	movs	r3, #16
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fc65 	bl	800160c <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d48:	f000 f830 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fec8 	bl	8001afc <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d72:	f000 f81b 	bl	8000dac <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3750      	adds	r7, #80	; 0x50
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 f929 	bl	8000ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40010000 	.word	0x40010000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_MspInit+0x54>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x54>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_MspInit+0x54>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_MspInit+0x54>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_MspInit+0x54>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	f06f 0001 	mvn.w	r0, #1
 8000dfe:	f000 f9f3 	bl	80011e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_InitTick+0xd0>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	4a2d      	ldr	r2, [pc, #180]	; (8000ee0 <HAL_InitTick+0xd0>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_InitTick+0xd0>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 f824 	bl	8001e94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e4c:	f001 f80e 	bl	8001e6c <HAL_RCC_GetPCLK2Freq>
 8000e50:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <HAL_InitTick+0xd4>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	0c9b      	lsrs	r3, r3, #18
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e60:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e62:	4a22      	ldr	r2, [pc, #136]	; (8000eec <HAL_InitTick+0xdc>)
 8000e64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e66:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e6c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e86:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e88:	f001 f836 	bl	8001ef8 <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d11b      	bne.n	8000ed2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <HAL_InitTick+0xd8>)
 8000e9c:	f001 f886 	bl	8001fac <HAL_TIM_Base_Start_IT>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d111      	bne.n	8000ed2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000eae:	2019      	movs	r0, #25
 8000eb0:	f000 f9b6 	bl	8001220 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	d808      	bhi.n	8000ecc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	2019      	movs	r0, #25
 8000ec0:	f000 f992 	bl	80011e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_InitTick+0xe0>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e002      	b.n	8000ed2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3730      	adds	r7, #48	; 0x30
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	200002a0 	.word	0x200002a0
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f26:	f001 f8b1 	bl	800208c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200002a0 	.word	0x200002a0

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f003 fcd1 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fe91 	bl	8000cb0 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f9c:	08004ae8 	.word	0x08004ae8
  ldr r2, =_sbss
 8000fa0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fa4:	20004040 	.word	0x20004040

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f8fc 	bl	80011d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f7ff ff18 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff feea 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	200002e8 	.word	0x200002e8

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200002e8 	.word	0x200002e8

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff4c 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fa:	f7ff ff61 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 80011fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	6978      	ldr	r0, [r7, #20]
 8001206:	f7ff ffb1 	bl	800116c <NVIC_EncodePriority>
 800120a:	4602      	mov	r2, r0
 800120c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff80 	bl	8001118 <__NVIC_SetPriority>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff54 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e16b      	b.n	8001530 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 815a 	bne.w	800152a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d005      	beq.n	800128e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	2b02      	cmp	r3, #2
 800128c:	d130      	bne.n	80012f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68da      	ldr	r2, [r3, #12]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c4:	2201      	movs	r2, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	091b      	lsrs	r3, r3, #4
 80012da:	f003 0201 	and.w	r2, r3, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d017      	beq.n	800132c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d123      	bne.n	8001380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3208      	adds	r2, #8
 800137a:	69b9      	ldr	r1, [r7, #24]
 800137c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80b4 	beq.w	800152a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b60      	ldr	r3, [pc, #384]	; (8001548 <HAL_GPIO_Init+0x30c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a5f      	ldr	r2, [pc, #380]	; (8001548 <HAL_GPIO_Init+0x30c>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b5d      	ldr	r3, [pc, #372]	; (8001548 <HAL_GPIO_Init+0x30c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013de:	4a5b      	ldr	r2, [pc, #364]	; (800154c <HAL_GPIO_Init+0x310>)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_GPIO_Init+0x314>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d02b      	beq.n	8001462 <HAL_GPIO_Init+0x226>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a51      	ldr	r2, [pc, #324]	; (8001554 <HAL_GPIO_Init+0x318>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d025      	beq.n	800145e <HAL_GPIO_Init+0x222>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a50      	ldr	r2, [pc, #320]	; (8001558 <HAL_GPIO_Init+0x31c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01f      	beq.n	800145a <HAL_GPIO_Init+0x21e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4f      	ldr	r2, [pc, #316]	; (800155c <HAL_GPIO_Init+0x320>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x21a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <HAL_GPIO_Init+0x324>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x216>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4d      	ldr	r2, [pc, #308]	; (8001564 <HAL_GPIO_Init+0x328>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x212>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_GPIO_Init+0x32c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x20e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4b      	ldr	r2, [pc, #300]	; (800156c <HAL_GPIO_Init+0x330>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x20a>
 8001442:	2307      	movs	r3, #7
 8001444:	e00e      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001446:	2308      	movs	r3, #8
 8001448:	e00c      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144a:	2306      	movs	r3, #6
 800144c:	e00a      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800144e:	2305      	movs	r3, #5
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001452:	2304      	movs	r3, #4
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x228>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x228>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4935      	ldr	r1, [pc, #212]	; (800154c <HAL_GPIO_Init+0x310>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_GPIO_Init+0x334>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a6:	4a32      	ldr	r2, [pc, #200]	; (8001570 <HAL_GPIO_Init+0x334>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_GPIO_Init+0x334>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d0:	4a27      	ldr	r2, [pc, #156]	; (8001570 <HAL_GPIO_Init+0x334>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_GPIO_Init+0x334>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <HAL_GPIO_Init+0x334>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_GPIO_Init+0x334>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <HAL_GPIO_Init+0x334>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f ae90 	bls.w	8001258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40021000 	.word	0x40021000
 8001564:	40021400 	.word	0x40021400
 8001568:	40021800 	.word	0x40021800
 800156c:	40021c00 	.word	0x40021c00
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e001      	b.n	8001596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015e8:	887a      	ldrh	r2, [r7, #2]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	400b      	ands	r3, r1
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e267      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d075      	beq.n	8001716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b04      	cmp	r3, #4
 8001634:	d00c      	beq.n	8001650 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163e:	2b08      	cmp	r3, #8
 8001640:	d112      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001642:	4b82      	ldr	r3, [pc, #520]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b7e      	ldr	r3, [pc, #504]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d05b      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d157      	bne.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e242      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x74>
 8001672:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a75      	ldr	r2, [pc, #468]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x98>
 800168a:	4b70      	ldr	r3, [pc, #448]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6f      	ldr	r2, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6c      	ldr	r2, [pc, #432]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xb0>
 80016a4:	4b69      	ldr	r3, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a68      	ldr	r2, [pc, #416]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fca8 	bl	8001018 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fca4 	bl	8001018 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e207      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc94 	bl	8001018 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc90 	bl	8001018 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1f3      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0xe8>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d063      	beq.n	80017ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001722:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001736:	2b08      	cmp	r3, #8
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x152>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e1c7      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4937      	ldr	r1, [pc, #220]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e03a      	b.n	80017ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_OscConfig+0x244>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fc49 	bl	8001018 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178a:	f7ff fc45 	bl	8001018 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1a8      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4925      	ldr	r1, [pc, #148]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_OscConfig+0x244>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc28 	bl	8001018 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc24 	bl	8001018 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e187      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d036      	beq.n	8001864 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d016      	beq.n	800182c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_RCC_OscConfig+0x248>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fc08 	bl	8001018 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fc04 	bl	8001018 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e167      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_RCC_OscConfig+0x240>)
 8001820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x200>
 800182a:	e01b      	b.n	8001864 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <HAL_RCC_OscConfig+0x248>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fbf1 	bl	8001018 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	e00e      	b.n	8001858 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183a:	f7ff fbed 	bl	8001018 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d907      	bls.n	8001858 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e150      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
 800184c:	40023800 	.word	0x40023800
 8001850:	42470000 	.word	0x42470000
 8001854:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ea      	bne.n	800183a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 8097 	beq.w	80019a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b7d      	ldr	r3, [pc, #500]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a7c      	ldr	r2, [pc, #496]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189e:	2301      	movs	r3, #1
 80018a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a2:	4b77      	ldr	r3, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d118      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ae:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fbad 	bl	8001018 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fba9 	bl	8001018 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e10c      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <HAL_RCC_OscConfig+0x474>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2ea>
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a63      	ldr	r2, [pc, #396]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x324>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x30c>
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 0304 	orr.w	r3, r3, #4
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800190c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190e:	4a5b      	ldr	r2, [pc, #364]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6713      	str	r3, [r2, #112]	; 0x70
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x324>
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	4a54      	ldr	r2, [pc, #336]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800192a:	f023 0304 	bic.w	r3, r3, #4
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d015      	beq.n	8001964 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fb6e 	bl	8001018 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fb6a 	bl	8001018 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0cb      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ee      	beq.n	8001940 <HAL_RCC_OscConfig+0x334>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7ff fb58 	bl	8001018 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	e00a      	b.n	8001982 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196c:	f7ff fb54 	bl	8001018 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0b5      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1ee      	bne.n	800196c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	4a38      	ldr	r2, [pc, #224]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80a1 	beq.w	8001aec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d05c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d141      	bne.n	8001a42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_RCC_OscConfig+0x478>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb28 	bl	8001018 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff fb24 	bl	8001018 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e087      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	3b01      	subs	r3, #1
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	491b      	ldr	r1, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_RCC_OscConfig+0x478>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fafd 	bl	8001018 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff faf9 	bl	8001018 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e05c      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x416>
 8001a40:	e054      	b.n	8001aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_RCC_OscConfig+0x478>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fae6 	bl	8001018 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fae2 	bl	8001018 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e045      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_OscConfig+0x470>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x444>
 8001a6e:	e03d      	b.n	8001aec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e038      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000
 8001a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d028      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d121      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d11a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ab8:	4013      	ands	r3, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d111      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0cc      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b68      	ldr	r3, [pc, #416]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d90c      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b65      	ldr	r3, [pc, #404]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0b8      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b68:	4b53      	ldr	r3, [pc, #332]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d044      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b47      	ldr	r3, [pc, #284]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d119      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e07f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e067      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4934      	ldr	r1, [pc, #208]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7ff fa14 	bl	8001018 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff fa10 	bl	8001018 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e04f      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d20c      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b20      	ldr	r3, [pc, #128]	; (8001cb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e032      	b.n	8001caa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4916      	ldr	r1, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f8b4 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023c00 	.word	0x40023c00
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08004ac0 	.word	0x08004ac0
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ccc:	b090      	sub	sp, #64	; 0x40
 8001cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd8:	2300      	movs	r3, #0
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce0:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d00d      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x40>
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	f200 80a1 	bhi.w	8001e34 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cfa:	e09b      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d00:	e09b      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d06:	e098      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d08:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d12:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d028      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	2200      	movs	r2, #0
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	627a      	str	r2, [r7, #36]	; 0x24
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d30:	2100      	movs	r1, #0
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d34:	fb03 f201 	mul.w	r2, r3, r1
 8001d38:	2300      	movs	r3, #0
 8001d3a:	fb00 f303 	mul.w	r3, r0, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a43      	ldr	r2, [pc, #268]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d42:	fba0 1202 	umull	r1, r2, r0, r2
 8001d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d48:	460a      	mov	r2, r1
 8001d4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4e:	4413      	add	r3, r2
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	2200      	movs	r2, #0
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	61fa      	str	r2, [r7, #28]
 8001d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d62:	f7fe fa35 	bl	80001d0 <__aeabi_uldivmod>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6e:	e053      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4b35      	ldr	r3, [pc, #212]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	2200      	movs	r2, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	617a      	str	r2, [r7, #20]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d82:	f04f 0b00 	mov.w	fp, #0
 8001d86:	4652      	mov	r2, sl
 8001d88:	465b      	mov	r3, fp
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	0159      	lsls	r1, r3, #5
 8001d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d98:	0150      	lsls	r0, r2, #5
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001da2:	eb63 090b 	sbc.w	r9, r3, fp
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001db2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001db6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dba:	ebb2 0408 	subs.w	r4, r2, r8
 8001dbe:	eb63 0509 	sbc.w	r5, r3, r9
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	00eb      	lsls	r3, r5, #3
 8001dcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd0:	00e2      	lsls	r2, r4, #3
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	eb14 030a 	adds.w	r3, r4, sl
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	eb45 030b 	adc.w	r3, r5, fp
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dee:	4629      	mov	r1, r5
 8001df0:	028b      	lsls	r3, r1, #10
 8001df2:	4621      	mov	r1, r4
 8001df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df8:	4621      	mov	r1, r4
 8001dfa:	028a      	lsls	r2, r1, #10
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	2200      	movs	r2, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	60fa      	str	r2, [r7, #12]
 8001e08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e0c:	f7fe f9e0 	bl	80001d0 <__aeabi_uldivmod>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4613      	mov	r3, r2
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	0c1b      	lsrs	r3, r3, #16
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	3301      	adds	r3, #1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3740      	adds	r7, #64	; 0x40
 8001e40:	46bd      	mov	sp, r7
 8001e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	00f42400 	.word	0x00f42400
 8001e50:	017d7840 	.word	0x017d7840

08001e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e70:	f7ff fff0 	bl	8001e54 <HAL_RCC_GetHCLKFreq>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	0b5b      	lsrs	r3, r3, #13
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4903      	ldr	r1, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e82:	5ccb      	ldrb	r3, [r1, r3]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	08004ad0 	.word	0x08004ad0

08001e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	08db      	lsrs	r3, r3, #3
 8001ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <HAL_RCC_GetClockConfig+0x60>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0207 	and.w	r2, r3, #7
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40023c00 	.word	0x40023c00

08001ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e041      	b.n	8001f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f839 	bl	8001f96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 f9d8 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e04e      	b.n	8002062 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a23      	ldr	r2, [pc, #140]	; (8002070 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d022      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d01d      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d018      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_TIM_Base_Start_IT+0xcc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_TIM_Base_Start_IT+0xd0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00e      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_TIM_Base_Start_IT+0xd4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_TIM_Base_Start_IT+0xd8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x80>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_TIM_Base_Start_IT+0xdc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d010      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204e:	e007      	b.n	8002060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40010000 	.word	0x40010000
 8002074:	40000400 	.word	0x40000400
 8002078:	40000800 	.word	0x40000800
 800207c:	40000c00 	.word	0x40000c00
 8002080:	40010400 	.word	0x40010400
 8002084:	40014000 	.word	0x40014000
 8002088:	40001800 	.word	0x40001800

0800208c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0202 	mvn.w	r2, #2
 80020b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8ee 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8e0 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8f1 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0204 	mvn.w	r2, #4
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2202      	movs	r2, #2
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8c4 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8b6 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8c7 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b08      	cmp	r3, #8
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0208 	mvn.w	r2, #8
 8002160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2204      	movs	r2, #4
 8002166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f89a 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f88c 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f89d 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b10      	cmp	r3, #16
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0210 	mvn.w	r2, #16
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2208      	movs	r2, #8
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f870 	bl	80022b0 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f862 	bl	800229c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f873 	bl	80022c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d107      	bne.n	8002210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0201 	mvn.w	r2, #1
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fdbc 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	d10e      	bne.n	800223c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b80      	cmp	r3, #128	; 0x80
 800222a:	d107      	bne.n	800223c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f902 	bl	8002440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f838 	bl	80022d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b20      	cmp	r3, #32
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0220 	mvn.w	r2, #32
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8cc 	bl	800242c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a40      	ldr	r2, [pc, #256]	; (8002400 <TIM_Base_SetConfig+0x114>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d00f      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3d      	ldr	r2, [pc, #244]	; (8002404 <TIM_Base_SetConfig+0x118>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00b      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <TIM_Base_SetConfig+0x11c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3b      	ldr	r2, [pc, #236]	; (800240c <TIM_Base_SetConfig+0x120>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d003      	beq.n	800232c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <TIM_Base_SetConfig+0x124>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <TIM_Base_SetConfig+0x114>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234c:	d027      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2c      	ldr	r2, [pc, #176]	; (8002404 <TIM_Base_SetConfig+0x118>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d023      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2b      	ldr	r2, [pc, #172]	; (8002408 <TIM_Base_SetConfig+0x11c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2a      	ldr	r2, [pc, #168]	; (800240c <TIM_Base_SetConfig+0x120>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <TIM_Base_SetConfig+0x124>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d017      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a28      	ldr	r2, [pc, #160]	; (8002414 <TIM_Base_SetConfig+0x128>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <TIM_Base_SetConfig+0x12c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00f      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a26      	ldr	r2, [pc, #152]	; (800241c <TIM_Base_SetConfig+0x130>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d00b      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a25      	ldr	r2, [pc, #148]	; (8002420 <TIM_Base_SetConfig+0x134>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d007      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a24      	ldr	r2, [pc, #144]	; (8002424 <TIM_Base_SetConfig+0x138>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a23      	ldr	r2, [pc, #140]	; (8002428 <TIM_Base_SetConfig+0x13c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d108      	bne.n	80023b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <TIM_Base_SetConfig+0x114>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d003      	beq.n	80023e4 <TIM_Base_SetConfig+0xf8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <TIM_Base_SetConfig+0x124>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	615a      	str	r2, [r3, #20]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40010000 	.word	0x40010000
 8002404:	40000400 	.word	0x40000400
 8002408:	40000800 	.word	0x40000800
 800240c:	40000c00 	.word	0x40000c00
 8002410:	40010400 	.word	0x40010400
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800
 8002420:	40001800 	.word	0x40001800
 8002424:	40001c00 	.word	0x40001c00
 8002428:	40002000 	.word	0x40002000

0800242c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002466:	2b84      	cmp	r3, #132	; 0x84
 8002468:	d005      	beq.n	8002476 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800246a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	3303      	adds	r3, #3
 8002474:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002488:	f001 f83e 	bl	8003508 <vTaskStartScheduler>
  
  return osOK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}

08002492 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002494:	b089      	sub	sp, #36	; 0x24
 8002496:	af04      	add	r7, sp, #16
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <osThreadCreate+0x54>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01c      	beq.n	80024e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685c      	ldr	r4, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681d      	ldr	r5, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691e      	ldr	r6, [r3, #16]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ffc8 	bl	8002454 <makeFreeRtosPriority>
 80024c4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ce:	9202      	str	r2, [sp, #8]
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	9100      	str	r1, [sp, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4632      	mov	r2, r6
 80024d8:	4629      	mov	r1, r5
 80024da:	4620      	mov	r0, r4
 80024dc:	f000 fd2a 	bl	8002f34 <xTaskCreateStatic>
 80024e0:	4603      	mov	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	e01c      	b.n	8002520 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685c      	ldr	r4, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024f2:	b29e      	uxth	r6, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ffaa 	bl	8002454 <makeFreeRtosPriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f107 030c 	add.w	r3, r7, #12
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	9200      	str	r2, [sp, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4632      	mov	r2, r6
 800250e:	4629      	mov	r1, r5
 8002510:	4620      	mov	r0, r4
 8002512:	f000 fd6c 	bl	8002fee <xTaskCreate>
 8002516:	4603      	mov	r3, r0
 8002518:	2b01      	cmp	r3, #1
 800251a:	d001      	beq.n	8002520 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002520:	68fb      	ldr	r3, [r7, #12]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800252a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800252a:	b590      	push	{r4, r7, lr}
 800252c:	b085      	sub	sp, #20
 800252e:	af02      	add	r7, sp, #8
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d011      	beq.n	8002560 <osMessageCreate+0x36>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	2400      	movs	r4, #0
 8002556:	9400      	str	r4, [sp, #0]
 8002558:	f000 f92c 	bl	80027b4 <xQueueGenericCreateStatic>
 800255c:	4603      	mov	r3, r0
 800255e:	e008      	b.n	8002572 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	4619      	mov	r1, r3
 800256c:	f000 f99a 	bl	80028a4 <xQueueGenericCreate>
 8002570:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}

0800257a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 0208 	add.w	r2, r3, #8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f04f 32ff 	mov.w	r2, #4294967295
 8002592:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f103 0208 	add.w	r2, r3, #8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0208 	add.w	r2, r3, #8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d103      	bne.n	800263c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e00c      	b.n	8002656 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3308      	adds	r3, #8
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	e002      	b.n	800264a <vListInsert+0x2e>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d2f6      	bcs.n	8002644 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6852      	ldr	r2, [r2, #4]
 80026ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d103      	bne.n	80026c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800270e:	f001 fe41 	bl	8004394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	3b01      	subs	r3, #1
 8002740:	68f9      	ldr	r1, [r7, #12]
 8002742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	441a      	add	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	22ff      	movs	r2, #255	; 0xff
 8002752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	22ff      	movs	r2, #255	; 0xff
 800275a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d114      	bne.n	800278e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01a      	beq.n	80027a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	3310      	adds	r3, #16
 8002770:	4618      	mov	r0, r3
 8002772:	f001 f91b 	bl	80039ac <xTaskRemoveFromEventList>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d012      	beq.n	80027a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <xQueueGenericReset+0xcc>)
 800277e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	e009      	b.n	80027a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3310      	adds	r3, #16
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fef1 	bl	800257a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3324      	adds	r3, #36	; 0x24
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff feec 	bl	800257a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027a2:	f001 fe27 	bl	80043f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	e000ed04 	.word	0xe000ed04

080027b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027da:	bf00      	nop
 80027dc:	e7fe      	b.n	80027dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <xQueueGenericCreateStatic+0x52>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <xQueueGenericCreateStatic+0x56>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <xQueueGenericCreateStatic+0x58>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	623b      	str	r3, [r7, #32]
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <xQueueGenericCreateStatic+0x7e>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <xQueueGenericCreateStatic+0x82>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <xQueueGenericCreateStatic+0x84>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800283c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002840:	f383 8811 	msr	BASEPRI, r3
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	61fb      	str	r3, [r7, #28]
}
 800284e:	bf00      	nop
 8002850:	e7fe      	b.n	8002850 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002852:	2348      	movs	r3, #72	; 0x48
 8002854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b48      	cmp	r3, #72	; 0x48
 800285a:	d00a      	beq.n	8002872 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	61bb      	str	r3, [r7, #24]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002872:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00d      	beq.n	800289a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002886:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f83f 	bl	8002918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800289c:	4618      	mov	r0, r3
 800289e:	3730      	adds	r7, #48	; 0x30
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	613b      	str	r3, [r7, #16]
}
 80028ca:	bf00      	nop
 80028cc:	e7fe      	b.n	80028cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	3348      	adds	r3, #72	; 0x48
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fe3b 	bl	8004558 <pvPortMalloc>
 80028e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d011      	beq.n	800290e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3348      	adds	r3, #72	; 0x48
 80028f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028fc:	79fa      	ldrb	r2, [r7, #7]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4613      	mov	r3, r2
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f805 	bl	8002918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800290e:	69bb      	ldr	r3, [r7, #24]
	}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e002      	b.n	800293a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002946:	2101      	movs	r1, #1
 8002948:	69b8      	ldr	r0, [r7, #24]
 800294a:	f7ff fecb 	bl	80026e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002966:	2300      	movs	r3, #0
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <xQueueGenericSend+0x32>
	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <xQueueGenericSend+0x40>
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <xQueueGenericSend+0x44>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <xQueueGenericSend+0x46>
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <xQueueGenericSend+0x60>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d103      	bne.n	80029c6 <xQueueGenericSend+0x6e>
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <xQueueGenericSend+0x72>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueGenericSend+0x74>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	623b      	str	r3, [r7, #32]
}
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029e6:	f001 f99d 	bl	8003d24 <xTaskGetSchedulerState>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <xQueueGenericSend+0x9e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <xQueueGenericSend+0xa2>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <xQueueGenericSend+0xa4>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericSend+0xbe>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	61fb      	str	r3, [r7, #28]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a16:	f001 fcbd 	bl	8004394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <xQueueGenericSend+0xd4>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d129      	bne.n	8002a80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a32:	f000 f96f 	bl	8002d14 <prvCopyDataToQueue>
 8002a36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 ffb1 	bl	80039ac <xTaskRemoveFromEventList>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d013      	beq.n	8002a78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <xQueueGenericSend+0x1f8>)
 8002a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	e00a      	b.n	8002a78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <xQueueGenericSend+0x1f8>)
 8002a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a78:	f001 fcbc 	bl	80043f4 <vPortExitCritical>
				return pdPASS;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e063      	b.n	8002b48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a86:	f001 fcb5 	bl	80043f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e05c      	b.n	8002b48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d106      	bne.n	8002aa2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 ffe9 	bl	8003a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aa2:	f001 fca7 	bl	80043f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aa6:	f000 fd8f 	bl	80035c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aaa:	f001 fc73 	bl	8004394 <vPortEnterCritical>
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d103      	bne.n	8002ac4 <xQueueGenericSend+0x16c>
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad0:	d103      	bne.n	8002ada <xQueueGenericSend+0x182>
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ada:	f001 fc8b 	bl	80043f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ade:	1d3a      	adds	r2, r7, #4
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ffd8 	bl	8003a9c <xTaskCheckForTimeOut>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d124      	bne.n	8002b3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af4:	f000 fa06 	bl	8002f04 <prvIsQueueFull>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d018      	beq.n	8002b30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	3310      	adds	r3, #16
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 ff2c 	bl	8003964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0e:	f000 f991 	bl	8002e34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b12:	f000 fd67 	bl	80035e4 <xTaskResumeAll>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f af7c 	bne.w	8002a16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <xQueueGenericSend+0x1f8>)
 8002b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	e772      	b.n	8002a16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b32:	f000 f97f 	bl	8002e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b36:	f000 fd55 	bl	80035e4 <xTaskResumeAll>
 8002b3a:	e76c      	b.n	8002a16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3e:	f000 f979 	bl	8002e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b42:	f000 fd4f 	bl	80035e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3738      	adds	r7, #56	; 0x38
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	e000ed04 	.word	0xe000ed04

08002b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	; 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <xQueueReceive+0x30>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	623b      	str	r3, [r7, #32]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d103      	bne.n	8002b92 <xQueueReceive+0x3e>
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <xQueueReceive+0x42>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <xQueueReceive+0x44>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <xQueueReceive+0x5e>
	__asm volatile
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	61fb      	str	r3, [r7, #28]
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bb2:	f001 f8b7 	bl	8003d24 <xTaskGetSchedulerState>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <xQueueReceive+0x6e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xQueueReceive+0x72>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueReceive+0x74>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueReceive+0x8e>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	61bb      	str	r3, [r7, #24]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002be2:	f001 fbd7 	bl	8004394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01f      	beq.n	8002c32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bf2:	68b9      	ldr	r1, [r7, #8]
 8002bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf6:	f000 f8f7 	bl	8002de8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00f      	beq.n	8002c2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fecc 	bl	80039ac <xTaskRemoveFromEventList>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <xQueueReceive+0x1bc>)
 8002c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c2a:	f001 fbe3 	bl	80043f4 <vPortExitCritical>
				return pdPASS;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e069      	b.n	8002d06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d103      	bne.n	8002c40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c38:	f001 fbdc 	bl	80043f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e062      	b.n	8002d06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 ff10 	bl	8003a70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c54:	f001 fbce 	bl	80043f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c58:	f000 fcb6 	bl	80035c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c5c:	f001 fb9a 	bl	8004394 <vPortEnterCritical>
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d103      	bne.n	8002c76 <xQueueReceive+0x122>
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d103      	bne.n	8002c8c <xQueueReceive+0x138>
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8c:	f001 fbb2 	bl	80043f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c90:	1d3a      	adds	r2, r7, #4
 8002c92:	f107 0310 	add.w	r3, r7, #16
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 feff 	bl	8003a9c <xTaskCheckForTimeOut>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d123      	bne.n	8002cec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca6:	f000 f917 	bl	8002ed8 <prvIsQueueEmpty>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d017      	beq.n	8002ce0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fe53 	bl	8003964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc0:	f000 f8b8 	bl	8002e34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cc4:	f000 fc8e 	bl	80035e4 <xTaskResumeAll>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d189      	bne.n	8002be2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <xQueueReceive+0x1bc>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	e780      	b.n	8002be2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ce2:	f000 f8a7 	bl	8002e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ce6:	f000 fc7d 	bl	80035e4 <xTaskResumeAll>
 8002cea:	e77a      	b.n	8002be2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cee:	f000 f8a1 	bl	8002e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cf2:	f000 fc77 	bl	80035e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf8:	f000 f8ee 	bl	8002ed8 <prvIsQueueEmpty>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f43f af6f 	beq.w	8002be2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10d      	bne.n	8002d4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d14d      	bne.n	8002dd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f80e 	bl	8003d60 <xTaskPriorityDisinherit>
 8002d44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	e043      	b.n	8002dd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d119      	bne.n	8002d88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6858      	ldr	r0, [r3, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	f001 fe08 	bl	8004974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	441a      	add	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d32b      	bcc.n	8002dd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	e026      	b.n	8002dd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	68d8      	ldr	r0, [r3, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	461a      	mov	r2, r3
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	f001 fdee 	bl	8004974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	425b      	negs	r3, r3
 8002da2:	441a      	add	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	425b      	negs	r3, r3
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d105      	bne.n	8002dd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002dde:	697b      	ldr	r3, [r7, #20]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d018      	beq.n	8002e2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	441a      	add	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d303      	bcc.n	8002e1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68d9      	ldr	r1, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	461a      	mov	r2, r3
 8002e26:	6838      	ldr	r0, [r7, #0]
 8002e28:	f001 fda4 	bl	8004974 <memcpy>
	}
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e3c:	f001 faaa 	bl	8004394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e48:	e011      	b.n	8002e6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3324      	adds	r3, #36	; 0x24
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fda8 	bl	80039ac <xTaskRemoveFromEventList>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e62:	f000 fe7d 	bl	8003b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	dce9      	bgt.n	8002e4a <prvUnlockQueue+0x16>
 8002e76:	e000      	b.n	8002e7a <prvUnlockQueue+0x46>
					break;
 8002e78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e82:	f001 fab7 	bl	80043f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e86:	f001 fa85 	bl	8004394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e92:	e011      	b.n	8002eb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fd83 	bl	80039ac <xTaskRemoveFromEventList>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002eac:	f000 fe58 	bl	8003b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002eb0:	7bbb      	ldrb	r3, [r7, #14]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	dce9      	bgt.n	8002e94 <prvUnlockQueue+0x60>
 8002ec0:	e000      	b.n	8002ec4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ec2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	22ff      	movs	r2, #255	; 0xff
 8002ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ecc:	f001 fa92 	bl	80043f4 <vPortExitCritical>
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ee0:	f001 fa58 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e001      	b.n	8002ef6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ef6:	f001 fa7d 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f0c:	f001 fa42 	bl	8004394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d102      	bne.n	8002f22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e001      	b.n	8002f26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f26:	f001 fa65 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08e      	sub	sp, #56	; 0x38
 8002f38:	af04      	add	r7, sp, #16
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <xTaskCreateStatic+0x46>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61fb      	str	r3, [r7, #28]
}
 8002f76:	bf00      	nop
 8002f78:	e7fe      	b.n	8002f78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f7a:	2354      	movs	r3, #84	; 0x54
 8002f7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b54      	cmp	r3, #84	; 0x54
 8002f82:	d00a      	beq.n	8002f9a <xTaskCreateStatic+0x66>
	__asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	61bb      	str	r3, [r7, #24]
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01e      	beq.n	8002fe0 <xTaskCreateStatic+0xac>
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01b      	beq.n	8002fe0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9303      	str	r3, [sp, #12]
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	9302      	str	r3, [sp, #8]
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f850 	bl	8003078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fda:	f000 f8d5 	bl	8003188 <prvAddNewTaskToReadyList>
 8002fde:	e001      	b.n	8002fe4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fe4:	697b      	ldr	r3, [r7, #20]
	}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3728      	adds	r7, #40	; 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08c      	sub	sp, #48	; 0x30
 8002ff2:	af04      	add	r7, sp, #16
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4618      	mov	r0, r3
 8003004:	f001 faa8 	bl	8004558 <pvPortMalloc>
 8003008:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00e      	beq.n	800302e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003010:	2054      	movs	r0, #84	; 0x54
 8003012:	f001 faa1 	bl	8004558 <pvPortMalloc>
 8003016:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
 8003024:	e005      	b.n	8003032 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f001 fb62 	bl	80046f0 <vPortFree>
 800302c:	e001      	b.n	8003032 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d017      	beq.n	8003068 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003040:	88fa      	ldrh	r2, [r7, #6]
 8003042:	2300      	movs	r3, #0
 8003044:	9303      	str	r3, [sp, #12]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	9302      	str	r3, [sp, #8]
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f80e 	bl	8003078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800305c:	69f8      	ldr	r0, [r7, #28]
 800305e:	f000 f893 	bl	8003188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003062:	2301      	movs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e002      	b.n	800306e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
 800306c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800306e:	69bb      	ldr	r3, [r7, #24]
	}
 8003070:	4618      	mov	r0, r3
 8003072:	3720      	adds	r7, #32
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003090:	3b01      	subs	r3, #1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f023 0307 	bic.w	r3, r3, #7
 800309e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	617b      	str	r3, [r7, #20]
}
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01f      	beq.n	8003106 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e012      	b.n	80030f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	7819      	ldrb	r1, [r3, #0]
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	3334      	adds	r3, #52	; 0x34
 80030dc:	460a      	mov	r2, r1
 80030de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	3301      	adds	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d9e9      	bls.n	80030cc <prvInitialiseNewTask+0x54>
 80030f8:	e000      	b.n	80030fc <prvInitialiseNewTask+0x84>
			{
				break;
 80030fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003104:	e003      	b.n	800310e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	2b06      	cmp	r3, #6
 8003112:	d901      	bls.n	8003118 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003114:	2306      	movs	r3, #6
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003122:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	3304      	adds	r3, #4
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fa43 	bl	80025ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	3318      	adds	r3, #24
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fa3e 	bl	80025ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003142:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	f1c3 0207 	rsb	r2, r3, #7
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	2200      	movs	r2, #0
 8003158:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	68f9      	ldr	r1, [r7, #12]
 8003166:	69b8      	ldr	r0, [r7, #24]
 8003168:	f000 ffe4 	bl	8004134 <pxPortInitialiseStack>
 800316c:	4602      	mov	r2, r0
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800317e:	bf00      	nop
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003190:	f001 f900 	bl	8004394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003194:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <prvAddNewTaskToReadyList+0xb8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	4a29      	ldr	r2, [pc, #164]	; (8003240 <prvAddNewTaskToReadyList+0xb8>)
 800319c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <prvAddNewTaskToReadyList+0xbc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031a6:	4a27      	ldr	r2, [pc, #156]	; (8003244 <prvAddNewTaskToReadyList+0xbc>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <prvAddNewTaskToReadyList+0xb8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d110      	bne.n	80031d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031b4:	f000 fcf8 	bl	8003ba8 <prvInitialiseTaskLists>
 80031b8:	e00d      	b.n	80031d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031ba:	4b23      	ldr	r3, [pc, #140]	; (8003248 <prvAddNewTaskToReadyList+0xc0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <prvAddNewTaskToReadyList+0xbc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d802      	bhi.n	80031d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031d0:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <prvAddNewTaskToReadyList+0xbc>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <prvAddNewTaskToReadyList+0xc4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	4a1b      	ldr	r2, [pc, #108]	; (800324c <prvAddNewTaskToReadyList+0xc4>)
 80031de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <prvAddNewTaskToReadyList+0xc8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <prvAddNewTaskToReadyList+0xc8>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <prvAddNewTaskToReadyList+0xcc>)
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f7ff f9e3 	bl	80025d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800320e:	f001 f8f1 	bl	80043f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <prvAddNewTaskToReadyList+0xc0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00e      	beq.n	8003238 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <prvAddNewTaskToReadyList+0xbc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	429a      	cmp	r2, r3
 8003226:	d207      	bcs.n	8003238 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <prvAddNewTaskToReadyList+0xd0>)
 800322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200003ec 	.word	0x200003ec
 8003244:	200002ec 	.word	0x200002ec
 8003248:	200003f8 	.word	0x200003f8
 800324c:	20000408 	.word	0x20000408
 8003250:	200003f4 	.word	0x200003f4
 8003254:	200002f0 	.word	0x200002f0
 8003258:	e000ed04 	.word	0xe000ed04

0800325c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d017      	beq.n	800329e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <vTaskDelay+0x60>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <vTaskDelay+0x30>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	60bb      	str	r3, [r7, #8]
}
 8003288:	bf00      	nop
 800328a:	e7fe      	b.n	800328a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800328c:	f000 f99c 	bl	80035c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003290:	2100      	movs	r1, #0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fee8 	bl	8004068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003298:	f000 f9a4 	bl	80035e4 <xTaskResumeAll>
 800329c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <vTaskDelay+0x64>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000414 	.word	0x20000414
 80032c0:	e000ed04 	.word	0xe000ed04

080032c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80032cc:	f001 f862 	bl	8004394 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <vTaskSuspend+0x18>
 80032d6:	4b3c      	ldr	r3, [pc, #240]	; (80033c8 <vTaskSuspend+0x104>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e000      	b.n	80032de <vTaskSuspend+0x1a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff f9d2 	bl	800268e <uxListRemove>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d115      	bne.n	800331c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	4935      	ldr	r1, [pc, #212]	; (80033cc <vTaskSuspend+0x108>)
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <vTaskSuspend+0x58>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	2201      	movs	r2, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43da      	mvns	r2, r3
 8003312:	4b2f      	ldr	r3, [pc, #188]	; (80033d0 <vTaskSuspend+0x10c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4013      	ands	r3, r2
 8003318:	4a2d      	ldr	r2, [pc, #180]	; (80033d0 <vTaskSuspend+0x10c>)
 800331a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3318      	adds	r3, #24
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff f9b0 	bl	800268e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3304      	adds	r3, #4
 8003332:	4619      	mov	r1, r3
 8003334:	4827      	ldr	r0, [pc, #156]	; (80033d4 <vTaskSuspend+0x110>)
 8003336:	f7ff f94d 	bl	80025d4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d103      	bne.n	800334e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800334e:	f001 f851 	bl	80043f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003352:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <vTaskSuspend+0x114>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800335a:	f001 f81b 	bl	8004394 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800335e:	f000 fcc1 	bl	8003ce4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003362:	f001 f847 	bl	80043f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <vTaskSuspend+0x104>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	429a      	cmp	r2, r3
 800336e:	d127      	bne.n	80033c0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <vTaskSuspend+0x114>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003378:	4b18      	ldr	r3, [pc, #96]	; (80033dc <vTaskSuspend+0x118>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <vTaskSuspend+0xd2>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60bb      	str	r3, [r7, #8]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <vTaskSuspend+0x11c>)
 8003398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033a6:	e00b      	b.n	80033c0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <vTaskSuspend+0x110>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <vTaskSuspend+0x120>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d103      	bne.n	80033bc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <vTaskSuspend+0x104>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
	}
 80033ba:	e001      	b.n	80033c0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80033bc:	f000 fa76 	bl	80038ac <vTaskSwitchContext>
	}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200002ec 	.word	0x200002ec
 80033cc:	200002f0 	.word	0x200002f0
 80033d0:	200003f4 	.word	0x200003f4
 80033d4:	200003d8 	.word	0x200003d8
 80033d8:	200003f8 	.word	0x200003f8
 80033dc:	20000414 	.word	0x20000414
 80033e0:	e000ed04 	.word	0xe000ed04
 80033e4:	200003ec 	.word	0x200003ec

080033e8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	60fb      	str	r3, [r7, #12]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <prvTaskIsTaskSuspended+0x5c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10a      	bne.n	8003434 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <prvTaskIsTaskSuspended+0x60>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d005      	beq.n	8003434 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003434:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003436:	4618      	mov	r0, r3
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200003d8 	.word	0x200003d8
 8003448:	200003ac 	.word	0x200003ac

0800344c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <vTaskResume+0x28>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	60bb      	str	r3, [r7, #8]
}
 8003470:	bf00      	nop
 8003472:	e7fe      	b.n	8003472 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <vTaskResume+0xac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	429a      	cmp	r2, r3
 800347c:	d037      	beq.n	80034ee <vTaskResume+0xa2>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d034      	beq.n	80034ee <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003484:	f000 ff86 	bl	8004394 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff ffad 	bl	80033e8 <prvTaskIsTaskSuspended>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d02a      	beq.n	80034ea <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3304      	adds	r3, #4
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff f8f8 	bl	800268e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	2201      	movs	r2, #1
 80034a4:	409a      	lsls	r2, r3
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <vTaskResume+0xb0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <vTaskResume+0xb0>)
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4a10      	ldr	r2, [pc, #64]	; (8003500 <vTaskResume+0xb4>)
 80034be:	441a      	add	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7ff f884 	bl	80025d4 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <vTaskResume+0xac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d307      	bcc.n	80034ea <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <vTaskResume+0xb8>)
 80034dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80034ea:	f000 ff83 	bl	80043f4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200002ec 	.word	0x200002ec
 80034fc:	200003f4 	.word	0x200003f4
 8003500:	200002f0 	.word	0x200002f0
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003516:	463a      	mov	r2, r7
 8003518:	1d39      	adds	r1, r7, #4
 800351a:	f107 0308 	add.w	r3, r7, #8
 800351e:	4618      	mov	r0, r3
 8003520:	f7fc ffd8 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003524:	6839      	ldr	r1, [r7, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	9202      	str	r2, [sp, #8]
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2300      	movs	r3, #0
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	460a      	mov	r2, r1
 8003536:	491e      	ldr	r1, [pc, #120]	; (80035b0 <vTaskStartScheduler+0xa8>)
 8003538:	481e      	ldr	r0, [pc, #120]	; (80035b4 <vTaskStartScheduler+0xac>)
 800353a:	f7ff fcfb 	bl	8002f34 <xTaskCreateStatic>
 800353e:	4603      	mov	r3, r0
 8003540:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <vTaskStartScheduler+0xb0>)
 8003542:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003544:	4b1c      	ldr	r3, [pc, #112]	; (80035b8 <vTaskStartScheduler+0xb0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800354c:	2301      	movs	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e001      	b.n	8003556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d116      	bne.n	800358a <vTaskStartScheduler+0x82>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	613b      	str	r3, [r7, #16]
}
 800356e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003570:	4b12      	ldr	r3, [pc, #72]	; (80035bc <vTaskStartScheduler+0xb4>)
 8003572:	f04f 32ff 	mov.w	r2, #4294967295
 8003576:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <vTaskStartScheduler+0xb8>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <vTaskStartScheduler+0xbc>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003584:	f000 fe64 	bl	8004250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003588:	e00e      	b.n	80035a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d10a      	bne.n	80035a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60fb      	str	r3, [r7, #12]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <vTaskStartScheduler+0x9e>
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08004ab8 	.word	0x08004ab8
 80035b4:	08003b79 	.word	0x08003b79
 80035b8:	20000410 	.word	0x20000410
 80035bc:	2000040c 	.word	0x2000040c
 80035c0:	200003f8 	.word	0x200003f8
 80035c4:	200003f0 	.word	0x200003f0

080035c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <vTaskSuspendAll+0x18>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <vTaskSuspendAll+0x18>)
 80035d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	20000414 	.word	0x20000414

080035e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035f2:	4b41      	ldr	r3, [pc, #260]	; (80036f8 <xTaskResumeAll+0x114>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <xTaskResumeAll+0x2c>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	603b      	str	r3, [r7, #0]
}
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003610:	f000 fec0 	bl	8004394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003614:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <xTaskResumeAll+0x114>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	4a37      	ldr	r2, [pc, #220]	; (80036f8 <xTaskResumeAll+0x114>)
 800361c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <xTaskResumeAll+0x114>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d161      	bne.n	80036ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003626:	4b35      	ldr	r3, [pc, #212]	; (80036fc <xTaskResumeAll+0x118>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d05d      	beq.n	80036ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800362e:	e02e      	b.n	800368e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <xTaskResumeAll+0x11c>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3318      	adds	r3, #24
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff f826 	bl	800268e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3304      	adds	r3, #4
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f821 	bl	800268e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <xTaskResumeAll+0x120>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <xTaskResumeAll+0x120>)
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4a27      	ldr	r2, [pc, #156]	; (8003708 <xTaskResumeAll+0x124>)
 800366c:	441a      	add	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3304      	adds	r3, #4
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f7fe ffad 	bl	80025d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <xTaskResumeAll+0x128>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	429a      	cmp	r2, r3
 8003686:	d302      	bcc.n	800368e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003688:	4b21      	ldr	r3, [pc, #132]	; (8003710 <xTaskResumeAll+0x12c>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800368e:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <xTaskResumeAll+0x11c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cc      	bne.n	8003630 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800369c:	f000 fb22 	bl	8003ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <xTaskResumeAll+0x130>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d010      	beq.n	80036ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036ac:	f000 f846 	bl	800373c <xTaskIncrementTick>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <xTaskResumeAll+0x12c>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f1      	bne.n	80036ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <xTaskResumeAll+0x130>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <xTaskResumeAll+0x12c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <xTaskResumeAll+0x134>)
 80036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036ea:	f000 fe83 	bl	80043f4 <vPortExitCritical>

	return xAlreadyYielded;
 80036ee:	68bb      	ldr	r3, [r7, #8]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000414 	.word	0x20000414
 80036fc:	200003ec 	.word	0x200003ec
 8003700:	200003ac 	.word	0x200003ac
 8003704:	200003f4 	.word	0x200003f4
 8003708:	200002f0 	.word	0x200002f0
 800370c:	200002ec 	.word	0x200002ec
 8003710:	20000400 	.word	0x20000400
 8003714:	200003fc 	.word	0x200003fc
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <xTaskGetTickCount+0x1c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003728:	687b      	ldr	r3, [r7, #4]
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	200003f0 	.word	0x200003f0

0800373c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003746:	4b4e      	ldr	r3, [pc, #312]	; (8003880 <xTaskIncrementTick+0x144>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 808e 	bne.w	800386c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <xTaskIncrementTick+0x148>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003758:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <xTaskIncrementTick+0x148>)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d120      	bne.n	80037a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003764:	4b48      	ldr	r3, [pc, #288]	; (8003888 <xTaskIncrementTick+0x14c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <xTaskIncrementTick+0x48>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	603b      	str	r3, [r7, #0]
}
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <xTaskIncrementTick+0x46>
 8003784:	4b40      	ldr	r3, [pc, #256]	; (8003888 <xTaskIncrementTick+0x14c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	4b40      	ldr	r3, [pc, #256]	; (800388c <xTaskIncrementTick+0x150>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3e      	ldr	r2, [pc, #248]	; (8003888 <xTaskIncrementTick+0x14c>)
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4a3e      	ldr	r2, [pc, #248]	; (800388c <xTaskIncrementTick+0x150>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <xTaskIncrementTick+0x154>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a3c      	ldr	r2, [pc, #240]	; (8003890 <xTaskIncrementTick+0x154>)
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	f000 fa9f 	bl	8003ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <xTaskIncrementTick+0x158>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d348      	bcc.n	8003842 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b0:	4b35      	ldr	r3, [pc, #212]	; (8003888 <xTaskIncrementTick+0x14c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <xTaskIncrementTick+0x158>)
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295
 80037c0:	601a      	str	r2, [r3, #0]
					break;
 80037c2:	e03e      	b.n	8003842 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c4:	4b30      	ldr	r3, [pc, #192]	; (8003888 <xTaskIncrementTick+0x14c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d203      	bcs.n	80037e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037dc:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <xTaskIncrementTick+0x158>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037e2:	e02e      	b.n	8003842 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe ff50 	bl	800268e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3318      	adds	r3, #24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe ff47 	bl	800268e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2201      	movs	r2, #1
 8003806:	409a      	lsls	r2, r3
 8003808:	4b23      	ldr	r3, [pc, #140]	; (8003898 <xTaskIncrementTick+0x15c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	4a22      	ldr	r2, [pc, #136]	; (8003898 <xTaskIncrementTick+0x15c>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4a1f      	ldr	r2, [pc, #124]	; (800389c <xTaskIncrementTick+0x160>)
 8003820:	441a      	add	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3304      	adds	r3, #4
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f7fe fed3 	bl	80025d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <xTaskIncrementTick+0x164>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	429a      	cmp	r2, r3
 800383a:	d3b9      	bcc.n	80037b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003840:	e7b6      	b.n	80037b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003842:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <xTaskIncrementTick+0x164>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	4914      	ldr	r1, [pc, #80]	; (800389c <xTaskIncrementTick+0x160>)
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d901      	bls.n	800385e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800385a:	2301      	movs	r3, #1
 800385c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <xTaskIncrementTick+0x168>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003866:	2301      	movs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e004      	b.n	8003876 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <xTaskIncrementTick+0x16c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <xTaskIncrementTick+0x16c>)
 8003874:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003876:	697b      	ldr	r3, [r7, #20]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20000414 	.word	0x20000414
 8003884:	200003f0 	.word	0x200003f0
 8003888:	200003a4 	.word	0x200003a4
 800388c:	200003a8 	.word	0x200003a8
 8003890:	20000404 	.word	0x20000404
 8003894:	2000040c 	.word	0x2000040c
 8003898:	200003f4 	.word	0x200003f4
 800389c:	200002f0 	.word	0x200002f0
 80038a0:	200002ec 	.word	0x200002ec
 80038a4:	20000400 	.word	0x20000400
 80038a8:	200003fc 	.word	0x200003fc

080038ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038b2:	4b27      	ldr	r3, [pc, #156]	; (8003950 <vTaskSwitchContext+0xa4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <vTaskSwitchContext+0xa8>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038c0:	e03f      	b.n	8003942 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <vTaskSwitchContext+0xa8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c8:	4b23      	ldr	r3, [pc, #140]	; (8003958 <vTaskSwitchContext+0xac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	f1c3 031f 	rsb	r3, r3, #31
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	491f      	ldr	r1, [pc, #124]	; (800395c <vTaskSwitchContext+0xb0>)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <vTaskSwitchContext+0x5c>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	607b      	str	r3, [r7, #4]
}
 8003904:	bf00      	nop
 8003906:	e7fe      	b.n	8003906 <vTaskSwitchContext+0x5a>
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <vTaskSwitchContext+0xb0>)
 8003914:	4413      	add	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	3308      	adds	r3, #8
 800392a:	429a      	cmp	r2, r3
 800392c:	d104      	bne.n	8003938 <vTaskSwitchContext+0x8c>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4a08      	ldr	r2, [pc, #32]	; (8003960 <vTaskSwitchContext+0xb4>)
 8003940:	6013      	str	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000414 	.word	0x20000414
 8003954:	20000400 	.word	0x20000400
 8003958:	200003f4 	.word	0x200003f4
 800395c:	200002f0 	.word	0x200002f0
 8003960:	200002ec 	.word	0x200002ec

08003964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	60fb      	str	r3, [r7, #12]
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800398a:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <vTaskPlaceOnEventList+0x44>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3318      	adds	r3, #24
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe fe42 	bl	800261c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003998:	2101      	movs	r1, #1
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	f000 fb64 	bl	8004068 <prvAddCurrentTaskToDelayedList>
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200002ec 	.word	0x200002ec

080039ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	60fb      	str	r3, [r7, #12]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3318      	adds	r3, #24
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fe56 	bl	800268e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <xTaskRemoveFromEventList+0xac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11c      	bne.n	8003a24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fe4d 	bl	800268e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <xTaskRemoveFromEventList+0xb0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <xTaskRemoveFromEventList+0xb0>)
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <xTaskRemoveFromEventList+0xb4>)
 8003a14:	441a      	add	r2, r3
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	f7fe fdd9 	bl	80025d4 <vListInsertEnd>
 8003a22:	e005      	b.n	8003a30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	3318      	adds	r3, #24
 8003a28:	4619      	mov	r1, r3
 8003a2a:	480e      	ldr	r0, [pc, #56]	; (8003a64 <xTaskRemoveFromEventList+0xb8>)
 8003a2c:	f7fe fdd2 	bl	80025d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <xTaskRemoveFromEventList+0xbc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d905      	bls.n	8003a4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <xTaskRemoveFromEventList+0xc0>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e001      	b.n	8003a4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a4e:	697b      	ldr	r3, [r7, #20]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000414 	.word	0x20000414
 8003a5c:	200003f4 	.word	0x200003f4
 8003a60:	200002f0 	.word	0x200002f0
 8003a64:	200003ac 	.word	0x200003ac
 8003a68:	200002ec 	.word	0x200002ec
 8003a6c:	20000400 	.word	0x20000400

08003a70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <vTaskInternalSetTimeOutState+0x24>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <vTaskInternalSetTimeOutState+0x28>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	605a      	str	r2, [r3, #4]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20000404 	.word	0x20000404
 8003a98:	200003f0 	.word	0x200003f0

08003a9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	613b      	str	r3, [r7, #16]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	60fb      	str	r3, [r7, #12]
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ade:	f000 fc59 	bl	8004394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <xTaskCheckForTimeOut+0xbc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d102      	bne.n	8003b02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e023      	b.n	8003b4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <xTaskCheckForTimeOut+0xc0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d007      	beq.n	8003b1e <xTaskCheckForTimeOut+0x82>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e015      	b.n	8003b4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d20b      	bcs.n	8003b40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	1ad2      	subs	r2, r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff9b 	bl	8003a70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e004      	b.n	8003b4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b46:	2301      	movs	r3, #1
 8003b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b4a:	f000 fc53 	bl	80043f4 <vPortExitCritical>

	return xReturn;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	200003f0 	.word	0x200003f0
 8003b5c:	20000404 	.word	0x20000404

08003b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <vTaskMissedYield+0x14>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	20000400 	.word	0x20000400

08003b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b80:	f000 f852 	bl	8003c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <prvIdleTask+0x28>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d9f9      	bls.n	8003b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <prvIdleTask+0x2c>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b9c:	e7f0      	b.n	8003b80 <prvIdleTask+0x8>
 8003b9e:	bf00      	nop
 8003ba0:	200002f0 	.word	0x200002f0
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e00c      	b.n	8003bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a12      	ldr	r2, [pc, #72]	; (8003c08 <prvInitialiseTaskLists+0x60>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe fcd9 	bl	800257a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d9ef      	bls.n	8003bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bd4:	480d      	ldr	r0, [pc, #52]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bd6:	f7fe fcd0 	bl	800257a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bda:	480d      	ldr	r0, [pc, #52]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bdc:	f7fe fccd 	bl	800257a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003be2:	f7fe fcca 	bl	800257a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003be6:	480c      	ldr	r0, [pc, #48]	; (8003c18 <prvInitialiseTaskLists+0x70>)
 8003be8:	f7fe fcc7 	bl	800257a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bec:	480b      	ldr	r0, [pc, #44]	; (8003c1c <prvInitialiseTaskLists+0x74>)
 8003bee:	f7fe fcc4 	bl	800257a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <prvInitialiseTaskLists+0x78>)
 8003bf4:	4a05      	ldr	r2, [pc, #20]	; (8003c0c <prvInitialiseTaskLists+0x64>)
 8003bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvInitialiseTaskLists+0x7c>)
 8003bfa:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bfc:	601a      	str	r2, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200002f0 	.word	0x200002f0
 8003c0c:	2000037c 	.word	0x2000037c
 8003c10:	20000390 	.word	0x20000390
 8003c14:	200003ac 	.word	0x200003ac
 8003c18:	200003c0 	.word	0x200003c0
 8003c1c:	200003d8 	.word	0x200003d8
 8003c20:	200003a4 	.word	0x200003a4
 8003c24:	200003a8 	.word	0x200003a8

08003c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c2e:	e019      	b.n	8003c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c30:	f000 fbb0 	bl	8004394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c34:	4b10      	ldr	r3, [pc, #64]	; (8003c78 <prvCheckTasksWaitingTermination+0x50>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fd24 	bl	800268e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <prvCheckTasksWaitingTermination+0x54>)
 8003c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c5a:	f000 fbcb 	bl	80043f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f810 	bl	8003c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvCheckTasksWaitingTermination+0x58>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e1      	bne.n	8003c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	200003c0 	.word	0x200003c0
 8003c7c:	200003ec 	.word	0x200003ec
 8003c80:	200003d4 	.word	0x200003d4

08003c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fd28 	bl	80046f0 <vPortFree>
				vPortFree( pxTCB );
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fd25 	bl	80046f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ca6:	e018      	b.n	8003cda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d103      	bne.n	8003cba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fd1c 	bl	80046f0 <vPortFree>
	}
 8003cb8:	e00f      	b.n	8003cda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d00a      	beq.n	8003cda <prvDeleteTCB+0x56>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60fb      	str	r3, [r7, #12]
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <prvDeleteTCB+0x54>
	}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <prvResetNextTaskUnblockTime+0x38>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <prvResetNextTaskUnblockTime+0x3c>)
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cfc:	e008      	b.n	8003d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cfe:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <prvResetNextTaskUnblockTime+0x38>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <prvResetNextTaskUnblockTime+0x3c>)
 8003d0e:	6013      	str	r3, [r2, #0]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	200003a4 	.word	0x200003a4
 8003d20:	2000040c 	.word	0x2000040c

08003d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <xTaskGetSchedulerState+0x34>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d32:	2301      	movs	r3, #1
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	e008      	b.n	8003d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <xTaskGetSchedulerState+0x38>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d40:	2302      	movs	r3, #2
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	e001      	b.n	8003d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d4a:	687b      	ldr	r3, [r7, #4]
	}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	200003f8 	.word	0x200003f8
 8003d5c:	20000414 	.word	0x20000414

08003d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d06e      	beq.n	8003e54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d76:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <xTaskPriorityDisinherit+0x100>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d00a      	beq.n	8003d96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60fb      	str	r3, [r7, #12]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	60bb      	str	r3, [r7, #8]
}
 8003db0:	bf00      	nop
 8003db2:	e7fe      	b.n	8003db2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	1e5a      	subs	r2, r3, #1
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d044      	beq.n	8003e54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d140      	bne.n	8003e54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fc59 	bl	800268e <uxListRemove>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d115      	bne.n	8003e0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de6:	491f      	ldr	r1, [pc, #124]	; (8003e64 <xTaskPriorityDisinherit+0x104>)
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <xTaskPriorityDisinherit+0xae>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <xTaskPriorityDisinherit+0x108>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <xTaskPriorityDisinherit+0x108>)
 8003e0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	f1c3 0207 	rsb	r2, r3, #7
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	2201      	movs	r2, #1
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <xTaskPriorityDisinherit+0x108>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <xTaskPriorityDisinherit+0x108>)
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4a08      	ldr	r2, [pc, #32]	; (8003e64 <xTaskPriorityDisinherit+0x104>)
 8003e42:	441a      	add	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f7fe fbc2 	bl	80025d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e54:	697b      	ldr	r3, [r7, #20]
	}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200002ec 	.word	0x200002ec
 8003e64:	200002f0 	.word	0x200002f0
 8003e68:	200003f4 	.word	0x200003f4

08003e6c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8003e76:	f000 fa8d 	bl	8004394 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8003e7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <ulTaskNotifyTake+0x88>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d113      	bne.n	8003eac <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <ulTaskNotifyTake+0x88>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e94:	2101      	movs	r1, #1
 8003e96:	6838      	ldr	r0, [r7, #0]
 8003e98:	f000 f8e6 	bl	8004068 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <ulTaskNotifyTake+0x8c>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003eac:	f000 faa2 	bl	80043f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003eb0:	f000 fa70 	bl	8004394 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <ulTaskNotifyTake+0x88>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <ulTaskNotifyTake+0x88>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ed0:	e004      	b.n	8003edc <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <ulTaskNotifyTake+0x88>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <ulTaskNotifyTake+0x88>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8003ee6:	f000 fa85 	bl	80043f4 <vPortExitCritical>

		return ulReturn;
 8003eea:	68fb      	ldr	r3, [r7, #12]
	}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200002ec 	.word	0x200002ec
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <xTaskGenericNotify+0x30>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61bb      	str	r3, [r7, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003f30:	f000 fa30 	bl	8004394 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f48:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d828      	bhi.n	8003faa <xTaskGenericNotify+0xae>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <xTaskGenericNotify+0x64>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003fcb 	.word	0x08003fcb
 8003f64:	08003f75 	.word	0x08003f75
 8003f68:	08003f83 	.word	0x08003f83
 8003f6c:	08003f8f 	.word	0x08003f8f
 8003f70:	08003f97 	.word	0x08003f97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003f80:	e026      	b.n	8003fd0 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003f8c:	e020      	b.n	8003fd0 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003f94:	e01c      	b.n	8003fd0 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003f96:	7ffb      	ldrb	r3, [r7, #31]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d003      	beq.n	8003fa4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003fa2:	e015      	b.n	8003fd0 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003fa8:	e012      	b.n	8003fd0 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb2:	d00c      	beq.n	8003fce <xTaskGenericNotify+0xd2>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	617b      	str	r3, [r7, #20]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTaskGenericNotify+0xcc>
					break;
 8003fca:	bf00      	nop
 8003fcc:	e000      	b.n	8003fd0 <xTaskGenericNotify+0xd4>

					break;
 8003fce:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003fd0:	7ffb      	ldrb	r3, [r7, #31]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d139      	bne.n	800404a <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fb57 	bl	800268e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <xTaskGenericNotify+0x15c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	4a1a      	ldr	r2, [pc, #104]	; (8004058 <xTaskGenericNotify+0x15c>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4a17      	ldr	r2, [pc, #92]	; (800405c <xTaskGenericNotify+0x160>)
 8004000:	441a      	add	r2, r3
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7fe fae3 	bl	80025d4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <xTaskGenericNotify+0x130>
	__asm volatile
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	613b      	str	r3, [r7, #16]
}
 8004028:	bf00      	nop
 800402a:	e7fe      	b.n	800402a <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <xTaskGenericNotify+0x164>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	429a      	cmp	r2, r3
 8004038:	d907      	bls.n	800404a <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <xTaskGenericNotify+0x168>)
 800403c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800404a:	f000 f9d3 	bl	80043f4 <vPortExitCritical>

		return xReturn;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	; 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200003f4 	.word	0x200003f4
 800405c:	200002f0 	.word	0x200002f0
 8004060:	200002ec 	.word	0x200002ec
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004072:	4b29      	ldr	r3, [pc, #164]	; (8004118 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004078:	4b28      	ldr	r3, [pc, #160]	; (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3304      	adds	r3, #4
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fb05 	bl	800268e <uxListRemove>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	2201      	movs	r2, #1
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43da      	mvns	r2, r3
 8004098:	4b21      	ldr	r3, [pc, #132]	; (8004120 <prvAddCurrentTaskToDelayedList+0xb8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4013      	ands	r3, r2
 800409e:	4a20      	ldr	r2, [pc, #128]	; (8004120 <prvAddCurrentTaskToDelayedList+0xb8>)
 80040a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d10a      	bne.n	80040c0 <prvAddCurrentTaskToDelayedList+0x58>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4619      	mov	r1, r3
 80040b8:	481a      	ldr	r0, [pc, #104]	; (8004124 <prvAddCurrentTaskToDelayedList+0xbc>)
 80040ba:	f7fe fa8b 	bl	80025d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040be:	e026      	b.n	800410e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d209      	bcs.n	80040ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <prvAddCurrentTaskToDelayedList+0xc0>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7fe fa99 	bl	800261c <vListInsert>
}
 80040ea:	e010      	b.n	800410e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <prvAddCurrentTaskToDelayedList+0xc4>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <prvAddCurrentTaskToDelayedList+0xb4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3304      	adds	r3, #4
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f7fe fa8f 	bl	800261c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	d202      	bcs.n	800410e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004108:	4a09      	ldr	r2, [pc, #36]	; (8004130 <prvAddCurrentTaskToDelayedList+0xc8>)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6013      	str	r3, [r2, #0]
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200003f0 	.word	0x200003f0
 800411c:	200002ec 	.word	0x200002ec
 8004120:	200003f4 	.word	0x200003f4
 8004124:	200003d8 	.word	0x200003d8
 8004128:	200003a8 	.word	0x200003a8
 800412c:	200003a4 	.word	0x200003a4
 8004130:	2000040c 	.word	0x2000040c

08004134 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b04      	subs	r3, #4
 8004144:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800414c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b04      	subs	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b04      	subs	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004164:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <pxPortInitialiseStack+0x64>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b14      	subs	r3, #20
 800416e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b04      	subs	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f06f 0202 	mvn.w	r2, #2
 8004182:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3b20      	subs	r3, #32
 8004188:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	0800419d 	.word	0x0800419d

0800419c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041a6:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <prvTaskExitError+0x54>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d00a      	beq.n	80041c6 <prvTaskExitError+0x2a>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60fb      	str	r3, [r7, #12]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <prvTaskExitError+0x28>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60bb      	str	r3, [r7, #8]
}
 80041d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80041da:	bf00      	nop
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0fc      	beq.n	80041dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80041e2:	bf00      	nop
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	2000000c 	.word	0x2000000c
	...

08004200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <pxCurrentTCBConst2>)
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	6808      	ldr	r0, [r1, #0]
 8004206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	f380 8809 	msr	PSP, r0
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	4770      	bx	lr
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst2>:
 8004220:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004228:	4808      	ldr	r0, [pc, #32]	; (800424c <prvPortStartFirstTask+0x24>)
 800422a:	6800      	ldr	r0, [r0, #0]
 800422c:	6800      	ldr	r0, [r0, #0]
 800422e:	f380 8808 	msr	MSP, r0
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8814 	msr	CONTROL, r0
 800423a:	b662      	cpsie	i
 800423c:	b661      	cpsie	f
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	df00      	svc	0
 8004248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800424a:	bf00      	nop
 800424c:	e000ed08 	.word	0xe000ed08

08004250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <xPortStartScheduler+0x120>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a46      	ldr	r2, [pc, #280]	; (8004374 <xPortStartScheduler+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d10a      	bne.n	8004276 <xPortStartScheduler+0x26>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	613b      	str	r3, [r7, #16]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004276:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <xPortStartScheduler+0x120>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3f      	ldr	r2, [pc, #252]	; (8004378 <xPortStartScheduler+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10a      	bne.n	8004296 <xPortStartScheduler+0x46>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <xPortStartScheduler+0x12c>)
 8004298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4b31      	ldr	r3, [pc, #196]	; (8004380 <xPortStartScheduler+0x130>)
 80042bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <xPortStartScheduler+0x134>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042c4:	e009      	b.n	80042da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80042c6:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <xPortStartScheduler+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	4a2d      	ldr	r2, [pc, #180]	; (8004384 <xPortStartScheduler+0x134>)
 80042ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d0ef      	beq.n	80042c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042e6:	4b27      	ldr	r3, [pc, #156]	; (8004384 <xPortStartScheduler+0x134>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1c3 0307 	rsb	r3, r3, #7
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d00a      	beq.n	8004308 <xPortStartScheduler+0xb8>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60bb      	str	r3, [r7, #8]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <xPortStartScheduler+0x134>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	4a1d      	ldr	r2, [pc, #116]	; (8004384 <xPortStartScheduler+0x134>)
 8004310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <xPortStartScheduler+0x134>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800431a:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <xPortStartScheduler+0x134>)
 800431c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <xPortStartScheduler+0x138>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a17      	ldr	r2, [pc, #92]	; (8004388 <xPortStartScheduler+0x138>)
 800432c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <xPortStartScheduler+0x138>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a14      	ldr	r2, [pc, #80]	; (8004388 <xPortStartScheduler+0x138>)
 8004338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800433c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800433e:	f000 f8dd 	bl	80044fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <xPortStartScheduler+0x13c>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004348:	f000 f8fc 	bl	8004544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <xPortStartScheduler+0x140>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0f      	ldr	r2, [pc, #60]	; (8004390 <xPortStartScheduler+0x140>)
 8004352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004358:	f7ff ff66 	bl	8004228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800435c:	f7ff faa6 	bl	80038ac <vTaskSwitchContext>
	prvTaskExitError();
 8004360:	f7ff ff1c 	bl	800419c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000ed00 	.word	0xe000ed00
 8004374:	410fc271 	.word	0x410fc271
 8004378:	410fc270 	.word	0x410fc270
 800437c:	e000e400 	.word	0xe000e400
 8004380:	20000418 	.word	0x20000418
 8004384:	2000041c 	.word	0x2000041c
 8004388:	e000ed20 	.word	0xe000ed20
 800438c:	2000000c 	.word	0x2000000c
 8004390:	e000ef34 	.word	0xe000ef34

08004394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	607b      	str	r3, [r7, #4]
}
 80043ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <vPortEnterCritical+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a0d      	ldr	r2, [pc, #52]	; (80043ec <vPortEnterCritical+0x58>)
 80043b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <vPortEnterCritical+0x58>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10f      	bne.n	80043e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <vPortEnterCritical+0x5c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vPortEnterCritical+0x4a>
	}
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	2000000c 	.word	0x2000000c
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <vPortExitCritical+0x50>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <vPortExitCritical+0x24>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <vPortExitCritical+0x50>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <vPortExitCritical+0x50>)
 8004420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <vPortExitCritical+0x42>
 800442a:	2300      	movs	r3, #0
 800442c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c
	...

08004450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004450:	f3ef 8009 	mrs	r0, PSP
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <pxCurrentTCBConst>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f01e 0f10 	tst.w	lr, #16
 8004460:	bf08      	it	eq
 8004462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	6010      	str	r0, [r2, #0]
 800446c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004474:	f380 8811 	msr	BASEPRI, r0
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f7ff fa14 	bl	80038ac <vTaskSwitchContext>
 8004484:	f04f 0000 	mov.w	r0, #0
 8004488:	f380 8811 	msr	BASEPRI, r0
 800448c:	bc09      	pop	{r0, r3}
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	6808      	ldr	r0, [r1, #0]
 8004492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004496:	f01e 0f10 	tst.w	lr, #16
 800449a:	bf08      	it	eq
 800449c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044a0:	f380 8809 	msr	PSP, r0
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w

080044b0 <pxCurrentTCBConst>:
 80044b0:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop

080044b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	607b      	str	r3, [r7, #4]
}
 80044d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044d2:	f7ff f933 	bl	800373c <xTaskIncrementTick>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <SysTick_Handler+0x40>)
 80044de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	2300      	movs	r3, #0
 80044e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	f383 8811 	msr	BASEPRI, r3
}
 80044ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <vPortSetupTimerInterrupt+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <vPortSetupTimerInterrupt+0x3c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <vPortSetupTimerInterrupt+0x40>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a09      	ldr	r2, [pc, #36]	; (8004540 <vPortSetupTimerInterrupt+0x44>)
 800451a:	3b01      	subs	r3, #1
 800451c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <vPortSetupTimerInterrupt+0x34>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010
 8004534:	e000e018 	.word	0xe000e018
 8004538:	20000000 	.word	0x20000000
 800453c:	10624dd3 	.word	0x10624dd3
 8004540:	e000e014 	.word	0xe000e014

08004544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004554 <vPortEnableVFP+0x10>
 8004548:	6801      	ldr	r1, [r0, #0]
 800454a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800454e:	6001      	str	r1, [r0, #0]
 8004550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004552:	bf00      	nop
 8004554:	e000ed88 	.word	0xe000ed88

08004558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004564:	f7ff f830 	bl	80035c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004568:	4b5b      	ldr	r3, [pc, #364]	; (80046d8 <pvPortMalloc+0x180>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004570:	f000 f920 	bl	80047b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004574:	4b59      	ldr	r3, [pc, #356]	; (80046dc <pvPortMalloc+0x184>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 8093 	bne.w	80046a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01d      	beq.n	80045c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004588:	2208      	movs	r2, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	2b00      	cmp	r3, #0
 8004598:	d014      	beq.n	80045c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f023 0307 	bic.w	r3, r3, #7
 80045a0:	3308      	adds	r3, #8
 80045a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <pvPortMalloc+0x6c>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	617b      	str	r3, [r7, #20]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06e      	beq.n	80046a8 <pvPortMalloc+0x150>
 80045ca:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <pvPortMalloc+0x188>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d869      	bhi.n	80046a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <pvPortMalloc+0x18c>)
 80045d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045d8:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <pvPortMalloc+0x18c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045de:	e004      	b.n	80045ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d903      	bls.n	80045fc <pvPortMalloc+0xa4>
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f1      	bne.n	80045e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <pvPortMalloc+0x180>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004602:	429a      	cmp	r2, r3
 8004604:	d050      	beq.n	80046a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2208      	movs	r2, #8
 800460c:	4413      	add	r3, r2
 800460e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	2308      	movs	r3, #8
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	429a      	cmp	r2, r3
 8004626:	d91f      	bls.n	8004668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <pvPortMalloc+0xf8>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	613b      	str	r3, [r7, #16]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad2      	subs	r2, r2, r3
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004662:	69b8      	ldr	r0, [r7, #24]
 8004664:	f000 f908 	bl	8004878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <pvPortMalloc+0x188>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <pvPortMalloc+0x188>)
 8004674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004676:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <pvPortMalloc+0x188>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <pvPortMalloc+0x190>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d203      	bcs.n	800468a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <pvPortMalloc+0x188>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <pvPortMalloc+0x190>)
 8004688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <pvPortMalloc+0x184>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	431a      	orrs	r2, r3
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <pvPortMalloc+0x194>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <pvPortMalloc+0x194>)
 80046a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046a8:	f7fe ff9c 	bl	80035e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <pvPortMalloc+0x174>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60fb      	str	r3, [r7, #12]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <pvPortMalloc+0x172>
	return pvReturn;
 80046cc:	69fb      	ldr	r3, [r7, #28]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3728      	adds	r7, #40	; 0x28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20004028 	.word	0x20004028
 80046dc:	2000403c 	.word	0x2000403c
 80046e0:	2000402c 	.word	0x2000402c
 80046e4:	20004020 	.word	0x20004020
 80046e8:	20004030 	.word	0x20004030
 80046ec:	20004034 	.word	0x20004034

080046f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d04d      	beq.n	800479e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004702:	2308      	movs	r3, #8
 8004704:	425b      	negs	r3, r3
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <vPortFree+0xb8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <vPortFree+0x44>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <vPortFree+0x62>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60bb      	str	r3, [r7, #8]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <vPortFree+0xb8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01e      	beq.n	800479e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11a      	bne.n	800479e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <vPortFree+0xb8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	43db      	mvns	r3, r3
 8004772:	401a      	ands	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004778:	f7fe ff26 	bl	80035c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <vPortFree+0xbc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4413      	add	r3, r2
 8004786:	4a09      	ldr	r2, [pc, #36]	; (80047ac <vPortFree+0xbc>)
 8004788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800478a:	6938      	ldr	r0, [r7, #16]
 800478c:	f000 f874 	bl	8004878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <vPortFree+0xc0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <vPortFree+0xc0>)
 8004798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800479a:	f7fe ff23 	bl	80035e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2000403c 	.word	0x2000403c
 80047ac:	2000402c 	.word	0x2000402c
 80047b0:	20004038 	.word	0x20004038

080047b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <prvHeapInit+0xac>)
 80047c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3307      	adds	r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <prvHeapInit+0xac>)
 80047e4:	4413      	add	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <prvHeapInit+0xb0>)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <prvHeapInit+0xb0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4413      	add	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004800:	2208      	movs	r2, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a15      	ldr	r2, [pc, #84]	; (8004868 <prvHeapInit+0xb4>)
 8004814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <prvHeapInit+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <prvHeapInit+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <prvHeapInit+0xb4>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <prvHeapInit+0xb8>)
 8004842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <prvHeapInit+0xbc>)
 800484a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <prvHeapInit+0xc0>)
 800484e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000420 	.word	0x20000420
 8004864:	20004020 	.word	0x20004020
 8004868:	20004028 	.word	0x20004028
 800486c:	20004030 	.word	0x20004030
 8004870:	2000402c 	.word	0x2000402c
 8004874:	2000403c 	.word	0x2000403c

08004878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004880:	4b28      	ldr	r3, [pc, #160]	; (8004924 <prvInsertBlockIntoFreeList+0xac>)
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e002      	b.n	800488c <prvInsertBlockIntoFreeList+0x14>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d8f7      	bhi.n	8004886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4413      	add	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d108      	bne.n	80048ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d118      	bne.n	8004900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d00d      	beq.n	80048f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e008      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e003      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d002      	beq.n	8004916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20004020 	.word	0x20004020
 8004928:	20004028 	.word	0x20004028

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 f82e 	bl	80049a0 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	08004ae0 	.word	0x08004ae0
 8004968:	08004ae0 	.word	0x08004ae0
 800496c:	08004ae0 	.word	0x08004ae0
 8004970:	08004ae4 	.word	0x08004ae4

08004974 <memcpy>:
 8004974:	440a      	add	r2, r1
 8004976:	4291      	cmp	r1, r2
 8004978:	f100 33ff 	add.w	r3, r0, #4294967295
 800497c:	d100      	bne.n	8004980 <memcpy+0xc>
 800497e:	4770      	bx	lr
 8004980:	b510      	push	{r4, lr}
 8004982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498a:	4291      	cmp	r1, r2
 800498c:	d1f9      	bne.n	8004982 <memcpy+0xe>
 800498e:	bd10      	pop	{r4, pc}

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <_init>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr

080049ac <_fini>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr
