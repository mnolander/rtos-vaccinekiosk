
VaccineKiosk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004204  08004204  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800420c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004028  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004038  20004038  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010163  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002985  00000000  00000000  000301a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00032b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00033a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bc8  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b01  00000000  00000000  00056488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0795  00000000  00000000  00066f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013771e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f44  00000000  00000000  00137770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040f0 	.word	0x080040f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080040f0 	.word	0x080040f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000044 	.word	0x20000044
 8000504:	20000098 	.word	0x20000098

08000508 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b0a8      	sub	sp, #160	; 0xa0
 800050c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of vaccineQueue */
  osMessageQDef(vaccineQueue, 1, uint16_t);
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <MX_FREERTOS_Init+0xe8>)
 8000510:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vaccineQueueHandle = osMessageCreate(osMessageQ(vaccineQueue), NULL);
 800051a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f001 fdda 	bl	80020da <osMessageCreate>
 8000526:	4603      	mov	r3, r0
 8000528:	4a32      	ldr	r2, [pc, #200]	; (80005f4 <MX_FREERTOS_Init+0xec>)
 800052a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <MX_FREERTOS_Init+0xf0>)
 800052e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000540:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fd67 	bl	800201a <osThreadCreate>
 800054c:	4603      	mov	r3, r0
 800054e:	4a2b      	ldr	r2, [pc, #172]	; (80005fc <MX_FREERTOS_Init+0xf4>)
 8000550:	6013      	str	r3, [r2, #0]

  /* definition and creation of injectTask */
  osThreadDef(injectTask, StartInjectTask, osPriorityBelowNormal, 0, 128);
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <MX_FREERTOS_Init+0xf8>)
 8000554:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  injectTaskHandle = osThreadCreate(osThread(injectTask), NULL);
 8000566:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fd54 	bl	800201a <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a23      	ldr	r2, [pc, #140]	; (8000604 <MX_FREERTOS_Init+0xfc>)
 8000576:	6013      	str	r3, [r2, #0]

  /* definition and creation of selectTask */
  osThreadDef(selectTask, StartSelectTask, osPriorityHigh, 0, 128);
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <MX_FREERTOS_Init+0x100>)
 800057a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  selectTaskHandle = osThreadCreate(osThread(selectTask), NULL);
 800058c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fd41 	bl	800201a <osThreadCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a1c      	ldr	r2, [pc, #112]	; (800060c <MX_FREERTOS_Init+0x104>)
 800059c:	6013      	str	r3, [r2, #0]

  /* definition and creation of paymentTask */
  osThreadDef(paymentTask, StartPaymentTask, osPriorityAboveNormal, 0, 128);
 800059e:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_FREERTOS_Init+0x108>)
 80005a0:	f107 0420 	add.w	r4, r7, #32
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  paymentTaskHandle = osThreadCreate(osThread(paymentTask), NULL);
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fd2e 	bl	800201a <osThreadCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <MX_FREERTOS_Init+0x10c>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of armTask */
  osThreadDef(armTask, StartArmTask, osPriorityNormal, 0, 128);
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_FREERTOS_Init+0x110>)
 80005c6:	1d3c      	adds	r4, r7, #4
 80005c8:	461d      	mov	r5, r3
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armTaskHandle = osThreadCreate(osThread(armTask), NULL);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fd1d 	bl	800201a <osThreadCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <MX_FREERTOS_Init+0x114>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005e6:	bf00      	nop
 80005e8:	37a0      	adds	r7, #160	; 0xa0
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bdb0      	pop	{r4, r5, r7, pc}
 80005ee:	bf00      	nop
 80005f0:	08004140 	.word	0x08004140
 80005f4:	20000040 	.word	0x20000040
 80005f8:	08004150 	.word	0x08004150
 80005fc:	2000002c 	.word	0x2000002c
 8000600:	0800416c 	.word	0x0800416c
 8000604:	20000030 	.word	0x20000030
 8000608:	08004188 	.word	0x08004188
 800060c:	20000034 	.word	0x20000034
 8000610:	080041a4 	.word	0x080041a4
 8000614:	20000038 	.word	0x20000038
 8000618:	080041c0 	.word	0x080041c0
 800061c:	2000003c 	.word	0x2000003c

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <StartDefaultTask+0x20>)
 8000630:	f000 fd96 	bl	8001160 <HAL_GPIO_WritePin>
    vTaskDelay(portMAX_DELAY);
 8000634:	f04f 30ff 	mov.w	r0, #4294967295
 8000638:	f002 fbe8 	bl	8002e0c <vTaskDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800063c:	e7f4      	b.n	8000628 <StartDefaultTask+0x8>
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00

08000644 <StartInjectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInjectTask */
void StartInjectTask(void const * argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInjectTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f001 fd30 	bl	80020b2 <osDelay>
 8000652:	e7fb      	b.n	800064c <StartInjectTask+0x8>

08000654 <StartSelectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSelectTask */
void StartSelectTask(void const * argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSelectTask */
  /* Infinite loop */
	uint16_t selectedVaccine = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	81bb      	strh	r3, [r7, #12]
  for(;;)
  {
    GPIO_PinState SelectPushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2); // Read user input (select button)
 8000660:	2104      	movs	r1, #4
 8000662:	483d      	ldr	r0, [pc, #244]	; (8000758 <StartSelectTask+0x104>)
 8000664:	f000 fd64 	bl	8001130 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	73fb      	strb	r3, [r7, #15]
    GPIO_PinState ChoosePushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); // Read user input (choose button)
 800066c:	2110      	movs	r1, #16
 800066e:	483a      	ldr	r0, [pc, #232]	; (8000758 <StartSelectTask+0x104>)
 8000670:	f000 fd5e 	bl	8001130 <HAL_GPIO_ReadPin>
 8000674:	4603      	mov	r3, r0
 8000676:	73bb      	strb	r3, [r7, #14]
    if(SelectPushButton == GPIO_PIN_RESET){ // If button is reversed then update GPIO_InitStruct.Pull = GPIO_PULLUP; in gpio.c
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d146      	bne.n	800070c <StartSelectTask+0xb8>
    	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15) == GPIO_PIN_SET){ //If blue vaccine was last activated, switch to green
 800067e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000682:	4836      	ldr	r0, [pc, #216]	; (800075c <StartSelectTask+0x108>)
 8000684:	f000 fd54 	bl	8001130 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d10e      	bne.n	80006ac <StartSelectTask+0x58>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000694:	4831      	ldr	r0, [pc, #196]	; (800075c <StartSelectTask+0x108>)
 8000696:	f000 fd63 	bl	8001160 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	482e      	ldr	r0, [pc, #184]	; (800075c <StartSelectTask+0x108>)
 80006a2:	f000 fd5d 	bl	8001160 <HAL_GPIO_WritePin>
    		selectedVaccine = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	81bb      	strh	r3, [r7, #12]
 80006aa:	e02c      	b.n	8000706 <StartSelectTask+0xb2>
    	}
    	else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET){ //If green vaccine was last activated, switch to orange
 80006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b0:	482a      	ldr	r0, [pc, #168]	; (800075c <StartSelectTask+0x108>)
 80006b2:	f000 fd3d 	bl	8001130 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10e      	bne.n	80006da <StartSelectTask+0x86>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c2:	4826      	ldr	r0, [pc, #152]	; (800075c <StartSelectTask+0x108>)
 80006c4:	f000 fd4c 	bl	8001160 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ce:	4823      	ldr	r0, [pc, #140]	; (800075c <StartSelectTask+0x108>)
 80006d0:	f000 fd46 	bl	8001160 <HAL_GPIO_WritePin>
    		selectedVaccine = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	81bb      	strh	r3, [r7, #12]
 80006d8:	e015      	b.n	8000706 <StartSelectTask+0xb2>
    	}
    	else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13) == GPIO_PIN_SET){ //If orange vaccine was last activated, switch to blue
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	481f      	ldr	r0, [pc, #124]	; (800075c <StartSelectTask+0x108>)
 80006e0:	f000 fd26 	bl	8001130 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d10d      	bne.n	8000706 <StartSelectTask+0xb2>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	481a      	ldr	r0, [pc, #104]	; (800075c <StartSelectTask+0x108>)
 80006f2:	f000 fd35 	bl	8001160 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006fc:	4817      	ldr	r0, [pc, #92]	; (800075c <StartSelectTask+0x108>)
 80006fe:	f000 fd2f 	bl	8001160 <HAL_GPIO_WritePin>
    		selectedVaccine = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	81bb      	strh	r3, [r7, #12]
    	}
    	vTaskDelay(250); //Delay so options don't switch too fast
 8000706:	20fa      	movs	r0, #250	; 0xfa
 8000708:	f002 fb80 	bl	8002e0c <vTaskDelay>
    }
    if(ChoosePushButton == GPIO_PIN_RESET){
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1a6      	bne.n	8000660 <StartSelectTask+0xc>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <StartSelectTask+0x108>)
 800071a:	f000 fd21 	bl	8001160 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <StartSelectTask+0x108>)
 8000726:	f000 fd1b 	bl	8001160 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <StartSelectTask+0x108>)
 8000732:	f000 fd15 	bl	8001160 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073c:	4807      	ldr	r0, [pc, #28]	; (800075c <StartSelectTask+0x108>)
 800073e:	f000 fd0f 	bl	8001160 <HAL_GPIO_WritePin>
    	xQueueSendToFront(vaccineQueueHandle, &selectedVaccine, 10000); //Put selected vaccine into queue
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <StartSelectTask+0x10c>)
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	f107 010c 	add.w	r1, r7, #12
 800074a:	2301      	movs	r3, #1
 800074c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000750:	f001 feda 	bl	8002508 <xQueueGenericSend>
  {
 8000754:	e784      	b.n	8000660 <StartSelectTask+0xc>
 8000756:	bf00      	nop
 8000758:	40020000 	.word	0x40020000
 800075c:	40020c00 	.word	0x40020c00
 8000760:	20000040 	.word	0x20000040

08000764 <StartPaymentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPaymentTask */
void StartPaymentTask(void const * argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPaymentTask */
  uint16_t recValue, paymentConfirm;
  for(;;)
  {
	xQueueReceive(vaccineQueueHandle, &recValue, 0);
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <StartPaymentTask+0x50>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f107 010c 	add.w	r1, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 ffc4 	bl	8002704 <xQueueReceive>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); //Flash green LED
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <StartPaymentTask+0x54>)
 8000784:	f000 fcec 	bl	8001160 <HAL_GPIO_WritePin>
    vTaskDelay(500);
 8000788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078c:	f002 fb3e 	bl	8002e0c <vTaskDelay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <StartPaymentTask+0x54>)
 8000798:	f000 fce2 	bl	8001160 <HAL_GPIO_WritePin>
    vTaskDelay(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a0:	f002 fb34 	bl	8002e0c <vTaskDelay>

    GPIO_PinState PaymentPushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5); // Read user input (payment button)
 80007a4:	2120      	movs	r1, #32
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <StartPaymentTask+0x58>)
 80007a8:	f000 fcc2 	bl	8001130 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]
  {
 80007b0:	e7dc      	b.n	800076c <StartPaymentTask+0x8>
 80007b2:	bf00      	nop
 80007b4:	20000040 	.word	0x20000040
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020000 	.word	0x40020000

080007c0 <StartArmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArmTask */
void StartArmTask(void const * argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArmTask */
  /* Infinite loop */
	uint16_t recValue;
  for(;;)
  {
    osDelay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f001 fc72 	bl	80020b2 <osDelay>
    //ArmButton needs to be activated for 5 seconds, then go to injection task
    //If user activates button but deactivates within countdown, then enter fail-safe state
    //Red LED

    xQueueReceive(vaccineQueueHandle, &recValue, pdMS_TO_TICKS(10000));
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <StartArmTask+0x24>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f107 010e 	add.w	r1, r7, #14
 80007d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 ff92 	bl	8002704 <xQueueReceive>
    osDelay(1);
 80007e0:	e7f2      	b.n	80007c8 <StartArmTask+0x8>
 80007e2:	bf00      	nop
 80007e4:	20000040 	.word	0x20000040

080007e8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <MX_GPIO_Init+0xc0>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_GPIO_Init+0xc0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2102      	movs	r1, #2
 800083a:	481c      	ldr	r0, [pc, #112]	; (80008ac <MX_GPIO_Init+0xc4>)
 800083c:	f000 fc90 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000846:	481a      	ldr	r0, [pc, #104]	; (80008b0 <MX_GPIO_Init+0xc8>)
 8000848:	f000 fc8a 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 800084c:	2335      	movs	r3, #53	; 0x35
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_GPIO_Init+0xc4>)
 8000860:	f000 faca 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000864:	2302      	movs	r3, #2
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4619      	mov	r1, r3
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_GPIO_Init+0xc4>)
 800087c:	f000 fabc 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000880:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_GPIO_Init+0xc8>)
 800089a:	f000 faad 	bl	8000df8 <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020c00 	.word	0x40020c00

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 f97a 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f808 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f7ff ff92 	bl	80007e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80008c4:	f7ff fe20 	bl	8000508 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008c8:	f001 fba0 	bl	800200c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x18>
	...

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fbfe 	bl	80040e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <SystemClock_Config+0xb4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a21      	ldr	r2, [pc, #132]	; (8000984 <SystemClock_Config+0xb4>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <SystemClock_Config+0xb4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <SystemClock_Config+0xb8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <SystemClock_Config+0xb8>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <SystemClock_Config+0xb8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000934:	2310      	movs	r3, #16
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fc27 	bl	8001194 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800094c:	f000 f830 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fe8a 	bl	8001684 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000976:	f000 f81b 	bl	80009b0 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099e:	f000 f929 	bl	8000bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40010000 	.word	0x40010000

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <HAL_MspInit+0x54>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_MspInit+0x54>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 f9cf 	bl	8000da4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <HAL_InitTick+0xd0>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	4a2d      	ldr	r2, [pc, #180]	; (8000ae4 <HAL_InitTick+0xd0>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6453      	str	r3, [r2, #68]	; 0x44
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <HAL_InitTick+0xd0>)
 8000a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 ffe6 	bl	8001a1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a50:	f000 ffd0 	bl	80019f4 <HAL_RCC_GetPCLK2Freq>
 8000a54:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a58:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <HAL_InitTick+0xd4>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	0c9b      	lsrs	r3, r3, #18
 8000a60:	3b01      	subs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a64:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_InitTick+0xd8>)
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <HAL_InitTick+0xdc>)
 8000a68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <HAL_InitTick+0xd8>)
 8000a6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_InitTick+0xd8>)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_InitTick+0xd8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <HAL_InitTick+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_InitTick+0xd8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a8a:	4818      	ldr	r0, [pc, #96]	; (8000aec <HAL_InitTick+0xd8>)
 8000a8c:	f000 fff8 	bl	8001a80 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d11b      	bne.n	8000ad6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a9e:	4813      	ldr	r0, [pc, #76]	; (8000aec <HAL_InitTick+0xd8>)
 8000aa0:	f001 f848 	bl	8001b34 <HAL_TIM_Base_Start_IT>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d111      	bne.n	8000ad6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 f992 	bl	8000ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d808      	bhi.n	8000ad0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	2019      	movs	r0, #25
 8000ac4:	f000 f96e 	bl	8000da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_InitTick+0xe0>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e002      	b.n	8000ad6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	20000298 	.word	0x20000298
 8000af0:	40010000 	.word	0x40010000
 8000af4:	20000004 	.word	0x20000004

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b2a:	f001 f873 	bl	8001c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000298 	.word	0x20000298

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd7 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f003 fa77 	bl	800407c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fe91 	bl	80008b4 <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba0:	0800420c 	.word	0x0800420c
  ldr r2, =_sbss
 8000ba4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ba8:	20004038 	.word	0x20004038

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_Init+0x40>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_Init+0x40>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x40>)
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f8d8 	bl	8000d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f7ff ff18 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff feea 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	200002e0 	.word	0x200002e0

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200002e0 	.word	0x200002e0

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff4c 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db6:	f7ff ff61 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff ffb1 	bl	8000d28 <NVIC_EncodePriority>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff80 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff54 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e16b      	b.n	80010ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 815a 	bne.w	80010e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d005      	beq.n	8000e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d130      	bne.n	8000eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	f003 0201 	and.w	r2, r3, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d017      	beq.n	8000ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d123      	bne.n	8000f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	69b9      	ldr	r1, [r7, #24]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0203 	and.w	r2, r3, #3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80b4 	beq.w	80010e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b60      	ldr	r3, [pc, #384]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a5f      	ldr	r2, [pc, #380]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9a:	4a5b      	ldr	r2, [pc, #364]	; (8001108 <HAL_GPIO_Init+0x310>)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a52      	ldr	r2, [pc, #328]	; (800110c <HAL_GPIO_Init+0x314>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d02b      	beq.n	800101e <HAL_GPIO_Init+0x226>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a51      	ldr	r2, [pc, #324]	; (8001110 <HAL_GPIO_Init+0x318>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d025      	beq.n	800101a <HAL_GPIO_Init+0x222>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a50      	ldr	r2, [pc, #320]	; (8001114 <HAL_GPIO_Init+0x31c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01f      	beq.n	8001016 <HAL_GPIO_Init+0x21e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <HAL_GPIO_Init+0x320>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0x21a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_GPIO_Init+0x324>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0x216>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <HAL_GPIO_Init+0x328>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00d      	beq.n	800100a <HAL_GPIO_Init+0x212>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_GPIO_Init+0x32c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_GPIO_Init+0x20e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4b      	ldr	r2, [pc, #300]	; (8001128 <HAL_GPIO_Init+0x330>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_GPIO_Init+0x20a>
 8000ffe:	2307      	movs	r3, #7
 8001000:	e00e      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001002:	2308      	movs	r3, #8
 8001004:	e00c      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001006:	2306      	movs	r3, #6
 8001008:	e00a      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800100e:	2304      	movs	r3, #4
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x228>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x228>
 800101e:	2300      	movs	r3, #0
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001030:	4935      	ldr	r1, [pc, #212]	; (8001108 <HAL_GPIO_Init+0x310>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_GPIO_Init+0x334>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001062:	4a32      	ldr	r2, [pc, #200]	; (800112c <HAL_GPIO_Init+0x334>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_GPIO_Init+0x334>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_GPIO_Init+0x334>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_GPIO_Init+0x334>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b6:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_GPIO_Init+0x334>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_GPIO_Init+0x334>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e0:	4a12      	ldr	r2, [pc, #72]	; (800112c <HAL_GPIO_Init+0x334>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3301      	adds	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	f67f ae90 	bls.w	8000e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40013800 	.word	0x40013800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40021400 	.word	0x40021400
 8001124:	40021800 	.word	0x40021800
 8001128:	40021c00 	.word	0x40021c00
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e267      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d075      	beq.n	800129e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b2:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d00c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011be:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d112      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ca:	4b82      	ldr	r3, [pc, #520]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011d6:	d10b      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d05b      	beq.n	800129c <HAL_RCC_OscConfig+0x108>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d157      	bne.n	800129c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e242      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x74>
 80011fa:	4b76      	ldr	r3, [pc, #472]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a75      	ldr	r2, [pc, #468]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x98>
 8001212:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6f      	ldr	r2, [pc, #444]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6d      	ldr	r3, [pc, #436]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6c      	ldr	r2, [pc, #432]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 800122c:	4b69      	ldr	r3, [pc, #420]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a68      	ldr	r2, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b66      	ldr	r3, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fce6 	bl	8000c1c <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fce2 	bl	8000c1c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e207      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xc0>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fcd2 	bl	8000c1c <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fcce 	bl	8000c1c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	; 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1f3      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0xe8>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012aa:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c2:	4b44      	ldr	r3, [pc, #272]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ce:	4b41      	ldr	r3, [pc, #260]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1c7      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4937      	ldr	r1, [pc, #220]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fc87 	bl	8000c1c <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001312:	f7ff fc83 	bl	8000c1c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1a8      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4925      	ldr	r1, [pc, #148]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc66 	bl	8000c1c <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fc62 	bl	8000c1c <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e187      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d036      	beq.n	80013ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d016      	beq.n	80013b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_RCC_OscConfig+0x248>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fc46 	bl	8000c1c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fc42 	bl	8000c1c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e167      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x200>
 80013b2:	e01b      	b.n	80013ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_RCC_OscConfig+0x248>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fc2f 	bl	8000c1c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	e00e      	b.n	80013e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc2b 	bl	8000c1c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d907      	bls.n	80013e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e150      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e0:	4b88      	ldr	r3, [pc, #544]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ea      	bne.n	80013c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8097 	beq.w	8001528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10f      	bne.n	800142a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a7c      	ldr	r2, [pc, #496]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142a:	4b77      	ldr	r3, [pc, #476]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d118      	bne.n	8001468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b74      	ldr	r3, [pc, #464]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a73      	ldr	r2, [pc, #460]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff fbeb 	bl	8000c1c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144a:	f7ff fbe7 	bl	8000c1c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e10c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <HAL_RCC_OscConfig+0x474>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x2ea>
 8001470:	4b64      	ldr	r3, [pc, #400]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a63      	ldr	r2, [pc, #396]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b05      	cmp	r3, #5
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x30c>
 8001486:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a5e      	ldr	r2, [pc, #376]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
 8001492:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a5b      	ldr	r2, [pc, #364]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 80014a0:	4b58      	ldr	r3, [pc, #352]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	4a57      	ldr	r2, [pc, #348]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6713      	str	r3, [r2, #112]	; 0x70
 80014ac:	4b55      	ldr	r3, [pc, #340]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a54      	ldr	r2, [pc, #336]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 0304 	bic.w	r3, r3, #4
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d015      	beq.n	80014ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c0:	f7ff fbac 	bl	8000c1c <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fba8 	bl	8000c1c <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0cb      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0ee      	beq.n	80014c8 <HAL_RCC_OscConfig+0x334>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fb96 	bl	8000c1c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff fb92 	bl	8000c1c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0b5      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150a:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ee      	bne.n	80014f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a38      	ldr	r2, [pc, #224]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a1 	beq.w	8001674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001532:	4b34      	ldr	r3, [pc, #208]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b08      	cmp	r3, #8
 800153c:	d05c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d141      	bne.n	80015ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_RCC_OscConfig+0x478>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fb66 	bl	8000c1c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fb62 	bl	8000c1c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e087      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	3b01      	subs	r3, #1
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	491b      	ldr	r1, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_OscConfig+0x478>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb3b 	bl	8000c1c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fb37 	bl	8000c1c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e05c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x416>
 80015c8:	e054      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_RCC_OscConfig+0x478>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb24 	bl	8000c1c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff fb20 	bl	8000c1c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e045      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x444>
 80015f6:	e03d      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e038      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
 800160c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_RCC_OscConfig+0x4ec>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d028      	beq.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d121      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	429a      	cmp	r2, r3
 8001638:	d11a      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001640:	4013      	ands	r3, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	3b01      	subs	r3, #1
 800165a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0cc      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d90c      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b59      	ldr	r3, [pc, #356]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a52      	ldr	r2, [pc, #328]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	494d      	ldr	r1, [pc, #308]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d044      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b47      	ldr	r3, [pc, #284]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d003      	beq.n	8001742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800173e:	2b03      	cmp	r3, #3
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001742:	4b3f      	ldr	r3, [pc, #252]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001752:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e067      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b37      	ldr	r3, [pc, #220]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4934      	ldr	r1, [pc, #208]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001774:	f7ff fa52 	bl	8000c1c <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff fa4e 	bl	8000c1c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e04f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d20c      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e032      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4916      	ldr	r1, [pc, #88]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	490e      	ldr	r1, [pc, #56]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800180a:	f000 f821 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 800180e:	4602      	mov	r2, r0
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	490a      	ldr	r1, [pc, #40]	; (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	5ccb      	ldrb	r3, [r1, r3]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f8f2 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00
 8001840:	40023800 	.word	0x40023800
 8001844:	080041e4 	.word	0x080041e4
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001854:	b090      	sub	sp, #64	; 0x40
 8001856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	; 0x34
 800185c:	2300      	movs	r3, #0
 800185e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001868:	4b59      	ldr	r3, [pc, #356]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d00d      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x40>
 8001874:	2b08      	cmp	r3, #8
 8001876:	f200 80a1 	bhi.w	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x34>
 800187e:	2b04      	cmp	r3, #4
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x3a>
 8001882:	e09b      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b53      	ldr	r3, [pc, #332]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001888:	e09b      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800188e:	e098      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001890:	4b4f      	ldr	r3, [pc, #316]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	2200      	movs	r2, #0
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	627a      	str	r2, [r7, #36]	; 0x24
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018b8:	2100      	movs	r1, #0
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018bc:	fb03 f201 	mul.w	r2, r3, r1
 80018c0:	2300      	movs	r3, #0
 80018c2:	fb00 f303 	mul.w	r3, r0, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ca:	fba0 1202 	umull	r1, r2, r0, r2
 80018ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018d0:	460a      	mov	r2, r1
 80018d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	4413      	add	r3, r2
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018dc:	2200      	movs	r2, #0
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	61fa      	str	r2, [r7, #28]
 80018e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ea:	f7fe fc71 	bl	80001d0 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4613      	mov	r3, r2
 80018f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f6:	e053      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f8:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	099b      	lsrs	r3, r3, #6
 80018fe:	2200      	movs	r2, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	617a      	str	r2, [r7, #20]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800190a:	f04f 0b00 	mov.w	fp, #0
 800190e:	4652      	mov	r2, sl
 8001910:	465b      	mov	r3, fp
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	ebb2 080a 	subs.w	r8, r2, sl
 800192a:	eb63 090b 	sbc.w	r9, r3, fp
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800193a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800193e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001942:	ebb2 0408 	subs.w	r4, r2, r8
 8001946:	eb63 0509 	sbc.w	r5, r3, r9
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	00eb      	lsls	r3, r5, #3
 8001954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001958:	00e2      	lsls	r2, r4, #3
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	eb14 030a 	adds.w	r3, r4, sl
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	eb45 030b 	adc.w	r3, r5, fp
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001976:	4629      	mov	r1, r5
 8001978:	028b      	lsls	r3, r1, #10
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001980:	4621      	mov	r1, r4
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198a:	2200      	movs	r2, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	60fa      	str	r2, [r7, #12]
 8001990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001994:	f7fe fc1c 	bl	80001d0 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4613      	mov	r3, r2
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	3301      	adds	r3, #1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3740      	adds	r7, #64	; 0x40
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	017d7840 	.word	0x017d7840

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019f8:	f7ff fff0 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	0b5b      	lsrs	r3, r3, #13
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	; (8001a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40023800 	.word	0x40023800
 8001a18:	080041f4 	.word	0x080041f4

08001a1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	220f      	movs	r2, #15
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	08db      	lsrs	r3, r3, #3
 8001a56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_RCC_GetClockConfig+0x60>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0207 	and.w	r2, r3, #7
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e041      	b.n	8001b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f839 	bl	8001b1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 f9d8 	bl	8001e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d001      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04e      	b.n	8001bea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d022      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b76:	d01d      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <HAL_TIM_Base_Start_IT+0xc8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d018      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1c      	ldr	r2, [pc, #112]	; (8001c04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00e      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x80>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d111      	bne.n	8001bd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d010      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd6:	e007      	b.n	8001be8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	40014000 	.word	0x40014000
 8001c10:	40001800 	.word	0x40001800

08001c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0202 	mvn.w	r2, #2
 8001c40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8ee 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8e0 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8f1 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0204 	mvn.w	r2, #4
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8c4 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f8b6 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8c7 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0208 	mvn.w	r2, #8
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2204      	movs	r2, #4
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f89a 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f88c 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f89d 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0210 	mvn.w	r2, #16
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2208      	movs	r2, #8
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f870 	bl	8001e38 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f862 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f873 	bl	8001e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0201 	mvn.w	r2, #1
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fdfa 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d10e      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f902 	bl	8001fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	d10e      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ddc:	2b40      	cmp	r3, #64	; 0x40
 8001dde:	d107      	bne.n	8001df0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f838 	bl	8001e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d10e      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d107      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0220 	mvn.w	r2, #32
 8001e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8cc 	bl	8001fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a40      	ldr	r2, [pc, #256]	; (8001f88 <TIM_Base_SetConfig+0x114>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d00f      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <TIM_Base_SetConfig+0x118>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3c      	ldr	r2, [pc, #240]	; (8001f90 <TIM_Base_SetConfig+0x11c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3b      	ldr	r2, [pc, #236]	; (8001f94 <TIM_Base_SetConfig+0x120>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <TIM_Base_SetConfig+0x40>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <TIM_Base_SetConfig+0x124>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d108      	bne.n	8001ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <TIM_Base_SetConfig+0x114>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d02b      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed4:	d027      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <TIM_Base_SetConfig+0x118>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d023      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <TIM_Base_SetConfig+0x11c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <TIM_Base_SetConfig+0x120>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01b      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <TIM_Base_SetConfig+0x124>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d017      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <TIM_Base_SetConfig+0x128>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <TIM_Base_SetConfig+0x12c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00f      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <TIM_Base_SetConfig+0x130>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00b      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <TIM_Base_SetConfig+0x134>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <TIM_Base_SetConfig+0x138>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <TIM_Base_SetConfig+0x13c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <TIM_Base_SetConfig+0x114>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d003      	beq.n	8001f6c <TIM_Base_SetConfig+0xf8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <TIM_Base_SetConfig+0x124>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d103      	bne.n	8001f74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	615a      	str	r2, [r3, #20]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40010400 	.word	0x40010400
 8001f9c:	40014000 	.word	0x40014000
 8001fa0:	40014400 	.word	0x40014400
 8001fa4:	40014800 	.word	0x40014800
 8001fa8:	40001800 	.word	0x40001800
 8001fac:	40001c00 	.word	0x40001c00
 8001fb0:	40002000 	.word	0x40002000

08001fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fee:	2b84      	cmp	r3, #132	; 0x84
 8001ff0:	d005      	beq.n	8001ffe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002010:	f000 ff30 	bl	8002e74 <vTaskStartScheduler>
  
  return osOK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}

0800201a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800201a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201c:	b089      	sub	sp, #36	; 0x24
 800201e:	af04      	add	r7, sp, #16
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <osThreadCreate+0x54>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685c      	ldr	r4, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681d      	ldr	r5, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691e      	ldr	r6, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffc8 	bl	8001fdc <makeFreeRtosPriority>
 800204c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002056:	9202      	str	r2, [sp, #8]
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	9100      	str	r1, [sp, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4632      	mov	r2, r6
 8002060:	4629      	mov	r1, r5
 8002062:	4620      	mov	r0, r4
 8002064:	f000 fd3e 	bl	8002ae4 <xTaskCreateStatic>
 8002068:	4603      	mov	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e01c      	b.n	80020a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685c      	ldr	r4, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800207a:	b29e      	uxth	r6, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ffaa 	bl	8001fdc <makeFreeRtosPriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	9200      	str	r2, [sp, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4632      	mov	r2, r6
 8002096:	4629      	mov	r1, r5
 8002098:	4620      	mov	r0, r4
 800209a:	f000 fd80 	bl	8002b9e <xTaskCreate>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80020a8:	68fb      	ldr	r3, [r7, #12]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <osDelay+0x16>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	e000      	b.n	80020ca <osDelay+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fe9e 	bl	8002e0c <vTaskDelay>
  
  return osOK;
 80020d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80020da:	b590      	push	{r4, r7, lr}
 80020dc:	b085      	sub	sp, #20
 80020de:	af02      	add	r7, sp, #8
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d011      	beq.n	8002110 <osMessageCreate+0x36>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2400      	movs	r4, #0
 8002106:	9400      	str	r4, [sp, #0]
 8002108:	f000 f92c 	bl	8002364 <xQueueGenericCreateStatic>
 800210c:	4603      	mov	r3, r0
 800210e:	e008      	b.n	8002122 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	4619      	mov	r1, r3
 800211c:	f000 f99a 	bl	8002454 <xQueueGenericCreate>
 8002120:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}

0800212a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f103 0208 	add.w	r2, r3, #8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f103 0208 	add.w	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f103 0208 	add.w	r2, r3, #8
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d103      	bne.n	80021ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e00c      	b.n	8002206 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3308      	adds	r3, #8
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e002      	b.n	80021fa <vListInsert+0x2e>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	429a      	cmp	r2, r3
 8002204:	d2f6      	bcs.n	80021f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6892      	ldr	r2, [r2, #8]
 8002254:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6852      	ldr	r2, [r2, #4]
 800225e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d103      	bne.n	8002272 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022be:	f001 fc11 	bl	8003ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	68f9      	ldr	r1, [r7, #12]
 80022cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	441a      	add	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	3b01      	subs	r3, #1
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	441a      	add	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	22ff      	movs	r2, #255	; 0xff
 8002302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	22ff      	movs	r2, #255	; 0xff
 800230a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d114      	bne.n	800233e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01a      	beq.n	8002352 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3310      	adds	r3, #16
 8002320:	4618      	mov	r0, r3
 8002322:	f000 ffe9 	bl	80032f8 <xTaskRemoveFromEventList>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d012      	beq.n	8002352 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <xQueueGenericReset+0xcc>)
 800232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	e009      	b.n	8002352 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3310      	adds	r3, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fef1 	bl	800212a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3324      	adds	r3, #36	; 0x24
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff feec 	bl	800212a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002352:	f001 fbf7 	bl	8003b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	e000ed04 	.word	0xe000ed04

08002364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800238a:	bf00      	nop
 800238c:	e7fe      	b.n	800238c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <xQueueGenericCreateStatic+0x52>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <xQueueGenericCreateStatic+0x56>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <xQueueGenericCreateStatic+0x58>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	623b      	str	r3, [r7, #32]
}
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <xQueueGenericCreateStatic+0x7e>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <xQueueGenericCreateStatic+0x82>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <xQueueGenericCreateStatic+0x84>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	61fb      	str	r3, [r7, #28]
}
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002402:	2348      	movs	r3, #72	; 0x48
 8002404:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b48      	cmp	r3, #72	; 0x48
 800240a:	d00a      	beq.n	8002422 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	61bb      	str	r3, [r7, #24]
}
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002422:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00d      	beq.n	800244a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f83f 	bl	80024c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800244c:	4618      	mov	r0, r3
 800244e:	3730      	adds	r7, #48	; 0x30
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	613b      	str	r3, [r7, #16]
}
 800247a:	bf00      	nop
 800247c:	e7fe      	b.n	800247c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	3348      	adds	r3, #72	; 0x48
 800248c:	4618      	mov	r0, r3
 800248e:	f001 fc0b 	bl	8003ca8 <pvPortMalloc>
 8002492:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d011      	beq.n	80024be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3348      	adds	r3, #72	; 0x48
 80024a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024ac:	79fa      	ldrb	r2, [r7, #7]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4613      	mov	r3, r2
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f805 	bl	80024c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024be:	69bb      	ldr	r3, [r7, #24]
	}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e002      	b.n	80024ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024f6:	2101      	movs	r1, #1
 80024f8:	69b8      	ldr	r0, [r7, #24]
 80024fa:	f7ff fecb 	bl	8002294 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xQueueGenericSend+0x32>
	__asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d103      	bne.n	8002548 <xQueueGenericSend+0x40>
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <xQueueGenericSend+0x44>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <xQueueGenericSend+0x46>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <xQueueGenericSend+0x60>
	__asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d103      	bne.n	8002576 <xQueueGenericSend+0x6e>
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <xQueueGenericSend+0x72>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <xQueueGenericSend+0x74>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <xQueueGenericSend+0x8e>
	__asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	623b      	str	r3, [r7, #32]
}
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002596:	f001 f86b 	bl	8003670 <xTaskGetSchedulerState>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <xQueueGenericSend+0x9e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <xQueueGenericSend+0xa2>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <xQueueGenericSend+0xa4>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61fb      	str	r3, [r7, #28]
}
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025c6:	f001 fa8d 	bl	8003ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d302      	bcc.n	80025dc <xQueueGenericSend+0xd4>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d129      	bne.n	8002630 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e2:	f000 f96f 	bl	80028c4 <prvCopyDataToQueue>
 80025e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d010      	beq.n	8002612 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	3324      	adds	r3, #36	; 0x24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fe7f 	bl	80032f8 <xTaskRemoveFromEventList>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002600:	4b3f      	ldr	r3, [pc, #252]	; (8002700 <xQueueGenericSend+0x1f8>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	e00a      	b.n	8002628 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <xQueueGenericSend+0x1f8>)
 800261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002628:	f001 fa8c 	bl	8003b44 <vPortExitCritical>
				return pdPASS;
 800262c:	2301      	movs	r3, #1
 800262e:	e063      	b.n	80026f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002636:	f001 fa85 	bl	8003b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800263a:	2300      	movs	r3, #0
 800263c:	e05c      	b.n	80026f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	2b00      	cmp	r3, #0
 8002642:	d106      	bne.n	8002652 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4618      	mov	r0, r3
 800264a:	f000 feb7 	bl	80033bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800264e:	2301      	movs	r3, #1
 8002650:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002652:	f001 fa77 	bl	8003b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002656:	f000 fc6d 	bl	8002f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800265a:	f001 fa43 	bl	8003ae4 <vPortEnterCritical>
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002664:	b25b      	sxtb	r3, r3
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d103      	bne.n	8002674 <xQueueGenericSend+0x16c>
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800267a:	b25b      	sxtb	r3, r3
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d103      	bne.n	800268a <xQueueGenericSend+0x182>
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800268a:	f001 fa5b 	bl	8003b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800268e:	1d3a      	adds	r2, r7, #4
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fea6 	bl	80033e8 <xTaskCheckForTimeOut>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d124      	bne.n	80026ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a4:	f000 fa06 	bl	8002ab4 <prvIsQueueFull>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d018      	beq.n	80026e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	3310      	adds	r3, #16
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fdfa 	bl	80032b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026be:	f000 f991 	bl	80029e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026c2:	f000 fc45 	bl	8002f50 <xTaskResumeAll>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f47f af7c 	bne.w	80025c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <xQueueGenericSend+0x1f8>)
 80026d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	e772      	b.n	80025c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026e2:	f000 f97f 	bl	80029e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026e6:	f000 fc33 	bl	8002f50 <xTaskResumeAll>
 80026ea:	e76c      	b.n	80025c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ee:	f000 f979 	bl	80029e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026f2:	f000 fc2d 	bl	8002f50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3738      	adds	r7, #56	; 0x38
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08c      	sub	sp, #48	; 0x30
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002710:	2300      	movs	r3, #0
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <xQueueReceive+0x30>
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	623b      	str	r3, [r7, #32]
}
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <xQueueReceive+0x3e>
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <xQueueReceive+0x42>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <xQueueReceive+0x44>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <xQueueReceive+0x5e>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	61fb      	str	r3, [r7, #28]
}
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002762:	f000 ff85 	bl	8003670 <xTaskGetSchedulerState>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d102      	bne.n	8002772 <xQueueReceive+0x6e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <xQueueReceive+0x72>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <xQueueReceive+0x74>
 8002776:	2300      	movs	r3, #0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10a      	bne.n	8002792 <xQueueReceive+0x8e>
	__asm volatile
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	61bb      	str	r3, [r7, #24]
}
 800278e:	bf00      	nop
 8002790:	e7fe      	b.n	8002790 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002792:	f001 f9a7 	bl	8003ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01f      	beq.n	80027e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a6:	f000 f8f7 	bl	8002998 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00f      	beq.n	80027da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	3310      	adds	r3, #16
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fd9a 	bl	80032f8 <xTaskRemoveFromEventList>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <xQueueReceive+0x1bc>)
 80027cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027da:	f001 f9b3 	bl	8003b44 <vPortExitCritical>
				return pdPASS;
 80027de:	2301      	movs	r3, #1
 80027e0:	e069      	b.n	80028b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027e8:	f001 f9ac 	bl	8003b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e062      	b.n	80028b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027f6:	f107 0310 	add.w	r3, r7, #16
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fdde 	bl	80033bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002804:	f001 f99e 	bl	8003b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002808:	f000 fb94 	bl	8002f34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800280c:	f001 f96a 	bl	8003ae4 <vPortEnterCritical>
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002816:	b25b      	sxtb	r3, r3
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d103      	bne.n	8002826 <xQueueReceive+0x122>
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800282c:	b25b      	sxtb	r3, r3
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d103      	bne.n	800283c <xQueueReceive+0x138>
 8002834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800283c:	f001 f982 	bl	8003b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002840:	1d3a      	adds	r2, r7, #4
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fdcd 	bl	80033e8 <xTaskCheckForTimeOut>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d123      	bne.n	800289c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002856:	f000 f917 	bl	8002a88 <prvIsQueueEmpty>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d017      	beq.n	8002890 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	3324      	adds	r3, #36	; 0x24
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fd21 	bl	80032b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800286e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002870:	f000 f8b8 	bl	80029e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002874:	f000 fb6c 	bl	8002f50 <xTaskResumeAll>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d189      	bne.n	8002792 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <xQueueReceive+0x1bc>)
 8002880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	e780      	b.n	8002792 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002892:	f000 f8a7 	bl	80029e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002896:	f000 fb5b 	bl	8002f50 <xTaskResumeAll>
 800289a:	e77a      	b.n	8002792 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800289c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289e:	f000 f8a1 	bl	80029e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028a2:	f000 fb55 	bl	8002f50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a8:	f000 f8ee 	bl	8002a88 <prvIsQueueEmpty>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f43f af6f 	beq.w	8002792 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80028b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3730      	adds	r7, #48	; 0x30
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000ed04 	.word	0xe000ed04

080028c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10d      	bne.n	80028fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d14d      	bne.n	8002986 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fedc 	bl	80036ac <xTaskPriorityDisinherit>
 80028f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	e043      	b.n	8002986 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d119      	bne.n	8002938 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6858      	ldr	r0, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	461a      	mov	r2, r3
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	f001 fbd8 	bl	80040c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	441a      	add	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	d32b      	bcc.n	8002986 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	e026      	b.n	8002986 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68d8      	ldr	r0, [r3, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	461a      	mov	r2, r3
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	f001 fbbe 	bl	80040c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	425b      	negs	r3, r3
 8002952:	441a      	add	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d207      	bcs.n	8002974 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	425b      	negs	r3, r3
 800296e:	441a      	add	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d105      	bne.n	8002986 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	3b01      	subs	r3, #1
 8002984:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800298e:	697b      	ldr	r3, [r7, #20]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d018      	beq.n	80029dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	441a      	add	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d303      	bcc.n	80029cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68d9      	ldr	r1, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	461a      	mov	r2, r3
 80029d6:	6838      	ldr	r0, [r7, #0]
 80029d8:	f001 fb74 	bl	80040c4 <memcpy>
	}
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029ec:	f001 f87a 	bl	8003ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029f8:	e011      	b.n	8002a1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d012      	beq.n	8002a28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3324      	adds	r3, #36	; 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fc76 	bl	80032f8 <xTaskRemoveFromEventList>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a12:	f000 fd4b 	bl	80034ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	dce9      	bgt.n	80029fa <prvUnlockQueue+0x16>
 8002a26:	e000      	b.n	8002a2a <prvUnlockQueue+0x46>
					break;
 8002a28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	22ff      	movs	r2, #255	; 0xff
 8002a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a32:	f001 f887 	bl	8003b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a36:	f001 f855 	bl	8003ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a42:	e011      	b.n	8002a68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3310      	adds	r3, #16
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fc51 	bl	80032f8 <xTaskRemoveFromEventList>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a5c:	f000 fd26 	bl	80034ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	dce9      	bgt.n	8002a44 <prvUnlockQueue+0x60>
 8002a70:	e000      	b.n	8002a74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a7c:	f001 f862 	bl	8003b44 <vPortExitCritical>
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a90:	f001 f828 	bl	8003ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d102      	bne.n	8002aa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e001      	b.n	8002aa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aa6:	f001 f84d 	bl	8003b44 <vPortExitCritical>

	return xReturn;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002abc:	f001 f812 	bl	8003ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d102      	bne.n	8002ad2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e001      	b.n	8002ad6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ad6:	f001 f835 	bl	8003b44 <vPortExitCritical>

	return xReturn;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08e      	sub	sp, #56	; 0x38
 8002ae8:	af04      	add	r7, sp, #16
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	623b      	str	r3, [r7, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	e7fe      	b.n	8002b0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xTaskCreateStatic+0x46>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61fb      	str	r3, [r7, #28]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b2a:	2354      	movs	r3, #84	; 0x54
 8002b2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b54      	cmp	r3, #84	; 0x54
 8002b32:	d00a      	beq.n	8002b4a <xTaskCreateStatic+0x66>
	__asm volatile
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	61bb      	str	r3, [r7, #24]
}
 8002b46:	bf00      	nop
 8002b48:	e7fe      	b.n	8002b48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01e      	beq.n	8002b90 <xTaskCreateStatic+0xac>
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01b      	beq.n	8002b90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9303      	str	r3, [sp, #12]
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	9302      	str	r3, [sp, #8]
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f850 	bl	8002c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b8a:	f000 f8d5 	bl	8002d38 <prvAddNewTaskToReadyList>
 8002b8e:	e001      	b.n	8002b94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b94:	697b      	ldr	r3, [r7, #20]
	}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3728      	adds	r7, #40	; 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b08c      	sub	sp, #48	; 0x30
 8002ba2:	af04      	add	r7, sp, #16
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 f878 	bl	8003ca8 <pvPortMalloc>
 8002bb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bc0:	2054      	movs	r0, #84	; 0x54
 8002bc2:	f001 f871 	bl	8003ca8 <pvPortMalloc>
 8002bc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd4:	e005      	b.n	8002be2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f001 f932 	bl	8003e40 <vPortFree>
 8002bdc:	e001      	b.n	8002be2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d017      	beq.n	8002c18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9303      	str	r3, [sp, #12]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	9302      	str	r3, [sp, #8]
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f80e 	bl	8002c28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c0c:	69f8      	ldr	r0, [r7, #28]
 8002c0e:	f000 f893 	bl	8002d38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e002      	b.n	8002c1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c40:	3b01      	subs	r3, #1
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f023 0307 	bic.w	r3, r3, #7
 8002c4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	617b      	str	r3, [r7, #20]
}
 8002c6c:	bf00      	nop
 8002c6e:	e7fe      	b.n	8002c6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01f      	beq.n	8002cb6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e012      	b.n	8002ca2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	7819      	ldrb	r1, [r3, #0]
 8002c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3334      	adds	r3, #52	; 0x34
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d9e9      	bls.n	8002c7c <prvInitialiseNewTask+0x54>
 8002ca8:	e000      	b.n	8002cac <prvInitialiseNewTask+0x84>
			{
				break;
 8002caa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb4:	e003      	b.n	8002cbe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d901      	bls.n	8002cc8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cc4:	2306      	movs	r3, #6
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	3304      	adds	r3, #4
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fa43 	bl	800216a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	3318      	adds	r3, #24
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fa3e 	bl	800216a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	f1c3 0207 	rsb	r2, r3, #7
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	2200      	movs	r2, #0
 8002d08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	68f9      	ldr	r1, [r7, #12]
 8002d16:	69b8      	ldr	r0, [r7, #24]
 8002d18:	f000 fdb4 	bl	8003884 <pxPortInitialiseStack>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d40:	f000 fed0 	bl	8003ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <prvAddNewTaskToReadyList+0xb8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <prvAddNewTaskToReadyList+0xb8>)
 8002d4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d4e:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <prvAddNewTaskToReadyList+0xbc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d56:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <prvAddNewTaskToReadyList+0xbc>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <prvAddNewTaskToReadyList+0xb8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d110      	bne.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d64:	f000 fbc6 	bl	80034f4 <prvInitialiseTaskLists>
 8002d68:	e00d      	b.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <prvAddNewTaskToReadyList+0xc0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <prvAddNewTaskToReadyList+0xbc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d802      	bhi.n	8002d86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d80:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <prvAddNewTaskToReadyList+0xbc>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <prvAddNewTaskToReadyList+0xc4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <prvAddNewTaskToReadyList+0xc4>)
 8002d8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	2201      	movs	r2, #1
 8002d96:	409a      	lsls	r2, r3
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <prvAddNewTaskToReadyList+0xc8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <prvAddNewTaskToReadyList+0xc8>)
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <prvAddNewTaskToReadyList+0xcc>)
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7ff f9e3 	bl	8002184 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002dbe:	f000 fec1 	bl	8003b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <prvAddNewTaskToReadyList+0xc0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <prvAddNewTaskToReadyList+0xbc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <prvAddNewTaskToReadyList+0xd0>)
 8002dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200003e4 	.word	0x200003e4
 8002df4:	200002e4 	.word	0x200002e4
 8002df8:	200003f0 	.word	0x200003f0
 8002dfc:	20000400 	.word	0x20000400
 8002e00:	200003ec 	.word	0x200003ec
 8002e04:	200002e8 	.word	0x200002e8
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <vTaskDelay+0x60>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <vTaskDelay+0x30>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	60bb      	str	r3, [r7, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	e7fe      	b.n	8002e3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e3c:	f000 f87a 	bl	8002f34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e40:	2100      	movs	r1, #0
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fcb8 	bl	80037b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e48:	f000 f882 	bl	8002f50 <xTaskResumeAll>
 8002e4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <vTaskDelay+0x64>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	2000040c 	.word	0x2000040c
 8002e70:	e000ed04 	.word	0xe000ed04

08002e74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e82:	463a      	mov	r2, r7
 8002e84:	1d39      	adds	r1, r7, #4
 8002e86:	f107 0308 	add.w	r3, r7, #8
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb22 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	9202      	str	r2, [sp, #8]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	491e      	ldr	r1, [pc, #120]	; (8002f1c <vTaskStartScheduler+0xa8>)
 8002ea4:	481e      	ldr	r0, [pc, #120]	; (8002f20 <vTaskStartScheduler+0xac>)
 8002ea6:	f7ff fe1d 	bl	8002ae4 <xTaskCreateStatic>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <vTaskStartScheduler+0xb0>)
 8002eae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <vTaskStartScheduler+0xb0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e001      	b.n	8002ec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d116      	bne.n	8002ef6 <vTaskStartScheduler+0x82>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	613b      	str	r3, [r7, #16]
}
 8002eda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <vTaskStartScheduler+0xb4>)
 8002ede:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <vTaskStartScheduler+0xb8>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <vTaskStartScheduler+0xbc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ef0:	f000 fd56 	bl	80039a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ef4:	e00e      	b.n	8002f14 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d10a      	bne.n	8002f14 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	60fb      	str	r3, [r7, #12]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <vTaskStartScheduler+0x9e>
}
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	080041dc 	.word	0x080041dc
 8002f20:	080034c5 	.word	0x080034c5
 8002f24:	20000408 	.word	0x20000408
 8002f28:	20000404 	.word	0x20000404
 8002f2c:	200003f0 	.word	0x200003f0
 8002f30:	200003e8 	.word	0x200003e8

08002f34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <vTaskSuspendAll+0x18>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <vTaskSuspendAll+0x18>)
 8002f40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	2000040c 	.word	0x2000040c

08002f50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <xTaskResumeAll+0x114>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <xTaskResumeAll+0x2c>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	603b      	str	r3, [r7, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	e7fe      	b.n	8002f7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f7c:	f000 fdb2 	bl	8003ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f80:	4b38      	ldr	r3, [pc, #224]	; (8003064 <xTaskResumeAll+0x114>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	4a37      	ldr	r2, [pc, #220]	; (8003064 <xTaskResumeAll+0x114>)
 8002f88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <xTaskResumeAll+0x114>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d161      	bne.n	8003056 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <xTaskResumeAll+0x118>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d05d      	beq.n	8003056 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f9a:	e02e      	b.n	8002ffa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9c:	4b33      	ldr	r3, [pc, #204]	; (800306c <xTaskResumeAll+0x11c>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f948 	bl	800223e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f943 	bl	800223e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <xTaskResumeAll+0x120>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	4a2a      	ldr	r2, [pc, #168]	; (8003070 <xTaskResumeAll+0x120>)
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4a27      	ldr	r2, [pc, #156]	; (8003074 <xTaskResumeAll+0x124>)
 8002fd8:	441a      	add	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f7ff f8cf 	bl	8002184 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <xTaskResumeAll+0x128>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <xTaskResumeAll+0x12c>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <xTaskResumeAll+0x11c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1cc      	bne.n	8002f9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003008:	f000 fb12 	bl	8003630 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <xTaskResumeAll+0x130>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003018:	f000 f836 	bl	8003088 <xTaskIncrementTick>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003022:	4b16      	ldr	r3, [pc, #88]	; (800307c <xTaskResumeAll+0x12c>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f1      	bne.n	8003018 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <xTaskResumeAll+0x130>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <xTaskResumeAll+0x12c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d009      	beq.n	8003056 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003042:	2301      	movs	r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <xTaskResumeAll+0x134>)
 8003048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003056:	f000 fd75 	bl	8003b44 <vPortExitCritical>

	return xAlreadyYielded;
 800305a:	68bb      	ldr	r3, [r7, #8]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	2000040c 	.word	0x2000040c
 8003068:	200003e4 	.word	0x200003e4
 800306c:	200003a4 	.word	0x200003a4
 8003070:	200003ec 	.word	0x200003ec
 8003074:	200002e8 	.word	0x200002e8
 8003078:	200002e4 	.word	0x200002e4
 800307c:	200003f8 	.word	0x200003f8
 8003080:	200003f4 	.word	0x200003f4
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <xTaskIncrementTick+0x144>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 808e 	bne.w	80031b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800309c:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <xTaskIncrementTick+0x148>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030a4:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <xTaskIncrementTick+0x148>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d120      	bne.n	80030f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80030b0:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	603b      	str	r3, [r7, #0]
}
 80030cc:	bf00      	nop
 80030ce:	e7fe      	b.n	80030ce <xTaskIncrementTick+0x46>
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <xTaskIncrementTick+0x150>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3e      	ldr	r2, [pc, #248]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4a3e      	ldr	r2, [pc, #248]	; (80031d8 <xTaskIncrementTick+0x150>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <xTaskIncrementTick+0x154>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a3c      	ldr	r2, [pc, #240]	; (80031dc <xTaskIncrementTick+0x154>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	f000 fa9f 	bl	8003630 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030f2:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <xTaskIncrementTick+0x158>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d348      	bcc.n	800318e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <xTaskIncrementTick+0x14c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003106:	4b36      	ldr	r3, [pc, #216]	; (80031e0 <xTaskIncrementTick+0x158>)
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	601a      	str	r2, [r3, #0]
					break;
 800310e:	e03e      	b.n	800318e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003110:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <xTaskIncrementTick+0x14c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d203      	bcs.n	8003130 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003128:	4a2d      	ldr	r2, [pc, #180]	; (80031e0 <xTaskIncrementTick+0x158>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800312e:	e02e      	b.n	800318e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	3304      	adds	r3, #4
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f882 	bl	800223e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3318      	adds	r3, #24
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f879 	bl	800223e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <xTaskIncrementTick+0x15c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <xTaskIncrementTick+0x15c>)
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <xTaskIncrementTick+0x160>)
 800316c:	441a      	add	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3304      	adds	r3, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f7ff f805 	bl	8002184 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <xTaskIncrementTick+0x164>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	429a      	cmp	r2, r3
 8003186:	d3b9      	bcc.n	80030fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003188:	2301      	movs	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800318c:	e7b6      	b.n	80030fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <xTaskIncrementTick+0x164>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003194:	4914      	ldr	r1, [pc, #80]	; (80031e8 <xTaskIncrementTick+0x160>)
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d901      	bls.n	80031aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <xTaskIncrementTick+0x168>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80031b2:	2301      	movs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e004      	b.n	80031c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <xTaskIncrementTick+0x16c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <xTaskIncrementTick+0x16c>)
 80031c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80031c2:	697b      	ldr	r3, [r7, #20]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	2000040c 	.word	0x2000040c
 80031d0:	200003e8 	.word	0x200003e8
 80031d4:	2000039c 	.word	0x2000039c
 80031d8:	200003a0 	.word	0x200003a0
 80031dc:	200003fc 	.word	0x200003fc
 80031e0:	20000404 	.word	0x20000404
 80031e4:	200003ec 	.word	0x200003ec
 80031e8:	200002e8 	.word	0x200002e8
 80031ec:	200002e4 	.word	0x200002e4
 80031f0:	200003f8 	.word	0x200003f8
 80031f4:	200003f4 	.word	0x200003f4

080031f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <vTaskSwitchContext+0xa4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003206:	4b26      	ldr	r3, [pc, #152]	; (80032a0 <vTaskSwitchContext+0xa8>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800320c:	e03f      	b.n	800328e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <vTaskSwitchContext+0xa8>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <vTaskSwitchContext+0xac>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f1c3 031f 	rsb	r3, r3, #31
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	491f      	ldr	r1, [pc, #124]	; (80032a8 <vTaskSwitchContext+0xb0>)
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <vTaskSwitchContext+0x5c>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	607b      	str	r3, [r7, #4]
}
 8003250:	bf00      	nop
 8003252:	e7fe      	b.n	8003252 <vTaskSwitchContext+0x5a>
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <vTaskSwitchContext+0xb0>)
 8003260:	4413      	add	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	3308      	adds	r3, #8
 8003276:	429a      	cmp	r2, r3
 8003278:	d104      	bne.n	8003284 <vTaskSwitchContext+0x8c>
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <vTaskSwitchContext+0xb4>)
 800328c:	6013      	str	r3, [r2, #0]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000040c 	.word	0x2000040c
 80032a0:	200003f8 	.word	0x200003f8
 80032a4:	200003ec 	.word	0x200003ec
 80032a8:	200002e8 	.word	0x200002e8
 80032ac:	200002e4 	.word	0x200002e4

080032b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	60fb      	str	r3, [r7, #12]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <vTaskPlaceOnEventList+0x44>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3318      	adds	r3, #24
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe ff74 	bl	80021cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032e4:	2101      	movs	r1, #1
 80032e6:	6838      	ldr	r0, [r7, #0]
 80032e8:	f000 fa66 	bl	80037b8 <prvAddCurrentTaskToDelayedList>
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200002e4 	.word	0x200002e4

080032f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	60fb      	str	r3, [r7, #12]
}
 8003320:	bf00      	nop
 8003322:	e7fe      	b.n	8003322 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	3318      	adds	r3, #24
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe ff88 	bl	800223e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800332e:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <xTaskRemoveFromEventList+0xac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d11c      	bne.n	8003370 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3304      	adds	r3, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff7f 	bl	800223e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2201      	movs	r2, #1
 8003346:	409a      	lsls	r2, r3
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <xTaskRemoveFromEventList+0xb0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4313      	orrs	r3, r2
 800334e:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <xTaskRemoveFromEventList+0xb0>)
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4a13      	ldr	r2, [pc, #76]	; (80033ac <xTaskRemoveFromEventList+0xb4>)
 8003360:	441a      	add	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f7fe ff0b 	bl	8002184 <vListInsertEnd>
 800336e:	e005      	b.n	800337c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3318      	adds	r3, #24
 8003374:	4619      	mov	r1, r3
 8003376:	480e      	ldr	r0, [pc, #56]	; (80033b0 <xTaskRemoveFromEventList+0xb8>)
 8003378:	f7fe ff04 	bl	8002184 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <xTaskRemoveFromEventList+0xbc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	429a      	cmp	r2, r3
 8003388:	d905      	bls.n	8003396 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800338a:	2301      	movs	r3, #1
 800338c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <xTaskRemoveFromEventList+0xc0>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e001      	b.n	800339a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800339a:	697b      	ldr	r3, [r7, #20]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000040c 	.word	0x2000040c
 80033a8:	200003ec 	.word	0x200003ec
 80033ac:	200002e8 	.word	0x200002e8
 80033b0:	200003a4 	.word	0x200003a4
 80033b4:	200002e4 	.word	0x200002e4
 80033b8:	200003f8 	.word	0x200003f8

080033bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <vTaskInternalSetTimeOutState+0x24>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <vTaskInternalSetTimeOutState+0x28>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	200003fc 	.word	0x200003fc
 80033e4:	200003e8 	.word	0x200003e8

080033e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	613b      	str	r3, [r7, #16]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	60fb      	str	r3, [r7, #12]
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800342a:	f000 fb5b 	bl	8003ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <xTaskCheckForTimeOut+0xbc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d102      	bne.n	800344e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e023      	b.n	8003496 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <xTaskCheckForTimeOut+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d007      	beq.n	800346a <xTaskCheckForTimeOut+0x82>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	429a      	cmp	r2, r3
 8003462:	d302      	bcc.n	800346a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003464:	2301      	movs	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	e015      	b.n	8003496 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	d20b      	bcs.n	800348c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff9b 	bl	80033bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e004      	b.n	8003496 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003496:	f000 fb55 	bl	8003b44 <vPortExitCritical>

	return xReturn;
 800349a:	69fb      	ldr	r3, [r7, #28]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200003e8 	.word	0x200003e8
 80034a8:	200003fc 	.word	0x200003fc

080034ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <vTaskMissedYield+0x14>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	200003f8 	.word	0x200003f8

080034c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034cc:	f000 f852 	bl	8003574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <prvIdleTask+0x28>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d9f9      	bls.n	80034cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <prvIdleTask+0x2c>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034e8:	e7f0      	b.n	80034cc <prvIdleTask+0x8>
 80034ea:	bf00      	nop
 80034ec:	200002e8 	.word	0x200002e8
 80034f0:	e000ed04 	.word	0xe000ed04

080034f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	e00c      	b.n	800351a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <prvInitialiseTaskLists+0x60>)
 800350c:	4413      	add	r3, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fe0b 	bl	800212a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d9ef      	bls.n	8003500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003520:	480d      	ldr	r0, [pc, #52]	; (8003558 <prvInitialiseTaskLists+0x64>)
 8003522:	f7fe fe02 	bl	800212a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003526:	480d      	ldr	r0, [pc, #52]	; (800355c <prvInitialiseTaskLists+0x68>)
 8003528:	f7fe fdff 	bl	800212a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800352c:	480c      	ldr	r0, [pc, #48]	; (8003560 <prvInitialiseTaskLists+0x6c>)
 800352e:	f7fe fdfc 	bl	800212a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003532:	480c      	ldr	r0, [pc, #48]	; (8003564 <prvInitialiseTaskLists+0x70>)
 8003534:	f7fe fdf9 	bl	800212a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <prvInitialiseTaskLists+0x74>)
 800353a:	f7fe fdf6 	bl	800212a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <prvInitialiseTaskLists+0x78>)
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <prvInitialiseTaskLists+0x64>)
 8003542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <prvInitialiseTaskLists+0x7c>)
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <prvInitialiseTaskLists+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200002e8 	.word	0x200002e8
 8003558:	20000374 	.word	0x20000374
 800355c:	20000388 	.word	0x20000388
 8003560:	200003a4 	.word	0x200003a4
 8003564:	200003b8 	.word	0x200003b8
 8003568:	200003d0 	.word	0x200003d0
 800356c:	2000039c 	.word	0x2000039c
 8003570:	200003a0 	.word	0x200003a0

08003574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800357a:	e019      	b.n	80035b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800357c:	f000 fab2 	bl	8003ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <prvCheckTasksWaitingTermination+0x50>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fe56 	bl	800223e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <prvCheckTasksWaitingTermination+0x54>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <prvCheckTasksWaitingTermination+0x54>)
 800359a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 80035a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035a6:	f000 facd 	bl	8003b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f810 	bl	80035d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e1      	bne.n	800357c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200003b8 	.word	0x200003b8
 80035c8:	200003e4 	.word	0x200003e4
 80035cc:	200003cc 	.word	0x200003cc

080035d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d108      	bne.n	80035f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fc2a 	bl	8003e40 <vPortFree>
				vPortFree( pxTCB );
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fc27 	bl	8003e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035f2:	e018      	b.n	8003626 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d103      	bne.n	8003606 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fc1e 	bl	8003e40 <vPortFree>
	}
 8003604:	e00f      	b.n	8003626 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360c:	2b02      	cmp	r3, #2
 800360e:	d00a      	beq.n	8003626 <prvDeleteTCB+0x56>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60fb      	str	r3, [r7, #12]
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <prvDeleteTCB+0x54>
	}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <prvResetNextTaskUnblockTime+0x38>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <prvResetNextTaskUnblockTime+0x3c>)
 8003642:	f04f 32ff 	mov.w	r2, #4294967295
 8003646:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003648:	e008      	b.n	800365c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364a:	4b07      	ldr	r3, [pc, #28]	; (8003668 <prvResetNextTaskUnblockTime+0x38>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <prvResetNextTaskUnblockTime+0x3c>)
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	2000039c 	.word	0x2000039c
 800366c:	20000404 	.word	0x20000404

08003670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <xTaskGetSchedulerState+0x34>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800367e:	2301      	movs	r3, #1
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	e008      	b.n	8003696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <xTaskGetSchedulerState+0x38>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800368c:	2302      	movs	r3, #2
 800368e:	607b      	str	r3, [r7, #4]
 8003690:	e001      	b.n	8003696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003696:	687b      	ldr	r3, [r7, #4]
	}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	200003f0 	.word	0x200003f0
 80036a8:	2000040c 	.word	0x2000040c

080036ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d06e      	beq.n	80037a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036c2:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <xTaskPriorityDisinherit+0x100>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d00a      	beq.n	80036e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	60fb      	str	r3, [r7, #12]
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	60bb      	str	r3, [r7, #8]
}
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	429a      	cmp	r2, r3
 8003714:	d044      	beq.n	80037a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371a:	2b00      	cmp	r3, #0
 800371c:	d140      	bne.n	80037a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	3304      	adds	r3, #4
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fd8b 	bl	800223e <uxListRemove>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003732:	491f      	ldr	r1, [pc, #124]	; (80037b0 <xTaskPriorityDisinherit+0x104>)
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <xTaskPriorityDisinherit+0xae>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2201      	movs	r2, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <xTaskPriorityDisinherit+0x108>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4013      	ands	r3, r2
 8003756:	4a17      	ldr	r2, [pc, #92]	; (80037b4 <xTaskPriorityDisinherit+0x108>)
 8003758:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f1c3 0207 	rsb	r2, r3, #7
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	2201      	movs	r2, #1
 8003774:	409a      	lsls	r2, r3
 8003776:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <xTaskPriorityDisinherit+0x108>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <xTaskPriorityDisinherit+0x108>)
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <xTaskPriorityDisinherit+0x104>)
 800378e:	441a      	add	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f7fe fcf4 	bl	8002184 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800379c:	2301      	movs	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80037a0:	697b      	ldr	r3, [r7, #20]
	}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200002e4 	.word	0x200002e4
 80037b0:	200002e8 	.word	0x200002e8
 80037b4:	200003ec 	.word	0x200003ec

080037b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037c2:	4b29      	ldr	r3, [pc, #164]	; (8003868 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037c8:	4b28      	ldr	r3, [pc, #160]	; (800386c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3304      	adds	r3, #4
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fd35 	bl	800223e <uxListRemove>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <prvAddCurrentTaskToDelayedList+0xb4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2201      	movs	r2, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	4b21      	ldr	r3, [pc, #132]	; (8003870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4013      	ands	r3, r2
 80037ee:	4a20      	ldr	r2, [pc, #128]	; (8003870 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d10a      	bne.n	8003810 <prvAddCurrentTaskToDelayedList+0x58>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3304      	adds	r3, #4
 8003806:	4619      	mov	r1, r3
 8003808:	481a      	ldr	r0, [pc, #104]	; (8003874 <prvAddCurrentTaskToDelayedList+0xbc>)
 800380a:	f7fe fcbb 	bl	8002184 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800380e:	e026      	b.n	800385e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <prvAddCurrentTaskToDelayedList+0xb4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	429a      	cmp	r2, r3
 8003826:	d209      	bcs.n	800383c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <prvAddCurrentTaskToDelayedList+0xc0>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <prvAddCurrentTaskToDelayedList+0xb4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3304      	adds	r3, #4
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f7fe fcc9 	bl	80021cc <vListInsert>
}
 800383a:	e010      	b.n	800385e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <prvAddCurrentTaskToDelayedList+0xc4>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7fe fcbf 	bl	80021cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	d202      	bcs.n	800385e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <prvAddCurrentTaskToDelayedList+0xc8>)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6013      	str	r3, [r2, #0]
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200003e8 	.word	0x200003e8
 800386c:	200002e4 	.word	0x200002e4
 8003870:	200003ec 	.word	0x200003ec
 8003874:	200003d0 	.word	0x200003d0
 8003878:	200003a0 	.word	0x200003a0
 800387c:	2000039c 	.word	0x2000039c
 8003880:	20000404 	.word	0x20000404

08003884 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3b04      	subs	r3, #4
 8003894:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800389c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3b04      	subs	r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f023 0201 	bic.w	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3b04      	subs	r3, #4
 80038b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <pxPortInitialiseStack+0x64>)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3b14      	subs	r3, #20
 80038be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3b04      	subs	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f06f 0202 	mvn.w	r2, #2
 80038d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b20      	subs	r3, #32
 80038d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	080038ed 	.word	0x080038ed

080038ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <prvTaskExitError+0x54>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d00a      	beq.n	8003916 <prvTaskExitError+0x2a>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	60fb      	str	r3, [r7, #12]
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <prvTaskExitError+0x28>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	60bb      	str	r3, [r7, #8]
}
 8003928:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800392a:	bf00      	nop
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0fc      	beq.n	800392c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	2000000c 	.word	0x2000000c
	...

08003950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <pxCurrentTCBConst2>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6808      	ldr	r0, [r1, #0]
 8003956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	f380 8809 	msr	PSP, r0
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f380 8811 	msr	BASEPRI, r0
 800396a:	4770      	bx	lr
 800396c:	f3af 8000 	nop.w

08003970 <pxCurrentTCBConst2>:
 8003970:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003978:	4808      	ldr	r0, [pc, #32]	; (800399c <prvPortStartFirstTask+0x24>)
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	f380 8808 	msr	MSP, r0
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8814 	msr	CONTROL, r0
 800398a:	b662      	cpsie	i
 800398c:	b661      	cpsie	f
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	df00      	svc	0
 8003998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800399a:	bf00      	nop
 800399c:	e000ed08 	.word	0xe000ed08

080039a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039a6:	4b46      	ldr	r3, [pc, #280]	; (8003ac0 <xPortStartScheduler+0x120>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a46      	ldr	r2, [pc, #280]	; (8003ac4 <xPortStartScheduler+0x124>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10a      	bne.n	80039c6 <xPortStartScheduler+0x26>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	613b      	str	r3, [r7, #16]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039c6:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <xPortStartScheduler+0x120>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <xPortStartScheduler+0x128>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10a      	bne.n	80039e6 <xPortStartScheduler+0x46>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	60fb      	str	r3, [r7, #12]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039e6:	4b39      	ldr	r3, [pc, #228]	; (8003acc <xPortStartScheduler+0x12c>)
 80039e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <xPortStartScheduler+0x130>)
 8003a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a0e:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a14:	e009      	b.n	8003a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003a16:	4b2f      	ldr	r3, [pc, #188]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b80      	cmp	r3, #128	; 0x80
 8003a34:	d0ef      	beq.n	8003a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1c3 0307 	rsb	r3, r3, #7
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d00a      	beq.n	8003a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	60bb      	str	r3, [r7, #8]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a62:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <xPortStartScheduler+0x134>)
 8003a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <xPortStartScheduler+0x138>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <xPortStartScheduler+0x138>)
 8003a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <xPortStartScheduler+0x138>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <xPortStartScheduler+0x138>)
 8003a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a8e:	f000 f8dd 	bl	8003c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <xPortStartScheduler+0x13c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a98:	f000 f8fc 	bl	8003c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a9c:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <xPortStartScheduler+0x140>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	; (8003ae0 <xPortStartScheduler+0x140>)
 8003aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003aa8:	f7ff ff66 	bl	8003978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003aac:	f7ff fba4 	bl	80031f8 <vTaskSwitchContext>
	prvTaskExitError();
 8003ab0:	f7ff ff1c 	bl	80038ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000ed00 	.word	0xe000ed00
 8003ac4:	410fc271 	.word	0x410fc271
 8003ac8:	410fc270 	.word	0x410fc270
 8003acc:	e000e400 	.word	0xe000e400
 8003ad0:	20000410 	.word	0x20000410
 8003ad4:	20000414 	.word	0x20000414
 8003ad8:	e000ed20 	.word	0xe000ed20
 8003adc:	2000000c 	.word	0x2000000c
 8003ae0:	e000ef34 	.word	0xe000ef34

08003ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	607b      	str	r3, [r7, #4]
}
 8003afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <vPortEnterCritical+0x58>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <vPortEnterCritical+0x58>)
 8003b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <vPortEnterCritical+0x58>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10f      	bne.n	8003b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <vPortEnterCritical+0x5c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	603b      	str	r3, [r7, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <vPortEnterCritical+0x4a>
	}
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	2000000c 	.word	0x2000000c
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <vPortExitCritical+0x50>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <vPortExitCritical+0x24>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	607b      	str	r3, [r7, #4]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <vPortExitCritical+0x50>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <vPortExitCritical+0x50>)
 8003b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <vPortExitCritical+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <vPortExitCritical+0x42>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	2000000c 	.word	0x2000000c
	...

08003ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ba0:	f3ef 8009 	mrs	r0, PSP
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <pxCurrentTCBConst>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	f01e 0f10 	tst.w	lr, #16
 8003bb0:	bf08      	it	eq
 8003bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bba:	6010      	str	r0, [r2, #0]
 8003bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003bc4:	f380 8811 	msr	BASEPRI, r0
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f7ff fb12 	bl	80031f8 <vTaskSwitchContext>
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f380 8811 	msr	BASEPRI, r0
 8003bdc:	bc09      	pop	{r0, r3}
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	6808      	ldr	r0, [r1, #0]
 8003be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be6:	f01e 0f10 	tst.w	lr, #16
 8003bea:	bf08      	it	eq
 8003bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bf0:	f380 8809 	msr	PSP, r0
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	f3af 8000 	nop.w

08003c00 <pxCurrentTCBConst>:
 8003c00:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
}
 8003c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c22:	f7ff fa31 	bl	8003088 <xTaskIncrementTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <SysTick_Handler+0x40>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f383 8811 	msr	BASEPRI, r3
}
 8003c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <vPortSetupTimerInterrupt+0x38>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <vPortSetupTimerInterrupt+0x3c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <vPortSetupTimerInterrupt+0x40>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <vPortSetupTimerInterrupt+0x44>)
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010
 8003c84:	e000e018 	.word	0xe000e018
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	10624dd3 	.word	0x10624dd3
 8003c90:	e000e014 	.word	0xe000e014

08003c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ca4 <vPortEnableVFP+0x10>
 8003c98:	6801      	ldr	r1, [r0, #0]
 8003c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c9e:	6001      	str	r1, [r0, #0]
 8003ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed88 	.word	0xe000ed88

08003ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	; 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003cb4:	f7ff f93e 	bl	8002f34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003cb8:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <pvPortMalloc+0x180>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003cc0:	f000 f920 	bl	8003f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <pvPortMalloc+0x184>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 8093 	bne.w	8003df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01d      	beq.n	8003d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003cd8:	2208      	movs	r2, #8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d014      	beq.n	8003d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f023 0307 	bic.w	r3, r3, #7
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <pvPortMalloc+0x6c>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	617b      	str	r3, [r7, #20]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d06e      	beq.n	8003df8 <pvPortMalloc+0x150>
 8003d1a:	4b45      	ldr	r3, [pc, #276]	; (8003e30 <pvPortMalloc+0x188>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d869      	bhi.n	8003df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <pvPortMalloc+0x18c>)
 8003d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d28:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <pvPortMalloc+0x18c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d2e:	e004      	b.n	8003d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d903      	bls.n	8003d4c <pvPortMalloc+0xa4>
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f1      	bne.n	8003d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d4c:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <pvPortMalloc+0x180>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d050      	beq.n	8003df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad2      	subs	r2, r2, r3
 8003d70:	2308      	movs	r3, #8
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d91f      	bls.n	8003db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <pvPortMalloc+0xf8>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	613b      	str	r3, [r7, #16]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003db2:	69b8      	ldr	r0, [r7, #24]
 8003db4:	f000 f908 	bl	8003fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <pvPortMalloc+0x188>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <pvPortMalloc+0x188>)
 8003dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	; (8003e30 <pvPortMalloc+0x188>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <pvPortMalloc+0x190>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d203      	bcs.n	8003dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <pvPortMalloc+0x188>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <pvPortMalloc+0x190>)
 8003dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <pvPortMalloc+0x184>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <pvPortMalloc+0x194>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a11      	ldr	r2, [pc, #68]	; (8003e3c <pvPortMalloc+0x194>)
 8003df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003df8:	f7ff f8aa 	bl	8002f50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <pvPortMalloc+0x174>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	60fb      	str	r3, [r7, #12]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <pvPortMalloc+0x172>
	return pvReturn;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3728      	adds	r7, #40	; 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20004020 	.word	0x20004020
 8003e2c:	20004034 	.word	0x20004034
 8003e30:	20004024 	.word	0x20004024
 8003e34:	20004018 	.word	0x20004018
 8003e38:	20004028 	.word	0x20004028
 8003e3c:	2000402c 	.word	0x2000402c

08003e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04d      	beq.n	8003eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e52:	2308      	movs	r3, #8
 8003e54:	425b      	negs	r3, r3
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4413      	add	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <vPortFree+0xb8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <vPortFree+0x44>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	60fb      	str	r3, [r7, #12]
}
 8003e80:	bf00      	nop
 8003e82:	e7fe      	b.n	8003e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <vPortFree+0x62>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	60bb      	str	r3, [r7, #8]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <vPortFree+0xb8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d11a      	bne.n	8003eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <vPortFree+0xb8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ec8:	f7ff f834 	bl	8002f34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <vPortFree+0xbc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <vPortFree+0xbc>)
 8003ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eda:	6938      	ldr	r0, [r7, #16]
 8003edc:	f000 f874 	bl	8003fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <vPortFree+0xc0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <vPortFree+0xc0>)
 8003ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eea:	f7ff f831 	bl	8002f50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20004034 	.word	0x20004034
 8003efc:	20004024 	.word	0x20004024
 8003f00:	20004030 	.word	0x20004030

08003f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <prvHeapInit+0xac>)
 8003f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3307      	adds	r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0307 	bic.w	r3, r3, #7
 8003f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <prvHeapInit+0xac>)
 8003f34:	4413      	add	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <prvHeapInit+0xb0>)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f42:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <prvHeapInit+0xb0>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f50:	2208      	movs	r2, #8
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <prvHeapInit+0xb4>)
 8003f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <prvHeapInit+0xb4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <prvHeapInit+0xb4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	1ad2      	subs	r2, r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <prvHeapInit+0xb4>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <prvHeapInit+0xb8>)
 8003f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <prvHeapInit+0xbc>)
 8003f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <prvHeapInit+0xc0>)
 8003f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fa2:	601a      	str	r2, [r3, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	20000418 	.word	0x20000418
 8003fb4:	20004018 	.word	0x20004018
 8003fb8:	20004020 	.word	0x20004020
 8003fbc:	20004028 	.word	0x20004028
 8003fc0:	20004024 	.word	0x20004024
 8003fc4:	20004034 	.word	0x20004034

08003fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fd0:	4b28      	ldr	r3, [pc, #160]	; (8004074 <prvInsertBlockIntoFreeList+0xac>)
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e002      	b.n	8003fdc <prvInsertBlockIntoFreeList+0x14>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d8f7      	bhi.n	8003fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d108      	bne.n	800400a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	441a      	add	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d118      	bne.n	8004050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b15      	ldr	r3, [pc, #84]	; (8004078 <prvInsertBlockIntoFreeList+0xb0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d00d      	beq.n	8004046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e008      	b.n	8004058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <prvInsertBlockIntoFreeList+0xb0>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e003      	b.n	8004058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d002      	beq.n	8004066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20004018 	.word	0x20004018
 8004078:	20004020 	.word	0x20004020

0800407c <__libc_init_array>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4d0d      	ldr	r5, [pc, #52]	; (80040b4 <__libc_init_array+0x38>)
 8004080:	4c0d      	ldr	r4, [pc, #52]	; (80040b8 <__libc_init_array+0x3c>)
 8004082:	1b64      	subs	r4, r4, r5
 8004084:	10a4      	asrs	r4, r4, #2
 8004086:	2600      	movs	r6, #0
 8004088:	42a6      	cmp	r6, r4
 800408a:	d109      	bne.n	80040a0 <__libc_init_array+0x24>
 800408c:	4d0b      	ldr	r5, [pc, #44]	; (80040bc <__libc_init_array+0x40>)
 800408e:	4c0c      	ldr	r4, [pc, #48]	; (80040c0 <__libc_init_array+0x44>)
 8004090:	f000 f82e 	bl	80040f0 <_init>
 8004094:	1b64      	subs	r4, r4, r5
 8004096:	10a4      	asrs	r4, r4, #2
 8004098:	2600      	movs	r6, #0
 800409a:	42a6      	cmp	r6, r4
 800409c:	d105      	bne.n	80040aa <__libc_init_array+0x2e>
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a4:	4798      	blx	r3
 80040a6:	3601      	adds	r6, #1
 80040a8:	e7ee      	b.n	8004088 <__libc_init_array+0xc>
 80040aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ae:	4798      	blx	r3
 80040b0:	3601      	adds	r6, #1
 80040b2:	e7f2      	b.n	800409a <__libc_init_array+0x1e>
 80040b4:	08004204 	.word	0x08004204
 80040b8:	08004204 	.word	0x08004204
 80040bc:	08004204 	.word	0x08004204
 80040c0:	08004208 	.word	0x08004208

080040c4 <memcpy>:
 80040c4:	440a      	add	r2, r1
 80040c6:	4291      	cmp	r1, r2
 80040c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040cc:	d100      	bne.n	80040d0 <memcpy+0xc>
 80040ce:	4770      	bx	lr
 80040d0:	b510      	push	{r4, lr}
 80040d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040da:	4291      	cmp	r1, r2
 80040dc:	d1f9      	bne.n	80040d2 <memcpy+0xe>
 80040de:	bd10      	pop	{r4, pc}

080040e0 <memset>:
 80040e0:	4402      	add	r2, r0
 80040e2:	4603      	mov	r3, r0
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d100      	bne.n	80040ea <memset+0xa>
 80040e8:	4770      	bx	lr
 80040ea:	f803 1b01 	strb.w	r1, [r3], #1
 80040ee:	e7f9      	b.n	80040e4 <memset+0x4>

080040f0 <_init>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr

080040fc <_fini>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr
