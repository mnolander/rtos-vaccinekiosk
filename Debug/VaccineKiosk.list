
VaccineKiosk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e8  080049e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080049e8  080049e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049f0  080049f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080049f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000402c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000403c  2000403c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010251  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002982  00000000  00000000  00030291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e38  00000000  00000000  00033b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bda  00000000  00000000  000349c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bd8  00000000  00000000  0005659a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0849  00000000  00000000  00067172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001379bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f64  00000000  00000000  00137a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048b0 	.word	0x080048b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080048b0 	.word	0x080048b0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000048 	.word	0x20000048
 8000504:	2000009c 	.word	0x2000009c

08000508 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b0ae      	sub	sp, #184	; 0xb8
 800050c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of vaccineQueue */
  osMessageQDef(vaccineQueue, 1, uint16_t);
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <MX_FREERTOS_Init+0x10c>)
 8000510:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  vaccineQueueHandle = osMessageCreate(osMessageQ(vaccineQueue), NULL);
 800051a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f001 ff90 	bl	8002446 <osMessageCreate>
 8000526:	4603      	mov	r3, r0
 8000528:	4a3b      	ldr	r2, [pc, #236]	; (8000618 <MX_FREERTOS_Init+0x110>)
 800052a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 128);
 800052c:	4b3b      	ldr	r3, [pc, #236]	; (800061c <MX_FREERTOS_Init+0x114>)
 800052e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000540:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f001 ff31 	bl	80023ae <osThreadCreate>
 800054c:	4603      	mov	r3, r0
 800054e:	4a34      	ldr	r2, [pc, #208]	; (8000620 <MX_FREERTOS_Init+0x118>)
 8000550:	6013      	str	r3, [r2, #0]

  /* definition and creation of injectTask */
  osThreadDef(injectTask, StartInjectTask, osPriorityBelowNormal, 0, 128);
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <MX_FREERTOS_Init+0x11c>)
 8000554:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  injectTaskHandle = osThreadCreate(osThread(injectTask), NULL);
 8000566:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f001 ff1e 	bl	80023ae <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a2c      	ldr	r2, [pc, #176]	; (8000628 <MX_FREERTOS_Init+0x120>)
 8000576:	6013      	str	r3, [r2, #0]

  /* definition and creation of selectTask */
  osThreadDef(selectTask, StartSelectTask, osPriorityHigh, 0, 128);
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <MX_FREERTOS_Init+0x124>)
 800057a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  selectTaskHandle = osThreadCreate(osThread(selectTask), NULL);
 800058c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f001 ff0b 	bl	80023ae <osThreadCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a25      	ldr	r2, [pc, #148]	; (8000630 <MX_FREERTOS_Init+0x128>)
 800059c:	6013      	str	r3, [r2, #0]

  /* definition and creation of paymentTask */
  osThreadDef(paymentTask, StartPaymentTask, osPriorityAboveNormal, 0, 128);
 800059e:	4b25      	ldr	r3, [pc, #148]	; (8000634 <MX_FREERTOS_Init+0x12c>)
 80005a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  paymentTaskHandle = osThreadCreate(osThread(paymentTask), NULL);
 80005b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fef8 	bl	80023ae <osThreadCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a1d      	ldr	r2, [pc, #116]	; (8000638 <MX_FREERTOS_Init+0x130>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of armTask */
  osThreadDef(armTask, StartArmTask, osPriorityNormal, 0, 128);
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_FREERTOS_Init+0x134>)
 80005c6:	f107 041c 	add.w	r4, r7, #28
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  armTaskHandle = osThreadCreate(osThread(armTask), NULL);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fee5 	bl	80023ae <osThreadCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <MX_FREERTOS_Init+0x138>)
 80005e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of failsafeTask */
  osThreadDef(failsafeTask, StartFailSafe, osPriorityHigh, 0, 128);
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <MX_FREERTOS_Init+0x13c>)
 80005ec:	463c      	mov	r4, r7
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  failsafeTaskHandle = osThreadCreate(osThread(failsafeTask), NULL);
 80005fc:	463b      	mov	r3, r7
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fed4 	bl	80023ae <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <MX_FREERTOS_Init+0x140>)
 800060a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800060c:	bf00      	nop
 800060e:	37b8      	adds	r7, #184	; 0xb8
 8000610:	46bd      	mov	sp, r7
 8000612:	bdb0      	pop	{r4, r5, r7, pc}
 8000614:	08004910 	.word	0x08004910
 8000618:	20000044 	.word	0x20000044
 800061c:	08004920 	.word	0x08004920
 8000620:	2000002c 	.word	0x2000002c
 8000624:	0800493c 	.word	0x0800493c
 8000628:	20000030 	.word	0x20000030
 800062c:	08004958 	.word	0x08004958
 8000630:	20000034 	.word	0x20000034
 8000634:	08004974 	.word	0x08004974
 8000638:	20000038 	.word	0x20000038
 800063c:	08004990 	.word	0x08004990
 8000640:	2000003c 	.word	0x2000003c
 8000644:	080049ac 	.word	0x080049ac
 8000648:	20000040 	.word	0x20000040

0800064c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000654:	f04f 31ff 	mov.w	r1, #4294967295
 8000658:	2001      	movs	r0, #1
 800065a:	f003 fb95 	bl	8003d88 <ulTaskNotifyTake>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <StartDefaultTask+0x78>)
 8000666:	f000 ff2b 	bl	80014c0 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4814      	ldr	r0, [pc, #80]	; (80006c4 <StartDefaultTask+0x78>)
 8000672:	f000 ff25 	bl	80014c0 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067c:	4811      	ldr	r0, [pc, #68]	; (80006c4 <StartDefaultTask+0x78>)
 800067e:	f000 ff1f 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	480e      	ldr	r0, [pc, #56]	; (80006c4 <StartDefaultTask+0x78>)
 800068a:	f000 ff19 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	480c      	ldr	r0, [pc, #48]	; (80006c4 <StartDefaultTask+0x78>)
 8000694:	f000 ff14 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2104      	movs	r1, #4
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <StartDefaultTask+0x78>)
 800069e:	f000 ff0f 	bl	80014c0 <HAL_GPIO_WritePin>

    xTaskNotify(selectTaskHandle, 0, eNoAction);
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <StartDefaultTask+0x7c>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	f003 fbb4 	bl	8003e18 <xTaskGenericNotify>
    vTaskResume(selectTaskHandle);
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <StartDefaultTask+0x7c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fe57 	bl	8003368 <vTaskResume>
    vTaskSuspend(NULL);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f002 fd90 	bl	80031e0 <vTaskSuspend>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80006c0:	e7c8      	b.n	8000654 <StartDefaultTask+0x8>
 80006c2:	bf00      	nop
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	20000034 	.word	0x20000034

080006cc <StartInjectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInjectTask */
void StartInjectTask(void const * argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInjectTask */
  /* Infinite loop */
  uint16_t recValue;
  int injectConfirm = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
    xQueueReceive(vaccineQueueHandle, &recValue, pdMS_TO_TICKS(10000));
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <StartInjectTask+0xa8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f107 010a 	add.w	r1, r7, #10
 80006e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f9c3 	bl	8002a70 <xQueueReceive>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 80006ea:	e012      	b.n	8000712 <StartInjectTask+0x46>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	4821      	ldr	r0, [pc, #132]	; (8000778 <StartInjectTask+0xac>)
 80006f4:	f000 fee4 	bl	80014c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	481e      	ldr	r0, [pc, #120]	; (8000778 <StartInjectTask+0xac>)
 80006fe:	f000 fedf 	bl	80014c0 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f000 fc22 	bl	8000f4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <StartInjectTask+0xac>)
 800070e:	f000 fed7 	bl	80014c0 <HAL_GPIO_WritePin>
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	4819      	ldr	r0, [pc, #100]	; (800077c <StartInjectTask+0xb0>)
 8000716:	f000 febb 	bl	8001490 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0e5      	beq.n	80006ec <StartInjectTask+0x20>
    }

    if(injectConfirm == 1){
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d115      	bne.n	8000752 <StartInjectTask+0x86>
      //Hooray you got your vaccine without dying!
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <StartInjectTask+0xac>)
 800072e:	f000 fec7 	bl	80014c0 <HAL_GPIO_WritePin>
      xTaskNotify(defaultTaskHandle, 0, eNoAction);
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <StartInjectTask+0xb4>)
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	2300      	movs	r3, #0
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	f003 fb6c 	bl	8003e18 <xTaskGenericNotify>
      vTaskResume(defaultTaskHandle);
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <StartInjectTask+0xb4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fe0f 	bl	8003368 <vTaskResume>
      vTaskSuspend(NULL);
 800074a:	2000      	movs	r0, #0
 800074c:	f002 fd48 	bl	80031e0 <vTaskSuspend>
 8000750:	e7c2      	b.n	80006d8 <StartInjectTask+0xc>
    }
    else{
      xTaskNotify(failsafeTaskHandle, 0, eNoAction);
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <StartInjectTask+0xb8>)
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	f003 fb5c 	bl	8003e18 <xTaskGenericNotify>
      vTaskResume(failsafeTaskHandle);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <StartInjectTask+0xb8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f002 fdff 	bl	8003368 <vTaskResume>
      vTaskSuspend(NULL);
 800076a:	2000      	movs	r0, #0
 800076c:	f002 fd38 	bl	80031e0 <vTaskSuspend>
    xQueueReceive(vaccineQueueHandle, &recValue, pdMS_TO_TICKS(10000));
 8000770:	e7b2      	b.n	80006d8 <StartInjectTask+0xc>
 8000772:	bf00      	nop
 8000774:	20000044 	.word	0x20000044
 8000778:	40020c00 	.word	0x40020c00
 800077c:	40020000 	.word	0x40020000
 8000780:	2000002c 	.word	0x2000002c
 8000784:	20000040 	.word	0x20000040

08000788 <StartSelectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSelectTask */
void StartSelectTask(void const * argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSelectTask */
  /* Infinite loop */
	uint16_t selectedVaccine = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	81bb      	strh	r3, [r7, #12]
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, 0);
 8000794:	2100      	movs	r1, #0
 8000796:	2001      	movs	r0, #1
 8000798:	f003 faf6 	bl	8003d88 <ulTaskNotifyTake>
    GPIO_PinState SelectPushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2); // Read user input (select button)
 800079c:	2104      	movs	r1, #4
 800079e:	483a      	ldr	r0, [pc, #232]	; (8000888 <StartSelectTask+0x100>)
 80007a0:	f000 fe76 	bl	8001490 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	73fb      	strb	r3, [r7, #15]
    GPIO_PinState ChoosePushButton = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); // Read user input (choose button)
 80007a8:	2110      	movs	r1, #16
 80007aa:	4837      	ldr	r0, [pc, #220]	; (8000888 <StartSelectTask+0x100>)
 80007ac:	f000 fe70 	bl	8001490 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	73bb      	strb	r3, [r7, #14]

    if(SelectPushButton == GPIO_PIN_RESET){ // If button is reversed then update GPIO_InitStruct.Pull = GPIO_PULLUP; in gpio.c
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d137      	bne.n	800082a <StartSelectTask+0xa2>
    	if(selectedVaccine == 0){ //If blue vaccine was last activated, switch to green
 80007ba:	89bb      	ldrh	r3, [r7, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10e      	bne.n	80007de <StartSelectTask+0x56>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c6:	4831      	ldr	r0, [pc, #196]	; (800088c <StartSelectTask+0x104>)
 80007c8:	f000 fe7a 	bl	80014c0 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d2:	482e      	ldr	r0, [pc, #184]	; (800088c <StartSelectTask+0x104>)
 80007d4:	f000 fe74 	bl	80014c0 <HAL_GPIO_WritePin>
    		selectedVaccine = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	81bb      	strh	r3, [r7, #12]
 80007dc:	e022      	b.n	8000824 <StartSelectTask+0x9c>
    	}
    	else if(selectedVaccine == 1){ //If green vaccine was last activated, switch to orange
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d10e      	bne.n	8000802 <StartSelectTask+0x7a>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	4828      	ldr	r0, [pc, #160]	; (800088c <StartSelectTask+0x104>)
 80007ec:	f000 fe68 	bl	80014c0 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4825      	ldr	r0, [pc, #148]	; (800088c <StartSelectTask+0x104>)
 80007f8:	f000 fe62 	bl	80014c0 <HAL_GPIO_WritePin>
    		selectedVaccine = 2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	81bb      	strh	r3, [r7, #12]
 8000800:	e010      	b.n	8000824 <StartSelectTask+0x9c>
    	}
    	else if(selectedVaccine == 2){ //If orange vaccine was last activated, switch to blue
 8000802:	89bb      	ldrh	r3, [r7, #12]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d10d      	bne.n	8000824 <StartSelectTask+0x9c>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	481f      	ldr	r0, [pc, #124]	; (800088c <StartSelectTask+0x104>)
 8000810:	f000 fe56 	bl	80014c0 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <StartSelectTask+0x104>)
 800081c:	f000 fe50 	bl	80014c0 <HAL_GPIO_WritePin>
    		selectedVaccine = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	81bb      	strh	r3, [r7, #12]
    	}
    	vTaskDelay(250); //Delay so options don't switch too fast
 8000824:	20fa      	movs	r0, #250	; 0xfa
 8000826:	f002 fca7 	bl	8003178 <vTaskDelay>
    }

    if(ChoosePushButton == GPIO_PIN_RESET){
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1b1      	bne.n	8000794 <StartSelectTask+0xc>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	4815      	ldr	r0, [pc, #84]	; (800088c <StartSelectTask+0x104>)
 8000838:	f000 fe42 	bl	80014c0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <StartSelectTask+0x104>)
 8000844:	f000 fe3c 	bl	80014c0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	480f      	ldr	r0, [pc, #60]	; (800088c <StartSelectTask+0x104>)
 8000850:	f000 fe36 	bl	80014c0 <HAL_GPIO_WritePin>
    	xQueueSendToFront(vaccineQueueHandle, &selectedVaccine, 10000); //Put selected vaccine into queue
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <StartSelectTask+0x108>)
 8000856:	6818      	ldr	r0, [r3, #0]
 8000858:	f107 010c 	add.w	r1, r7, #12
 800085c:	2301      	movs	r3, #1
 800085e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000862:	f002 f807 	bl	8002874 <xQueueGenericSend>
    	xTaskNotify(paymentTaskHandle, 0, eNoAction);
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <StartSelectTask+0x10c>)
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	f003 fad2 	bl	8003e18 <xTaskGenericNotify>
    	vTaskResume(paymentTaskHandle);
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <StartSelectTask+0x10c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fd75 	bl	8003368 <vTaskResume>
    	vTaskSuspend(NULL);
 800087e:	2000      	movs	r0, #0
 8000880:	f002 fcae 	bl	80031e0 <vTaskSuspend>
  {
 8000884:	e786      	b.n	8000794 <StartSelectTask+0xc>
 8000886:	bf00      	nop
 8000888:	40020000 	.word	0x40020000
 800088c:	40020c00 	.word	0x40020c00
 8000890:	20000044 	.word	0x20000044
 8000894:	20000038 	.word	0x20000038

08000898 <StartPaymentTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPaymentTask */
void StartPaymentTask(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint16_t recValue, paymentConfirm;
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	2001      	movs	r0, #1
 80008a6:	f003 fa6f 	bl	8003d88 <ulTaskNotifyTake>
	xQueueReceive(vaccineQueueHandle, &recValue, pdMS_TO_TICKS(10000));
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <StartPaymentTask+0x90>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f107 010e 	add.w	r1, r7, #14
 80008b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f8da 	bl	8002a70 <xQueueReceive>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 80008bc:	e008      	b.n	80008d0 <StartPaymentTask+0x38>
		// Flash green LED
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	481a      	ldr	r0, [pc, #104]	; (800092c <StartPaymentTask+0x94>)
 80008c4:	f000 fe15 	bl	80014f2 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 80008c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008cc:	f002 fc54 	bl	8003178 <vTaskDelay>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 80008d0:	2120      	movs	r1, #32
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <StartPaymentTask+0x98>)
 80008d4:	f000 fddc 	bl	8001490 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d0ef      	beq.n	80008be <StartPaymentTask+0x26>
	}
    // Check payment button
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET){
 80008de:	2120      	movs	r1, #32
 80008e0:	4813      	ldr	r0, [pc, #76]	; (8000930 <StartPaymentTask+0x98>)
 80008e2:	f000 fdd5 	bl	8001490 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1d9      	bne.n	80008a0 <StartPaymentTask+0x8>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f2:	480e      	ldr	r0, [pc, #56]	; (800092c <StartPaymentTask+0x94>)
 80008f4:	f000 fde4 	bl	80014c0 <HAL_GPIO_WritePin>
        // Put payment confirmation into queue
        xQueueSendToFront(vaccineQueueHandle, &paymentConfirm, 0);
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <StartPaymentTask+0x90>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	f107 010c 	add.w	r1, r7, #12
 8000900:	2301      	movs	r3, #1
 8000902:	2200      	movs	r2, #0
 8000904:	f001 ffb6 	bl	8002874 <xQueueGenericSend>
        xTaskNotify(armTaskHandle, 0, eNoAction);
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <StartPaymentTask+0x9c>)
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	f003 fa81 	bl	8003e18 <xTaskGenericNotify>
        vTaskResume(armTaskHandle);
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <StartPaymentTask+0x9c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fd24 	bl	8003368 <vTaskResume>
        vTaskSuspend(NULL);
 8000920:	2000      	movs	r0, #0
 8000922:	f002 fc5d 	bl	80031e0 <vTaskSuspend>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000926:	e7bb      	b.n	80008a0 <StartPaymentTask+0x8>
 8000928:	20000044 	.word	0x20000044
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40020000 	.word	0x40020000
 8000934:	2000003c 	.word	0x2000003c

08000938 <StartArmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartArmTask */
void StartArmTask(void const * argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartArmTask */
  /* Infinite loop */
	uint16_t recValue;
	TickType_t buttonPressTime = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
	TickType_t buttonHoldTime = pdMS_TO_TICKS(5000);
 8000944:	f241 3388 	movw	r3, #5000	; 0x1388
 8000948:	617b      	str	r3, [r7, #20]
	int armSuccess, armAttempt = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800094e:	f04f 31ff 	mov.w	r1, #4294967295
 8000952:	2001      	movs	r0, #1
 8000954:	f003 fa18 	bl	8003d88 <ulTaskNotifyTake>
    xQueueReceive(vaccineQueueHandle, &recValue, pdMS_TO_TICKS(10000));
 8000958:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <StartArmTask+0x128>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f107 0112 	add.w	r1, r7, #18
 8000960:	f242 7210 	movw	r2, #10000	; 0x2710
 8000964:	4618      	mov	r0, r3
 8000966:	f002 f883 	bl	8002a70 <xQueueReceive>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000970:	483c      	ldr	r0, [pc, #240]	; (8000a64 <StartArmTask+0x12c>)
 8000972:	f000 fda5 	bl	80014c0 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){ //Flash red LED while waiting for arm button
 8000976:	e008      	b.n	800098a <StartArmTask+0x52>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800097c:	4839      	ldr	r0, [pc, #228]	; (8000a64 <StartArmTask+0x12c>)
 800097e:	f000 fdb8 	bl	80014f2 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 8000982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000986:	f002 fbf7 	bl	8003178 <vTaskDelay>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET){ //Flash red LED while waiting for arm button
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	4836      	ldr	r0, [pc, #216]	; (8000a68 <StartArmTask+0x130>)
 800098e:	f000 fd7f 	bl	8001490 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d0ef      	beq.n	8000978 <StartArmTask+0x40>
	}

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000998:	e027      	b.n	80009ea <StartArmTask+0xb2>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a0:	4830      	ldr	r0, [pc, #192]	; (8000a64 <StartArmTask+0x12c>)
 80009a2:	f000 fd8d 	bl	80014c0 <HAL_GPIO_WritePin>
		  armAttempt = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
	      if (buttonPressTime == 0)
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <StartArmTask+0x7e>
	      {
	        buttonPressTime = xTaskGetTickCount(); //Record time user put arm down
 80009b0:	f002 fe42 	bl	8003638 <xTaskGetTickCount>
 80009b4:	61f8      	str	r0, [r7, #28]
	      }

	      if ((xTaskGetTickCount() - buttonPressTime) >= buttonHoldTime) //Check if user has held button for 5 seconds
 80009b6:	f002 fe3f 	bl	8003638 <xTaskGetTickCount>
 80009ba:	4602      	mov	r2, r0
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d808      	bhi.n	80009d8 <StartArmTask+0xa0>
	      {
	        //Success!
	    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009cc:	4825      	ldr	r0, [pc, #148]	; (8000a64 <StartArmTask+0x12c>)
 80009ce:	f000 fd77 	bl	80014c0 <HAL_GPIO_WritePin>
	        armSuccess = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
	        break;
 80009d6:	e00f      	b.n	80009f8 <StartArmTask+0xc0>
	      }

	      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) //Check if user released button
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	4823      	ldr	r0, [pc, #140]	; (8000a68 <StartArmTask+0x130>)
 80009dc:	f000 fd58 	bl	8001490 <HAL_GPIO_ReadPin>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d101      	bne.n	80009ea <StartArmTask+0xb2>
	      {
	        buttonPressTime = 0; //Reset time
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	481e      	ldr	r0, [pc, #120]	; (8000a68 <StartArmTask+0x130>)
 80009ee:	f000 fd4f 	bl	8001490 <HAL_GPIO_ReadPin>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0d0      	beq.n	800099a <StartArmTask+0x62>
	      }
	    }

	if(armAttempt == 1){
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d1a7      	bne.n	800094e <StartArmTask+0x16>
		if (armSuccess == 1)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d119      	bne.n	8000a38 <StartArmTask+0x100>
		{
			buttonPressTime = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
	        xQueueSendToFront(vaccineQueueHandle, &armSuccess, 0);
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <StartArmTask+0x128>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
 8000a0c:	f107 010c 	add.w	r1, r7, #12
 8000a10:	2301      	movs	r3, #1
 8000a12:	2200      	movs	r2, #0
 8000a14:	f001 ff2e 	bl	8002874 <xQueueGenericSend>
	        xTaskNotify(injectTaskHandle, 0, eNoAction);
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <StartArmTask+0x134>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	f003 f9f9 	bl	8003e18 <xTaskGenericNotify>
	        vTaskResume(injectTaskHandle);
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <StartArmTask+0x134>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fc9c 	bl	8003368 <vTaskResume>
	        vTaskSuspend(NULL);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f002 fbd5 	bl	80031e0 <vTaskSuspend>
 8000a36:	e78a      	b.n	800094e <StartArmTask+0x16>
		}
		else if (armSuccess == 0)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d187      	bne.n	800094e <StartArmTask+0x16>
		{
	        xTaskNotify(failsafeTaskHandle, 0, eNoAction);
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <StartArmTask+0x138>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	2300      	movs	r3, #0
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	f003 f9e6 	bl	8003e18 <xTaskGenericNotify>
	        vTaskResume(failsafeTaskHandle);
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <StartArmTask+0x138>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fc89 	bl	8003368 <vTaskResume>
	        vTaskSuspend(NULL);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f002 fbc2 	bl	80031e0 <vTaskSuspend>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000a5c:	e777      	b.n	800094e <StartArmTask+0x16>
 8000a5e:	bf00      	nop
 8000a60:	20000044 	.word	0x20000044
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	20000030 	.word	0x20000030
 8000a70:	20000040 	.word	0x20000040

08000a74 <StartFailSafe>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFailSafe */
void StartFailSafe(void const * argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFailSafe */
  /* Infinite loop */
	TickType_t alertTime = pdMS_TO_TICKS(20000);
 8000a7c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a80:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000a82:	f04f 31ff 	mov.w	r1, #4294967295
 8000a86:	2001      	movs	r0, #1
 8000a88:	f003 f97e 	bl	8003d88 <ulTaskNotifyTake>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <StartFailSafe+0xac>)
 8000a94:	f000 fd14 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	4820      	ldr	r0, [pc, #128]	; (8000b20 <StartFailSafe+0xac>)
 8000aa0:	f000 fd0e 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aaa:	481d      	ldr	r0, [pc, #116]	; (8000b20 <StartFailSafe+0xac>)
 8000aac:	f000 fd08 	bl	80014c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab6:	481a      	ldr	r0, [pc, #104]	; (8000b20 <StartFailSafe+0xac>)
 8000ab8:	f000 fd02 	bl	80014c0 <HAL_GPIO_WritePin>

	while(1){
    if (xTaskGetTickCount() >= alertTime)
 8000abc:	f002 fdbc 	bl	8003638 <xTaskGetTickCount>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d80e      	bhi.n	8000ae6 <StartFailSafe+0x72>
    {
        xTaskNotify(selectTaskHandle, 0, eNoAction);
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <StartFailSafe+0xb0>)
 8000aca:	6818      	ldr	r0, [r3, #0]
 8000acc:	2300      	movs	r3, #0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f003 f9a1 	bl	8003e18 <xTaskGenericNotify>
        vTaskSuspend(NULL);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f002 fb82 	bl	80031e0 <vTaskSuspend>
        vTaskResume(selectTaskHandle);
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <StartFailSafe+0xb0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fc41 	bl	8003368 <vTaskResume>
    }
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <StartFailSafe+0xac>)
 8000aec:	f000 fd01 	bl	80014f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <StartFailSafe+0xac>)
 8000af6:	f000 fcfc 	bl	80014f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afe:	4808      	ldr	r0, [pc, #32]	; (8000b20 <StartFailSafe+0xac>)
 8000b00:	f000 fcf7 	bl	80014f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <StartFailSafe+0xac>)
 8000b0a:	f000 fcf2 	bl	80014f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <StartFailSafe+0xac>)
 8000b12:	f000 fcee 	bl	80014f2 <HAL_GPIO_TogglePin>
	HAL_Delay(700);
 8000b16:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000b1a:	f000 fa17 	bl	8000f4c <HAL_Delay>
    if (xTaskGetTickCount() >= alertTime)
 8000b1e:	e7cd      	b.n	8000abc <StartFailSafe+0x48>
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	20000034 	.word	0x20000034

08000b28 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_GPIO_Init+0x98>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <MX_GPIO_Init+0x98>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0x98>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_GPIO_Init+0x98>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <MX_GPIO_Init+0x98>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_GPIO_Init+0x98>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000b76:	2200      	movs	r2, #0
 8000b78:	f24f 0144 	movw	r1, #61508	; 0xf044
 8000b7c:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0x9c>)
 8000b7e:	f000 fc9f 	bl	80014c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA2 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000b82:	2375      	movs	r3, #117	; 0x75
 8000b84:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_GPIO_Init+0xa0>)
 8000b96:	f000 fadf 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD2 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000b9a:	f24f 0344 	movw	r3, #61508	; 0xf044
 8000b9e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_GPIO_Init+0x9c>)
 8000bb4:	f000 fad0 	bl	8001158 <HAL_GPIO_Init>

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020c00 	.word	0x40020c00
 8000bc8:	40020000 	.word	0x40020000

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd0:	f000 f97a 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd4:	f000 f808 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd8:	f7ff ffa6 	bl	8000b28 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000bdc:	f7ff fc94 	bl	8000508 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000be0:	f001 fbde 	bl	80023a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <main+0x18>
	...

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2230      	movs	r2, #48	; 0x30
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fe52 	bl	80048a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <SystemClock_Config+0xb4>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <SystemClock_Config+0xb4>)
 8000c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <SystemClock_Config+0xb4>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <SystemClock_Config+0xb8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <SystemClock_Config+0xb8>)
 8000c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <SystemClock_Config+0xb8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4c:	2310      	movs	r3, #16
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 0320 	add.w	r3, r7, #32
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fc65 	bl	8001528 <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c64:	f000 f830 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	230f      	movs	r3, #15
 8000c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fec8 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c8e:	f000 f81b 	bl	8000cc8 <Error_Handler>
  }
}
 8000c92:	bf00      	nop
 8000c94:	3750      	adds	r7, #80	; 0x50
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40007000 	.word	0x40007000

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb6:	f000 f929 	bl	8000f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_MspInit+0x54>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_MspInit+0x54>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_MspInit+0x54>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_MspInit+0x54>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_MspInit+0x54>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_MspInit+0x54>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	f06f 0001 	mvn.w	r0, #1
 8000d1a:	f000 f9f3 	bl	8001104 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <HAL_InitTick+0xd0>)
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <HAL_InitTick+0xd0>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <HAL_InitTick+0xd0>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d58:	f107 020c 	add.w	r2, r7, #12
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 f824 	bl	8001db0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d68:	f001 f80e 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8000d6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_InitTick+0xd4>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	0c9b      	lsrs	r3, r3, #18
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_InitTick+0xd8>)
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_InitTick+0xdc>)
 8000d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_InitTick+0xd8>)
 8000d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_InitTick+0xd8>)
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <HAL_InitTick+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_InitTick+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_InitTick+0xd8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <HAL_InitTick+0xd8>)
 8000da4:	f001 f836 	bl	8001e14 <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d11b      	bne.n	8000dee <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000db6:	4813      	ldr	r0, [pc, #76]	; (8000e04 <HAL_InitTick+0xd8>)
 8000db8:	f001 f886 	bl	8001ec8 <HAL_TIM_Base_Start_IT>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000dc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d111      	bne.n	8000dee <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f000 f9b6 	bl	800113c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d808      	bhi.n	8000de8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	2019      	movs	r0, #25
 8000ddc:	f000 f992 	bl	8001104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de0:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_InitTick+0xe0>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e002      	b.n	8000dee <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3730      	adds	r7, #48	; 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	2000029c 	.word	0x2000029c
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	20000004 	.word	0x20000004

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e42:	f001 f8b1 	bl	8001fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000029c 	.word	0x2000029c

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f003 fccb 	bl	800483c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fe91 	bl	8000bcc <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000eb8:	080049f8 	.word	0x080049f8
  ldr r2, =_sbss
 8000ebc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ec0:	2000403c 	.word	0x2000403c

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f8fc 	bl	80010ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	200f      	movs	r0, #15
 8000ef8:	f7ff ff18 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff feea 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	200002e4 	.word	0x200002e4

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200002e4 	.word	0x200002e4

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff4c 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001116:	f7ff ff61 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 800111a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	6978      	ldr	r0, [r7, #20]
 8001122:	f7ff ffb1 	bl	8001088 <NVIC_EncodePriority>
 8001126:	4602      	mov	r2, r0
 8001128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112c:	4611      	mov	r1, r2
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff80 	bl	8001034 <__NVIC_SetPriority>
}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff54 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e16b      	b.n	800144c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 815a 	bne.w	8001446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80b4 	beq.w	8001446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a5b      	ldr	r2, [pc, #364]	; (8001468 <HAL_GPIO_Init+0x310>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	; (8001474 <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_GPIO_Init+0x324>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x328>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x32c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <HAL_GPIO_Init+0x330>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20a>
 800135e:	2307      	movs	r3, #7
 8001360:	e00e      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001362:	2308      	movs	r3, #8
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001366:	2306      	movs	r3, #6
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <HAL_GPIO_Init+0x310>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_GPIO_Init+0x334>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a32      	ldr	r2, [pc, #200]	; (800148c <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_GPIO_Init+0x334>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_GPIO_Init+0x334>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae90 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	041a      	lsls	r2, r3, #16
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43d9      	mvns	r1, r3
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	400b      	ands	r3, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e267      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d075      	beq.n	8001632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001546:	4b88      	ldr	r3, [pc, #544]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b04      	cmp	r3, #4
 8001550:	d00c      	beq.n	800156c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b85      	ldr	r3, [pc, #532]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155a:	2b08      	cmp	r3, #8
 800155c:	d112      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155e:	4b82      	ldr	r3, [pc, #520]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800156a:	d10b      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	4b7e      	ldr	r3, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d05b      	beq.n	8001630 <HAL_RCC_OscConfig+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d157      	bne.n	8001630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e242      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x74>
 800158e:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a75      	ldr	r2, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6f      	ldr	r2, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6c      	ldr	r2, [pc, #432]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 80015c0:	4b69      	ldr	r3, [pc, #420]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a68      	ldr	r2, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b66      	ldr	r3, [pc, #408]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a65      	ldr	r2, [pc, #404]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fca8 	bl	8000f34 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fca4 	bl	8000f34 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e207      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xc0>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc94 	bl	8000f34 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fc90 	bl	8000f34 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1f3      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0xe8>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x152>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1c7      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4937      	ldr	r1, [pc, #220]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e03a      	b.n	8001706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x244>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169e:	f7ff fc49 	bl	8000f34 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff fc45 	bl	8000f34 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1a8      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4925      	ldr	r1, [pc, #148]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_OscConfig+0x244>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc28 	bl	8000f34 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff fc24 	bl	8000f34 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e187      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d036      	beq.n	8001780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d016      	beq.n	8001748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_RCC_OscConfig+0x248>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fc08 	bl	8000f34 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fc04 	bl	8000f34 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e167      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_OscConfig+0x240>)
 800173c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x200>
 8001746:	e01b      	b.n	8001780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_OscConfig+0x248>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fbf1 	bl	8000f34 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	e00e      	b.n	8001774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fbed 	bl	8000f34 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d907      	bls.n	8001774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e150      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
 8001768:	40023800 	.word	0x40023800
 800176c:	42470000 	.word	0x42470000
 8001770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	4b88      	ldr	r3, [pc, #544]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ea      	bne.n	8001756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 8097 	beq.w	80018bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b81      	ldr	r3, [pc, #516]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a7c      	ldr	r2, [pc, #496]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4b77      	ldr	r3, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x474>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ca:	4b74      	ldr	r3, [pc, #464]	; (800199c <HAL_RCC_OscConfig+0x474>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a73      	ldr	r2, [pc, #460]	; (800199c <HAL_RCC_OscConfig+0x474>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fbad 	bl	8000f34 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7ff fba9 	bl	8000f34 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e10c      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_OscConfig+0x474>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x2ea>
 8001804:	4b64      	ldr	r3, [pc, #400]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	4a63      	ldr	r2, [pc, #396]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	; 0x70
 8001810:	e01c      	b.n	800184c <HAL_RCC_OscConfig+0x324>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x30c>
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a5e      	ldr	r2, [pc, #376]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a5b      	ldr	r2, [pc, #364]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0x324>
 8001834:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
 8001840:	4b55      	ldr	r3, [pc, #340]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001846:	f023 0304 	bic.w	r3, r3, #4
 800184a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d015      	beq.n	8001880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fb6e 	bl	8000f34 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185a:	e00a      	b.n	8001872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185c:	f7ff fb6a 	bl	8000f34 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0cb      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0ee      	beq.n	800185c <HAL_RCC_OscConfig+0x334>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff fb58 	bl	8000f34 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001886:	e00a      	b.n	800189e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001888:	f7ff fb54 	bl	8000f34 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e0b5      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189e:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ee      	bne.n	8001888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	4a38      	ldr	r2, [pc, #224]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a1 	beq.w	8001a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d05c      	beq.n	800198c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d141      	bne.n	800195e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_RCC_OscConfig+0x478>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb28 	bl	8000f34 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fb24 	bl	8000f34 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e087      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	019b      	lsls	r3, r3, #6
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	061b      	lsls	r3, r3, #24
 800192a:	491b      	ldr	r1, [pc, #108]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x478>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fafd 	bl	8000f34 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff faf9 	bl	8000f34 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e05c      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x416>
 800195c:	e054      	b.n	8001a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x478>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fae6 	bl	8000f34 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fae2 	bl	8000f34 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e045      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_OscConfig+0x470>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x444>
 800198a:	e03d      	b.n	8001a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e038      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
 8001998:	40023800 	.word	0x40023800
 800199c:	40007000 	.word	0x40007000
 80019a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_RCC_OscConfig+0x4ec>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d028      	beq.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d121      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019dc:	4293      	cmp	r3, r2
 80019de:	d111      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	3b01      	subs	r3, #1
 80019ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0cc      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d90c      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b65      	ldr	r3, [pc, #404]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0b8      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a6c:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a84:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	494d      	ldr	r1, [pc, #308]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d044      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d119      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e07f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e067      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4934      	ldr	r1, [pc, #208]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff fa14 	bl	8000f34 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff fa10 	bl	8000f34 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e04f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d20c      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e032      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4916      	ldr	r1, [pc, #88]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b9e:	f000 f821 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	5ccb      	ldrb	r3, [r1, r3]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f8b4 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	080049d0 	.word	0x080049d0
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be8:	b090      	sub	sp, #64	; 0x40
 8001bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d00d      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x40>
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	f200 80a1 	bhi.w	8001d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x34>
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c16:	e09b      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c1c:	e09b      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c22:	e098      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c24:	4b4f      	ldr	r3, [pc, #316]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c2e:	4b4d      	ldr	r3, [pc, #308]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d028      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	2200      	movs	r2, #0
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	627a      	str	r2, [r7, #36]	; 0x24
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c50:	fb03 f201 	mul.w	r2, r3, r1
 8001c54:	2300      	movs	r3, #0
 8001c56:	fb00 f303 	mul.w	r3, r0, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a43      	ldr	r2, [pc, #268]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c5e:	fba0 1202 	umull	r1, r2, r0, r2
 8001c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c64:	460a      	mov	r2, r1
 8001c66:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6a:	4413      	add	r3, r2
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c70:	2200      	movs	r2, #0
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	61fa      	str	r2, [r7, #28]
 8001c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c7e:	f7fe faa7 	bl	80001d0 <__aeabi_uldivmod>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4613      	mov	r3, r2
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8a:	e053      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	099b      	lsrs	r3, r3, #6
 8001c92:	2200      	movs	r2, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	617a      	str	r2, [r7, #20]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c9e:	f04f 0b00 	mov.w	fp, #0
 8001ca2:	4652      	mov	r2, sl
 8001ca4:	465b      	mov	r3, fp
 8001ca6:	f04f 0000 	mov.w	r0, #0
 8001caa:	f04f 0100 	mov.w	r1, #0
 8001cae:	0159      	lsls	r1, r3, #5
 8001cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb4:	0150      	lsls	r0, r2, #5
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	ebb2 080a 	subs.w	r8, r2, sl
 8001cbe:	eb63 090b 	sbc.w	r9, r3, fp
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cd6:	ebb2 0408 	subs.w	r4, r2, r8
 8001cda:	eb63 0509 	sbc.w	r5, r3, r9
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	00eb      	lsls	r3, r5, #3
 8001ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cec:	00e2      	lsls	r2, r4, #3
 8001cee:	4614      	mov	r4, r2
 8001cf0:	461d      	mov	r5, r3
 8001cf2:	eb14 030a 	adds.w	r3, r4, sl
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	eb45 030b 	adc.w	r3, r5, fp
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	028b      	lsls	r3, r1, #10
 8001d0e:	4621      	mov	r1, r4
 8001d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d14:	4621      	mov	r1, r4
 8001d16:	028a      	lsls	r2, r1, #10
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	60fa      	str	r2, [r7, #12]
 8001d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d28:	f7fe fa52 	bl	80001d0 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d4e:	e002      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3740      	adds	r7, #64	; 0x40
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	00f42400 	.word	0x00f42400
 8001d6c:	017d7840 	.word	0x017d7840

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d8c:	f7ff fff0 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	0b5b      	lsrs	r3, r3, #13
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	080049e0 	.word	0x080049e0

08001db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	08db      	lsrs	r3, r3, #3
 8001dea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <HAL_RCC_GetClockConfig+0x60>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0207 	and.w	r2, r3, #7
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e041      	b.n	8001eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f839 	bl	8001eb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f000 f9d8 	bl	8002208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d001      	beq.n	8001ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e04e      	b.n	8001f7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d022      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0a:	d01d      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1f      	ldr	r2, [pc, #124]	; (8001f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d018      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d013      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00e      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d004      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0x80>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d111      	bne.n	8001f6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d010      	beq.n	8001f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6a:	e007      	b.n	8001f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40000c00 	.word	0x40000c00
 8001f9c:	40010400 	.word	0x40010400
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40001800 	.word	0x40001800

08001fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d122      	bne.n	8002004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d11b      	bne.n	8002004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0202 	mvn.w	r2, #2
 8001fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8ee 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8001ff0:	e005      	b.n	8001ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8e0 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f8f1 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b04      	cmp	r3, #4
 8002010:	d122      	bne.n	8002058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b04      	cmp	r3, #4
 800201e:	d11b      	bne.n	8002058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0204 	mvn.w	r2, #4
 8002028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8c4 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8002044:	e005      	b.n	8002052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8b6 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8c7 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b08      	cmp	r3, #8
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b08      	cmp	r3, #8
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0208 	mvn.w	r2, #8
 800207c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2204      	movs	r2, #4
 8002082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f89a 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f88c 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f89d 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0210 	mvn.w	r2, #16
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2208      	movs	r2, #8
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f870 	bl	80021cc <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f862 	bl	80021b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f873 	bl	80021e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0201 	mvn.w	r2, #1
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fdbc 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	2b80      	cmp	r3, #128	; 0x80
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	2b80      	cmp	r3, #128	; 0x80
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f902 	bl	800235c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d10e      	bne.n	8002184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	2b40      	cmp	r3, #64	; 0x40
 8002172:	d107      	bne.n	8002184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f838 	bl	80021f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b20      	cmp	r3, #32
 8002190:	d10e      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b20      	cmp	r3, #32
 800219e:	d107      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0220 	mvn.w	r2, #32
 80021a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f8cc 	bl	8002348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a40      	ldr	r2, [pc, #256]	; (800231c <TIM_Base_SetConfig+0x114>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d013      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d00f      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <TIM_Base_SetConfig+0x118>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00b      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3c      	ldr	r2, [pc, #240]	; (8002324 <TIM_Base_SetConfig+0x11c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3b      	ldr	r2, [pc, #236]	; (8002328 <TIM_Base_SetConfig+0x120>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3a      	ldr	r2, [pc, #232]	; (800232c <TIM_Base_SetConfig+0x124>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2f      	ldr	r2, [pc, #188]	; (800231c <TIM_Base_SetConfig+0x114>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d02b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d027      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <TIM_Base_SetConfig+0x118>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d023      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a2b      	ldr	r2, [pc, #172]	; (8002324 <TIM_Base_SetConfig+0x11c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01f      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <TIM_Base_SetConfig+0x120>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <TIM_Base_SetConfig+0x124>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d017      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <TIM_Base_SetConfig+0x128>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a27      	ldr	r2, [pc, #156]	; (8002334 <TIM_Base_SetConfig+0x12c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00f      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <TIM_Base_SetConfig+0x130>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00b      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a25      	ldr	r2, [pc, #148]	; (800233c <TIM_Base_SetConfig+0x134>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d007      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a24      	ldr	r2, [pc, #144]	; (8002340 <TIM_Base_SetConfig+0x138>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d003      	beq.n	80022ba <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a23      	ldr	r2, [pc, #140]	; (8002344 <TIM_Base_SetConfig+0x13c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d108      	bne.n	80022cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <TIM_Base_SetConfig+0x114>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <TIM_Base_SetConfig+0xf8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <TIM_Base_SetConfig+0x124>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d103      	bne.n	8002308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	615a      	str	r2, [r3, #20]
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40010000 	.word	0x40010000
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40010400 	.word	0x40010400
 8002330:	40014000 	.word	0x40014000
 8002334:	40014400 	.word	0x40014400
 8002338:	40014800 	.word	0x40014800
 800233c:	40001800 	.word	0x40001800
 8002340:	40001c00 	.word	0x40001c00
 8002344:	40002000 	.word	0x40002000

08002348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	2b84      	cmp	r3, #132	; 0x84
 8002384:	d005      	beq.n	8002392 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002386:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4413      	add	r3, r2
 800238e:	3303      	adds	r3, #3
 8002390:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80023a4:	f001 f83e 	bl	8003424 <vTaskStartScheduler>
  
  return osOK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}

080023ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80023ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b0:	b089      	sub	sp, #36	; 0x24
 80023b2:	af04      	add	r7, sp, #16
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <osThreadCreate+0x54>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01c      	beq.n	8002402 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685c      	ldr	r4, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681d      	ldr	r5, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691e      	ldr	r6, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ffc8 	bl	8002370 <makeFreeRtosPriority>
 80023e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023ea:	9202      	str	r2, [sp, #8]
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	9100      	str	r1, [sp, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4632      	mov	r2, r6
 80023f4:	4629      	mov	r1, r5
 80023f6:	4620      	mov	r0, r4
 80023f8:	f000 fd2a 	bl	8002e50 <xTaskCreateStatic>
 80023fc:	4603      	mov	r3, r0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e01c      	b.n	800243c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685c      	ldr	r4, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800240e:	b29e      	uxth	r6, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ffaa 	bl	8002370 <makeFreeRtosPriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	9200      	str	r2, [sp, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	4632      	mov	r2, r6
 800242a:	4629      	mov	r1, r5
 800242c:	4620      	mov	r0, r4
 800242e:	f000 fd6c 	bl	8002f0a <xTaskCreate>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800243c:	68fb      	ldr	r3, [r7, #12]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002446 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002446:	b590      	push	{r4, r7, lr}
 8002448:	b085      	sub	sp, #20
 800244a:	af02      	add	r7, sp, #8
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d011      	beq.n	800247c <osMessageCreate+0x36>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2400      	movs	r4, #0
 8002472:	9400      	str	r4, [sp, #0]
 8002474:	f000 f92c 	bl	80026d0 <xQueueGenericCreateStatic>
 8002478:	4603      	mov	r3, r0
 800247a:	e008      	b.n	800248e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	4619      	mov	r1, r3
 8002488:	f000 f99a 	bl	80027c0 <xQueueGenericCreate>
 800248c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}

08002496 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 0208 	add.w	r2, r3, #8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f04f 32ff 	mov.w	r2, #4294967295
 80024ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f103 0208 	add.w	r2, r3, #8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f103 0208 	add.w	r2, r3, #8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	601a      	str	r2, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d103      	bne.n	8002558 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e00c      	b.n	8002572 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3308      	adds	r3, #8
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e002      	b.n	8002566 <vListInsert+0x2e>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d2f6      	bcs.n	8002560 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6892      	ldr	r2, [r2, #8]
 80025c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6852      	ldr	r2, [r2, #4]
 80025ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d103      	bne.n	80025de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	1e5a      	subs	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10a      	bne.n	800262a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800262a:	f001 fe3b 	bl	80042a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	441a      	add	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	3b01      	subs	r3, #1
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	441a      	add	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	22ff      	movs	r2, #255	; 0xff
 800266e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	22ff      	movs	r2, #255	; 0xff
 8002676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d114      	bne.n	80026aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01a      	beq.n	80026be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3310      	adds	r3, #16
 800268c:	4618      	mov	r0, r3
 800268e:	f001 f91b 	bl	80038c8 <xTaskRemoveFromEventList>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <xQueueGenericReset+0xcc>)
 800269a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	e009      	b.n	80026be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3310      	adds	r3, #16
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fef1 	bl	8002496 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3324      	adds	r3, #36	; 0x24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff feec 	bl	8002496 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026be:	f001 fe21 	bl	8004304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	e000ed04 	.word	0xe000ed04

080026d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08e      	sub	sp, #56	; 0x38
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	f383 8811 	msr	BASEPRI, r3
 80026ec:	f3bf 8f6f 	isb	sy
 80026f0:	f3bf 8f4f 	dsb	sy
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026f6:	bf00      	nop
 80026f8:	e7fe      	b.n	80026f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <xQueueGenericCreateStatic+0x52>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <xQueueGenericCreateStatic+0x56>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <xQueueGenericCreateStatic+0x58>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	623b      	str	r3, [r7, #32]
}
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <xQueueGenericCreateStatic+0x7e>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueGenericCreateStatic+0x82>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueGenericCreateStatic+0x84>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	61fb      	str	r3, [r7, #28]
}
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800276e:	2348      	movs	r3, #72	; 0x48
 8002770:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b48      	cmp	r3, #72	; 0x48
 8002776:	d00a      	beq.n	800278e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	61bb      	str	r3, [r7, #24]
}
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800278e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f83f 	bl	8002834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3730      	adds	r7, #48	; 0x30
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	613b      	str	r3, [r7, #16]
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	3348      	adds	r3, #72	; 0x48
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 fe35 	bl	8004468 <pvPortMalloc>
 80027fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d011      	beq.n	800282a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3348      	adds	r3, #72	; 0x48
 800280e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002818:	79fa      	ldrb	r2, [r7, #7]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	4613      	mov	r3, r2
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f805 	bl	8002834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800282a:	69bb      	ldr	r3, [r7, #24]
	}
 800282c:	4618      	mov	r0, r3
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e002      	b.n	8002856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002862:	2101      	movs	r1, #1
 8002864:	69b8      	ldr	r0, [r7, #24]
 8002866:	f7ff fecb 	bl	8002600 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002882:	2300      	movs	r3, #0
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <xQueueGenericSend+0x32>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028a2:	bf00      	nop
 80028a4:	e7fe      	b.n	80028a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d103      	bne.n	80028b4 <xQueueGenericSend+0x40>
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <xQueueGenericSend+0x44>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <xQueueGenericSend+0x46>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <xQueueGenericSend+0x60>
	__asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028d0:	bf00      	nop
 80028d2:	e7fe      	b.n	80028d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d103      	bne.n	80028e2 <xQueueGenericSend+0x6e>
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <xQueueGenericSend+0x72>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <xQueueGenericSend+0x74>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <xQueueGenericSend+0x8e>
	__asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	623b      	str	r3, [r7, #32]
}
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002902:	f001 f99d 	bl	8003c40 <xTaskGetSchedulerState>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <xQueueGenericSend+0x9e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <xQueueGenericSend+0xa2>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <xQueueGenericSend+0xa4>
 8002916:	2300      	movs	r3, #0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <xQueueGenericSend+0xbe>
	__asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	61fb      	str	r3, [r7, #28]
}
 800292e:	bf00      	nop
 8002930:	e7fe      	b.n	8002930 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002932:	f001 fcb7 	bl	80042a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <xQueueGenericSend+0xd4>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d129      	bne.n	800299c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800294e:	f000 f96f 	bl	8002c30 <prvCopyDataToQueue>
 8002952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	3324      	adds	r3, #36	; 0x24
 8002960:	4618      	mov	r0, r3
 8002962:	f000 ffb1 	bl	80038c8 <xTaskRemoveFromEventList>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800296c:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <xQueueGenericSend+0x1f8>)
 800296e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	e00a      	b.n	8002994 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002984:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <xQueueGenericSend+0x1f8>)
 8002986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002994:	f001 fcb6 	bl	8004304 <vPortExitCritical>
				return pdPASS;
 8002998:	2301      	movs	r3, #1
 800299a:	e063      	b.n	8002a64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029a2:	f001 fcaf 	bl	8004304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e05c      	b.n	8002a64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 ffe9 	bl	800398c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029be:	f001 fca1 	bl	8004304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029c2:	f000 fd8f 	bl	80034e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029c6:	f001 fc6d 	bl	80042a4 <vPortEnterCritical>
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d103      	bne.n	80029e0 <xQueueGenericSend+0x16c>
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d103      	bne.n	80029f6 <xQueueGenericSend+0x182>
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029f6:	f001 fc85 	bl	8004304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029fa:	1d3a      	adds	r2, r7, #4
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 ffd8 	bl	80039b8 <xTaskCheckForTimeOut>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d124      	bne.n	8002a58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a10:	f000 fa06 	bl	8002e20 <prvIsQueueFull>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d018      	beq.n	8002a4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	3310      	adds	r3, #16
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 ff2c 	bl	8003880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a2a:	f000 f991 	bl	8002d50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a2e:	f000 fd67 	bl	8003500 <xTaskResumeAll>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f47f af7c 	bne.w	8002932 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <xQueueGenericSend+0x1f8>)
 8002a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	e772      	b.n	8002932 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4e:	f000 f97f 	bl	8002d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a52:	f000 fd55 	bl	8003500 <xTaskResumeAll>
 8002a56:	e76c      	b.n	8002932 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a5a:	f000 f979 	bl	8002d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a5e:	f000 fd4f 	bl	8003500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3738      	adds	r7, #56	; 0x38
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	e000ed04 	.word	0xe000ed04

08002a70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <xQueueReceive+0x30>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	623b      	str	r3, [r7, #32]
}
 8002a9c:	bf00      	nop
 8002a9e:	e7fe      	b.n	8002a9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <xQueueReceive+0x3e>
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <xQueueReceive+0x42>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <xQueueReceive+0x44>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <xQueueReceive+0x5e>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	61fb      	str	r3, [r7, #28]
}
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ace:	f001 f8b7 	bl	8003c40 <xTaskGetSchedulerState>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <xQueueReceive+0x6e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <xQueueReceive+0x72>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <xQueueReceive+0x74>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <xQueueReceive+0x8e>
	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	61bb      	str	r3, [r7, #24]
}
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002afe:	f001 fbd1 	bl	80042a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01f      	beq.n	8002b4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b12:	f000 f8f7 	bl	8002d04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	3310      	adds	r3, #16
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fecc 	bl	80038c8 <xTaskRemoveFromEventList>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <xQueueReceive+0x1bc>)
 8002b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b46:	f001 fbdd 	bl	8004304 <vPortExitCritical>
				return pdPASS;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e069      	b.n	8002c22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d103      	bne.n	8002b5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b54:	f001 fbd6 	bl	8004304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e062      	b.n	8002c22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 ff10 	bl	800398c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b70:	f001 fbc8 	bl	8004304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b74:	f000 fcb6 	bl	80034e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b78:	f001 fb94 	bl	80042a4 <vPortEnterCritical>
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d103      	bne.n	8002b92 <xQueueReceive+0x122>
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d103      	bne.n	8002ba8 <xQueueReceive+0x138>
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba8:	f001 fbac 	bl	8004304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bac:	1d3a      	adds	r2, r7, #4
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 feff 	bl	80039b8 <xTaskCheckForTimeOut>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d123      	bne.n	8002c08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc2:	f000 f917 	bl	8002df4 <prvIsQueueEmpty>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d017      	beq.n	8002bfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	3324      	adds	r3, #36	; 0x24
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fe53 	bl	8003880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bdc:	f000 f8b8 	bl	8002d50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002be0:	f000 fc8e 	bl	8003500 <xTaskResumeAll>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d189      	bne.n	8002afe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <xQueueReceive+0x1bc>)
 8002bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	e780      	b.n	8002afe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bfe:	f000 f8a7 	bl	8002d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c02:	f000 fc7d 	bl	8003500 <xTaskResumeAll>
 8002c06:	e77a      	b.n	8002afe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0a:	f000 f8a1 	bl	8002d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c0e:	f000 fc77 	bl	8003500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c14:	f000 f8ee 	bl	8002df4 <prvIsQueueEmpty>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f43f af6f 	beq.w	8002afe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3730      	adds	r7, #48	; 0x30
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	e000ed04 	.word	0xe000ed04

08002c30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d14d      	bne.n	8002cf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 f80e 	bl	8003c7c <xTaskPriorityDisinherit>
 8002c60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e043      	b.n	8002cf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d119      	bne.n	8002ca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6858      	ldr	r0, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	f001 fe02 	bl	8004884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	441a      	add	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d32b      	bcc.n	8002cf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	e026      	b.n	8002cf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68d8      	ldr	r0, [r3, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	461a      	mov	r2, r3
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	f001 fde8 	bl	8004884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	441a      	add	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d207      	bcs.n	8002ce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	425b      	negs	r3, r3
 8002cda:	441a      	add	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d105      	bne.n	8002cf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002cfa:	697b      	ldr	r3, [r7, #20]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d018      	beq.n	8002d48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d303      	bcc.n	8002d38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68d9      	ldr	r1, [r3, #12]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	461a      	mov	r2, r3
 8002d42:	6838      	ldr	r0, [r7, #0]
 8002d44:	f001 fd9e 	bl	8004884 <memcpy>
	}
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d58:	f001 faa4 	bl	80042a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d64:	e011      	b.n	8002d8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3324      	adds	r3, #36	; 0x24
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fda8 	bl	80038c8 <xTaskRemoveFromEventList>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d7e:	f000 fe7d 	bl	8003a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	dce9      	bgt.n	8002d66 <prvUnlockQueue+0x16>
 8002d92:	e000      	b.n	8002d96 <prvUnlockQueue+0x46>
					break;
 8002d94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	22ff      	movs	r2, #255	; 0xff
 8002d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d9e:	f001 fab1 	bl	8004304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002da2:	f001 fa7f 	bl	80042a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dae:	e011      	b.n	8002dd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3310      	adds	r3, #16
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fd83 	bl	80038c8 <xTaskRemoveFromEventList>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dc8:	f000 fe58 	bl	8003a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dcc:	7bbb      	ldrb	r3, [r7, #14]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dce9      	bgt.n	8002db0 <prvUnlockQueue+0x60>
 8002ddc:	e000      	b.n	8002de0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	22ff      	movs	r2, #255	; 0xff
 8002de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002de8:	f001 fa8c 	bl	8004304 <vPortExitCritical>
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dfc:	f001 fa52 	bl	80042a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	e001      	b.n	8002e12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e12:	f001 fa77 	bl	8004304 <vPortExitCritical>

	return xReturn;
 8002e16:	68fb      	ldr	r3, [r7, #12]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e28:	f001 fa3c 	bl	80042a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d102      	bne.n	8002e3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e001      	b.n	8002e42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e42:	f001 fa5f 	bl	8004304 <vPortExitCritical>

	return xReturn;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08e      	sub	sp, #56	; 0x38
 8002e54:	af04      	add	r7, sp, #16
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	623b      	str	r3, [r7, #32]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	61fb      	str	r3, [r7, #28]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e96:	2354      	movs	r3, #84	; 0x54
 8002e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b54      	cmp	r3, #84	; 0x54
 8002e9e:	d00a      	beq.n	8002eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	61bb      	str	r3, [r7, #24]
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01e      	beq.n	8002efc <xTaskCreateStatic+0xac>
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01b      	beq.n	8002efc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9303      	str	r3, [sp, #12]
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	9302      	str	r3, [sp, #8]
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f850 	bl	8002f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ef6:	f000 f8d5 	bl	80030a4 <prvAddNewTaskToReadyList>
 8002efa:	e001      	b.n	8002f00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f00:	697b      	ldr	r3, [r7, #20]
	}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3728      	adds	r7, #40	; 0x28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b08c      	sub	sp, #48	; 0x30
 8002f0e:	af04      	add	r7, sp, #16
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 faa2 	bl	8004468 <pvPortMalloc>
 8002f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f2c:	2054      	movs	r0, #84	; 0x54
 8002f2e:	f001 fa9b 	bl	8004468 <pvPortMalloc>
 8002f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f40:	e005      	b.n	8002f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f001 fb5c 	bl	8004600 <vPortFree>
 8002f48:	e001      	b.n	8002f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d017      	beq.n	8002f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9303      	str	r3, [sp, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	9301      	str	r3, [sp, #4]
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f80e 	bl	8002f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f78:	69f8      	ldr	r0, [r7, #28]
 8002f7a:	f000 f893 	bl	80030a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e002      	b.n	8002f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fac:	3b01      	subs	r3, #1
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <prvInitialiseNewTask+0x48>
	__asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	617b      	str	r3, [r7, #20]
}
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01f      	beq.n	8003022 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	e012      	b.n	800300e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	7819      	ldrb	r1, [r3, #0]
 8002ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3334      	adds	r3, #52	; 0x34
 8002ff8:	460a      	mov	r2, r1
 8002ffa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2b0f      	cmp	r3, #15
 8003012:	d9e9      	bls.n	8002fe8 <prvInitialiseNewTask+0x54>
 8003014:	e000      	b.n	8003018 <prvInitialiseNewTask+0x84>
			{
				break;
 8003016:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003020:	e003      	b.n	800302a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	2b06      	cmp	r3, #6
 800302e:	d901      	bls.n	8003034 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003030:	2306      	movs	r3, #6
 8003032:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	2200      	movs	r2, #0
 8003044:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	3304      	adds	r3, #4
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fa43 	bl	80024d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	3318      	adds	r3, #24
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fa3e 	bl	80024d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	f1c3 0207 	rsb	r2, r3, #7
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	2200      	movs	r2, #0
 8003074:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	68f9      	ldr	r1, [r7, #12]
 8003082:	69b8      	ldr	r0, [r7, #24]
 8003084:	f000 ffe4 	bl	8004050 <pxPortInitialiseStack>
 8003088:	4602      	mov	r2, r0
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800309a:	bf00      	nop
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030ac:	f001 f8fa 	bl	80042a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <prvAddNewTaskToReadyList+0xb8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a29      	ldr	r2, [pc, #164]	; (800315c <prvAddNewTaskToReadyList+0xb8>)
 80030b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <prvAddNewTaskToReadyList+0xbc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030c2:	4a27      	ldr	r2, [pc, #156]	; (8003160 <prvAddNewTaskToReadyList+0xbc>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <prvAddNewTaskToReadyList+0xb8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d110      	bne.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030d0:	f000 fcf8 	bl	8003ac4 <prvInitialiseTaskLists>
 80030d4:	e00d      	b.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <prvAddNewTaskToReadyList+0xc0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <prvAddNewTaskToReadyList+0xbc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d802      	bhi.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030ec:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <prvAddNewTaskToReadyList+0xbc>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <prvAddNewTaskToReadyList+0xc4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <prvAddNewTaskToReadyList+0xc4>)
 80030fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <prvAddNewTaskToReadyList+0xc8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <prvAddNewTaskToReadyList+0xc8>)
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <prvAddNewTaskToReadyList+0xcc>)
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f7ff f9e3 	bl	80024f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800312a:	f001 f8eb 	bl	8004304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <prvAddNewTaskToReadyList+0xc0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00e      	beq.n	8003154 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <prvAddNewTaskToReadyList+0xbc>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <prvAddNewTaskToReadyList+0xd0>)
 8003146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	200003e8 	.word	0x200003e8
 8003160:	200002e8 	.word	0x200002e8
 8003164:	200003f4 	.word	0x200003f4
 8003168:	20000404 	.word	0x20000404
 800316c:	200003f0 	.word	0x200003f0
 8003170:	200002ec 	.word	0x200002ec
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <vTaskDelay+0x60>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <vTaskDelay+0x30>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	60bb      	str	r3, [r7, #8]
}
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031a8:	f000 f99c 	bl	80034e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031ac:	2100      	movs	r1, #0
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fee8 	bl	8003f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031b4:	f000 f9a4 	bl	8003500 <xTaskResumeAll>
 80031b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <vTaskDelay+0x64>)
 80031c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000410 	.word	0x20000410
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80031e8:	f001 f85c 	bl	80042a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <vTaskSuspend+0x18>
 80031f2:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <vTaskSuspend+0x104>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	e000      	b.n	80031fa <vTaskSuspend+0x1a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3304      	adds	r3, #4
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff f9d2 	bl	80025aa <uxListRemove>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d115      	bne.n	8003238 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	4935      	ldr	r1, [pc, #212]	; (80032e8 <vTaskSuspend+0x108>)
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <vTaskSuspend+0x58>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	2201      	movs	r2, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43da      	mvns	r2, r3
 800322e:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <vTaskSuspend+0x10c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4013      	ands	r3, r2
 8003234:	4a2d      	ldr	r2, [pc, #180]	; (80032ec <vTaskSuspend+0x10c>)
 8003236:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d004      	beq.n	800324a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3318      	adds	r3, #24
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff f9b0 	bl	80025aa <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4827      	ldr	r0, [pc, #156]	; (80032f0 <vTaskSuspend+0x110>)
 8003252:	f7ff f94d 	bl	80024f0 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d103      	bne.n	800326a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800326a:	f001 f84b 	bl	8004304 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <vTaskSuspend+0x114>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003276:	f001 f815 	bl	80042a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800327a:	f000 fcc1 	bl	8003c00 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800327e:	f001 f841 	bl	8004304 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <vTaskSuspend+0x104>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	429a      	cmp	r2, r3
 800328a:	d127      	bne.n	80032dc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <vTaskSuspend+0x114>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d017      	beq.n	80032c4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <vTaskSuspend+0x118>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <vTaskSuspend+0xd2>
	__asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60bb      	str	r3, [r7, #8]
}
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <vTaskSuspend+0x11c>)
 80032b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032c2:	e00b      	b.n	80032dc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <vTaskSuspend+0x110>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <vTaskSuspend+0x120>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d103      	bne.n	80032d8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <vTaskSuspend+0x104>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
	}
 80032d6:	e001      	b.n	80032dc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80032d8:	f000 fa76 	bl	80037c8 <vTaskSwitchContext>
	}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200002e8 	.word	0x200002e8
 80032e8:	200002ec 	.word	0x200002ec
 80032ec:	200003f0 	.word	0x200003f0
 80032f0:	200003d4 	.word	0x200003d4
 80032f4:	200003f4 	.word	0x200003f4
 80032f8:	20000410 	.word	0x20000410
 80032fc:	e000ed04 	.word	0xe000ed04
 8003300:	200003e8 	.word	0x200003e8

08003304 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60fb      	str	r3, [r7, #12]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <prvTaskIsTaskSuspended+0x5c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10a      	bne.n	8003350 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	4a09      	ldr	r2, [pc, #36]	; (8003364 <prvTaskIsTaskSuspended+0x60>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d005      	beq.n	8003350 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003350:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003352:	4618      	mov	r0, r3
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	200003d4 	.word	0x200003d4
 8003364:	200003a8 	.word	0x200003a8

08003368 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <vTaskResume+0x28>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	60bb      	str	r3, [r7, #8]
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <vTaskResume+0xac>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	429a      	cmp	r2, r3
 8003398:	d037      	beq.n	800340a <vTaskResume+0xa2>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d034      	beq.n	800340a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80033a0:	f000 ff80 	bl	80042a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff ffad 	bl	8003304 <prvTaskIsTaskSuspended>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d02a      	beq.n	8003406 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff f8f8 	bl	80025aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <vTaskResume+0xb0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	4a13      	ldr	r2, [pc, #76]	; (8003418 <vTaskResume+0xb0>)
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4a10      	ldr	r2, [pc, #64]	; (800341c <vTaskResume+0xb4>)
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3304      	adds	r3, #4
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7ff f884 	bl	80024f0 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <vTaskResume+0xac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d307      	bcc.n	8003406 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <vTaskResume+0xb8>)
 80033f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003406:	f000 ff7d 	bl	8004304 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200002e8 	.word	0x200002e8
 8003418:	200003f0 	.word	0x200003f0
 800341c:	200002ec 	.word	0x200002ec
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003432:	463a      	mov	r2, r7
 8003434:	1d39      	adds	r1, r7, #4
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f84a 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	9202      	str	r2, [sp, #8]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	460a      	mov	r2, r1
 8003452:	491e      	ldr	r1, [pc, #120]	; (80034cc <vTaskStartScheduler+0xa8>)
 8003454:	481e      	ldr	r0, [pc, #120]	; (80034d0 <vTaskStartScheduler+0xac>)
 8003456:	f7ff fcfb 	bl	8002e50 <xTaskCreateStatic>
 800345a:	4603      	mov	r3, r0
 800345c:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <vTaskStartScheduler+0xb0>)
 800345e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003460:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <vTaskStartScheduler+0xb0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e001      	b.n	8003472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d116      	bne.n	80034a6 <vTaskStartScheduler+0x82>
	__asm volatile
 8003478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347c:	f383 8811 	msr	BASEPRI, r3
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	f3bf 8f4f 	dsb	sy
 8003488:	613b      	str	r3, [r7, #16]
}
 800348a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <vTaskStartScheduler+0xb4>)
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003494:	4b11      	ldr	r3, [pc, #68]	; (80034dc <vTaskStartScheduler+0xb8>)
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <vTaskStartScheduler+0xbc>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034a0:	f000 fe5e 	bl	8004160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034a4:	e00e      	b.n	80034c4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d10a      	bne.n	80034c4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60fb      	str	r3, [r7, #12]
}
 80034c0:	bf00      	nop
 80034c2:	e7fe      	b.n	80034c2 <vTaskStartScheduler+0x9e>
}
 80034c4:	bf00      	nop
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	080049c8 	.word	0x080049c8
 80034d0:	08003a95 	.word	0x08003a95
 80034d4:	2000040c 	.word	0x2000040c
 80034d8:	20000408 	.word	0x20000408
 80034dc:	200003f4 	.word	0x200003f4
 80034e0:	200003ec 	.word	0x200003ec

080034e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <vTaskSuspendAll+0x18>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a03      	ldr	r2, [pc, #12]	; (80034fc <vTaskSuspendAll+0x18>)
 80034f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	20000410 	.word	0x20000410

08003500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <xTaskResumeAll+0x114>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <xTaskResumeAll+0x2c>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	603b      	str	r3, [r7, #0]
}
 8003528:	bf00      	nop
 800352a:	e7fe      	b.n	800352a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800352c:	f000 feba 	bl	80042a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <xTaskResumeAll+0x114>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3b01      	subs	r3, #1
 8003536:	4a37      	ldr	r2, [pc, #220]	; (8003614 <xTaskResumeAll+0x114>)
 8003538:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <xTaskResumeAll+0x114>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d161      	bne.n	8003606 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003542:	4b35      	ldr	r3, [pc, #212]	; (8003618 <xTaskResumeAll+0x118>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d05d      	beq.n	8003606 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800354a:	e02e      	b.n	80035aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354c:	4b33      	ldr	r3, [pc, #204]	; (800361c <xTaskResumeAll+0x11c>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3318      	adds	r3, #24
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f826 	bl	80025aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3304      	adds	r3, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff f821 	bl	80025aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	2201      	movs	r2, #1
 800356e:	409a      	lsls	r2, r3
 8003570:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <xTaskResumeAll+0x120>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <xTaskResumeAll+0x120>)
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a27      	ldr	r2, [pc, #156]	; (8003624 <xTaskResumeAll+0x124>)
 8003588:	441a      	add	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f7fe ffad 	bl	80024f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	4b23      	ldr	r3, [pc, #140]	; (8003628 <xTaskResumeAll+0x128>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035a4:	4b21      	ldr	r3, [pc, #132]	; (800362c <xTaskResumeAll+0x12c>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <xTaskResumeAll+0x11c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1cc      	bne.n	800354c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035b8:	f000 fb22 	bl	8003c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <xTaskResumeAll+0x130>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035c8:	f000 f846 	bl	8003658 <xTaskIncrementTick>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <xTaskResumeAll+0x12c>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f1      	bne.n	80035c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <xTaskResumeAll+0x130>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <xTaskResumeAll+0x12c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <xTaskResumeAll+0x134>)
 80035f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003606:	f000 fe7d 	bl	8004304 <vPortExitCritical>

	return xAlreadyYielded;
 800360a:	68bb      	ldr	r3, [r7, #8]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000410 	.word	0x20000410
 8003618:	200003e8 	.word	0x200003e8
 800361c:	200003a8 	.word	0x200003a8
 8003620:	200003f0 	.word	0x200003f0
 8003624:	200002ec 	.word	0x200002ec
 8003628:	200002e8 	.word	0x200002e8
 800362c:	200003fc 	.word	0x200003fc
 8003630:	200003f8 	.word	0x200003f8
 8003634:	e000ed04 	.word	0xe000ed04

08003638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <xTaskGetTickCount+0x1c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	200003ec 	.word	0x200003ec

08003658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003662:	4b4e      	ldr	r3, [pc, #312]	; (800379c <xTaskIncrementTick+0x144>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 808e 	bne.w	8003788 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800366c:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <xTaskIncrementTick+0x148>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003674:	4a4a      	ldr	r2, [pc, #296]	; (80037a0 <xTaskIncrementTick+0x148>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d120      	bne.n	80036c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <xTaskIncrementTick+0x14c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	603b      	str	r3, [r7, #0]
}
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <xTaskIncrementTick+0x46>
 80036a0:	4b40      	ldr	r3, [pc, #256]	; (80037a4 <xTaskIncrementTick+0x14c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <xTaskIncrementTick+0x150>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3e      	ldr	r2, [pc, #248]	; (80037a4 <xTaskIncrementTick+0x14c>)
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4a3e      	ldr	r2, [pc, #248]	; (80037a8 <xTaskIncrementTick+0x150>)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	4b3d      	ldr	r3, [pc, #244]	; (80037ac <xTaskIncrementTick+0x154>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <xTaskIncrementTick+0x154>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	f000 fa9f 	bl	8003c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <xTaskIncrementTick+0x158>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d348      	bcc.n	800375e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <xTaskIncrementTick+0x14c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <xTaskIncrementTick+0x158>)
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	601a      	str	r2, [r3, #0]
					break;
 80036de:	e03e      	b.n	800375e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e0:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <xTaskIncrementTick+0x14c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d203      	bcs.n	8003700 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036f8:	4a2d      	ldr	r2, [pc, #180]	; (80037b0 <xTaskIncrementTick+0x158>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036fe:	e02e      	b.n	800375e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3304      	adds	r3, #4
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe ff50 	bl	80025aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3318      	adds	r3, #24
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe ff47 	bl	80025aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	2201      	movs	r2, #1
 8003722:	409a      	lsls	r2, r3
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <xTaskIncrementTick+0x15c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <xTaskIncrementTick+0x15c>)
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <xTaskIncrementTick+0x160>)
 800373c:	441a      	add	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3304      	adds	r3, #4
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f7fe fed3 	bl	80024f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <xTaskIncrementTick+0x164>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	429a      	cmp	r2, r3
 8003756:	d3b9      	bcc.n	80036cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800375c:	e7b6      	b.n	80036cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800375e:	4b17      	ldr	r3, [pc, #92]	; (80037bc <xTaskIncrementTick+0x164>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	4914      	ldr	r1, [pc, #80]	; (80037b8 <xTaskIncrementTick+0x160>)
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d901      	bls.n	800377a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003776:	2301      	movs	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <xTaskIncrementTick+0x168>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003782:	2301      	movs	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e004      	b.n	8003792 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <xTaskIncrementTick+0x16c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <xTaskIncrementTick+0x16c>)
 8003790:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003792:	697b      	ldr	r3, [r7, #20]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000410 	.word	0x20000410
 80037a0:	200003ec 	.word	0x200003ec
 80037a4:	200003a0 	.word	0x200003a0
 80037a8:	200003a4 	.word	0x200003a4
 80037ac:	20000400 	.word	0x20000400
 80037b0:	20000408 	.word	0x20000408
 80037b4:	200003f0 	.word	0x200003f0
 80037b8:	200002ec 	.word	0x200002ec
 80037bc:	200002e8 	.word	0x200002e8
 80037c0:	200003fc 	.word	0x200003fc
 80037c4:	200003f8 	.word	0x200003f8

080037c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037ce:	4b27      	ldr	r3, [pc, #156]	; (800386c <vTaskSwitchContext+0xa4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037d6:	4b26      	ldr	r3, [pc, #152]	; (8003870 <vTaskSwitchContext+0xa8>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037dc:	e03f      	b.n	800385e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <vTaskSwitchContext+0xa8>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <vTaskSwitchContext+0xac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	fab3 f383 	clz	r3, r3
 80037f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037f2:	7afb      	ldrb	r3, [r7, #11]
 80037f4:	f1c3 031f 	rsb	r3, r3, #31
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	491f      	ldr	r1, [pc, #124]	; (8003878 <vTaskSwitchContext+0xb0>)
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <vTaskSwitchContext+0x5c>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	607b      	str	r3, [r7, #4]
}
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <vTaskSwitchContext+0x5a>
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4a12      	ldr	r2, [pc, #72]	; (8003878 <vTaskSwitchContext+0xb0>)
 8003830:	4413      	add	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3308      	adds	r3, #8
 8003846:	429a      	cmp	r2, r3
 8003848:	d104      	bne.n	8003854 <vTaskSwitchContext+0x8c>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4a08      	ldr	r2, [pc, #32]	; (800387c <vTaskSwitchContext+0xb4>)
 800385c:	6013      	str	r3, [r2, #0]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000410 	.word	0x20000410
 8003870:	200003fc 	.word	0x200003fc
 8003874:	200003f0 	.word	0x200003f0
 8003878:	200002ec 	.word	0x200002ec
 800387c:	200002e8 	.word	0x200002e8

08003880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	60fb      	str	r3, [r7, #12]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038a6:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <vTaskPlaceOnEventList+0x44>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3318      	adds	r3, #24
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe fe42 	bl	8002538 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038b4:	2101      	movs	r1, #1
 80038b6:	6838      	ldr	r0, [r7, #0]
 80038b8:	f000 fb64 	bl	8003f84 <prvAddCurrentTaskToDelayedList>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	200002e8 	.word	0x200002e8

080038c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60fb      	str	r3, [r7, #12]
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3318      	adds	r3, #24
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fe56 	bl	80025aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <xTaskRemoveFromEventList+0xac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d11c      	bne.n	8003940 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3304      	adds	r3, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fe4d 	bl	80025aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	4b17      	ldr	r3, [pc, #92]	; (8003978 <xTaskRemoveFromEventList+0xb0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	4a16      	ldr	r2, [pc, #88]	; (8003978 <xTaskRemoveFromEventList+0xb0>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4a13      	ldr	r2, [pc, #76]	; (800397c <xTaskRemoveFromEventList+0xb4>)
 8003930:	441a      	add	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fe fdd9 	bl	80024f0 <vListInsertEnd>
 800393e:	e005      	b.n	800394c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3318      	adds	r3, #24
 8003944:	4619      	mov	r1, r3
 8003946:	480e      	ldr	r0, [pc, #56]	; (8003980 <xTaskRemoveFromEventList+0xb8>)
 8003948:	f7fe fdd2 	bl	80024f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <xTaskRemoveFromEventList+0xbc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003956:	429a      	cmp	r2, r3
 8003958:	d905      	bls.n	8003966 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800395a:	2301      	movs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <xTaskRemoveFromEventList+0xc0>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e001      	b.n	800396a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800396a:	697b      	ldr	r3, [r7, #20]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000410 	.word	0x20000410
 8003978:	200003f0 	.word	0x200003f0
 800397c:	200002ec 	.word	0x200002ec
 8003980:	200003a8 	.word	0x200003a8
 8003984:	200002e8 	.word	0x200002e8
 8003988:	200003fc 	.word	0x200003fc

0800398c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <vTaskInternalSetTimeOutState+0x24>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <vTaskInternalSetTimeOutState+0x28>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20000400 	.word	0x20000400
 80039b4:	200003ec 	.word	0x200003ec

080039b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	613b      	str	r3, [r7, #16]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	60fb      	str	r3, [r7, #12]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80039fa:	f000 fc53 	bl	80042a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <xTaskCheckForTimeOut+0xbc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d102      	bne.n	8003a1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e023      	b.n	8003a66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <xTaskCheckForTimeOut+0xc0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d007      	beq.n	8003a3a <xTaskCheckForTimeOut+0x82>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d302      	bcc.n	8003a3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a34:	2301      	movs	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	e015      	b.n	8003a66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d20b      	bcs.n	8003a5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff9b 	bl	800398c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	e004      	b.n	8003a66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a66:	f000 fc4d 	bl	8004304 <vPortExitCritical>

	return xReturn;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3720      	adds	r7, #32
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200003ec 	.word	0x200003ec
 8003a78:	20000400 	.word	0x20000400

08003a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <vTaskMissedYield+0x14>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	200003fc 	.word	0x200003fc

08003a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a9c:	f000 f852 	bl	8003b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvIdleTask+0x28>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d9f9      	bls.n	8003a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <prvIdleTask+0x2c>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ab8:	e7f0      	b.n	8003a9c <prvIdleTask+0x8>
 8003aba:	bf00      	nop
 8003abc:	200002ec 	.word	0x200002ec
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aca:	2300      	movs	r3, #0
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	e00c      	b.n	8003aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <prvInitialiseTaskLists+0x60>)
 8003adc:	4413      	add	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fcd9 	bl	8002496 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d9ef      	bls.n	8003ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003af0:	480d      	ldr	r0, [pc, #52]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003af2:	f7fe fcd0 	bl	8002496 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003af6:	480d      	ldr	r0, [pc, #52]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003af8:	f7fe fccd 	bl	8002496 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003afc:	480c      	ldr	r0, [pc, #48]	; (8003b30 <prvInitialiseTaskLists+0x6c>)
 8003afe:	f7fe fcca 	bl	8002496 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <prvInitialiseTaskLists+0x70>)
 8003b04:	f7fe fcc7 	bl	8002496 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b08:	480b      	ldr	r0, [pc, #44]	; (8003b38 <prvInitialiseTaskLists+0x74>)
 8003b0a:	f7fe fcc4 	bl	8002496 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <prvInitialiseTaskLists+0x78>)
 8003b10:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <prvInitialiseTaskLists+0x64>)
 8003b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <prvInitialiseTaskLists+0x7c>)
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <prvInitialiseTaskLists+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200002ec 	.word	0x200002ec
 8003b28:	20000378 	.word	0x20000378
 8003b2c:	2000038c 	.word	0x2000038c
 8003b30:	200003a8 	.word	0x200003a8
 8003b34:	200003bc 	.word	0x200003bc
 8003b38:	200003d4 	.word	0x200003d4
 8003b3c:	200003a0 	.word	0x200003a0
 8003b40:	200003a4 	.word	0x200003a4

08003b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b4a:	e019      	b.n	8003b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b4c:	f000 fbaa 	bl	80042a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <prvCheckTasksWaitingTermination+0x50>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fd24 	bl	80025aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <prvCheckTasksWaitingTermination+0x54>)
 8003b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b76:	f000 fbc5 	bl	8004304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f810 	bl	8003ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <prvCheckTasksWaitingTermination+0x58>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e1      	bne.n	8003b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200003bc 	.word	0x200003bc
 8003b98:	200003e8 	.word	0x200003e8
 8003b9c:	200003d0 	.word	0x200003d0

08003ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 fd22 	bl	8004600 <vPortFree>
				vPortFree( pxTCB );
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fd1f 	bl	8004600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bc2:	e018      	b.n	8003bf6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d103      	bne.n	8003bd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fd16 	bl	8004600 <vPortFree>
	}
 8003bd4:	e00f      	b.n	8003bf6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d00a      	beq.n	8003bf6 <prvDeleteTCB+0x56>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	60fb      	str	r3, [r7, #12]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <prvDeleteTCB+0x54>
	}
 8003bf6:	bf00      	nop
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <prvResetNextTaskUnblockTime+0x38>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvResetNextTaskUnblockTime+0x3c>)
 8003c12:	f04f 32ff 	mov.w	r2, #4294967295
 8003c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c18:	e008      	b.n	8003c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <prvResetNextTaskUnblockTime+0x38>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <prvResetNextTaskUnblockTime+0x3c>)
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	200003a0 	.word	0x200003a0
 8003c3c:	20000408 	.word	0x20000408

08003c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <xTaskGetSchedulerState+0x34>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	e008      	b.n	8003c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <xTaskGetSchedulerState+0x38>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d102      	bne.n	8003c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	e001      	b.n	8003c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c66:	687b      	ldr	r3, [r7, #4]
	}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	200003f4 	.word	0x200003f4
 8003c78:	20000410 	.word	0x20000410

08003c7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06e      	beq.n	8003d70 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <xTaskPriorityDisinherit+0x100>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d00a      	beq.n	8003cb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d044      	beq.n	8003d70 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d140      	bne.n	8003d70 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fc59 	bl	80025aa <uxListRemove>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d115      	bne.n	8003d2a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	491f      	ldr	r1, [pc, #124]	; (8003d80 <xTaskPriorityDisinherit+0x104>)
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <xTaskPriorityDisinherit+0xae>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4013      	ands	r3, r2
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d28:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	f1c3 0207 	rsb	r2, r3, #7
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	2201      	movs	r2, #1
 8003d44:	409a      	lsls	r2, r3
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	; (8003d84 <xTaskPriorityDisinherit+0x108>)
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <xTaskPriorityDisinherit+0x104>)
 8003d5e:	441a      	add	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fe fbc2 	bl	80024f0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d70:	697b      	ldr	r3, [r7, #20]
	}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200002e8 	.word	0x200002e8
 8003d80:	200002ec 	.word	0x200002ec
 8003d84:	200003f0 	.word	0x200003f0

08003d88 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8003d92:	f000 fa87 	bl	80042a4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8003d96:	4b1e      	ldr	r3, [pc, #120]	; (8003e10 <ulTaskNotifyTake+0x88>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d113      	bne.n	8003dc8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003da0:	4b1b      	ldr	r3, [pc, #108]	; (8003e10 <ulTaskNotifyTake+0x88>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003db0:	2101      	movs	r1, #1
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f000 f8e6 	bl	8003f84 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <ulTaskNotifyTake+0x8c>)
 8003dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003dc8:	f000 fa9c 	bl	8004304 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003dcc:	f000 fa6a 	bl	80042a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <ulTaskNotifyTake+0x88>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <ulTaskNotifyTake+0x88>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dec:	e004      	b.n	8003df8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <ulTaskNotifyTake+0x88>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	3a01      	subs	r2, #1
 8003df6:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <ulTaskNotifyTake+0x88>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8003e02:	f000 fa7f 	bl	8004304 <vPortExitCritical>

		return ulReturn;
 8003e06:	68fb      	ldr	r3, [r7, #12]
	}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	200002e8 	.word	0x200002e8
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	4613      	mov	r3, r2
 8003e26:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xTaskGenericNotify+0x30>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	61bb      	str	r3, [r7, #24]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003e4c:	f000 fa2a 	bl	80042a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e64:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d828      	bhi.n	8003ec6 <xTaskGenericNotify+0xae>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <xTaskGenericNotify+0x64>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003ee7 	.word	0x08003ee7
 8003e80:	08003e91 	.word	0x08003e91
 8003e84:	08003e9f 	.word	0x08003e9f
 8003e88:	08003eab 	.word	0x08003eab
 8003e8c:	08003eb3 	.word	0x08003eb3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003e9c:	e026      	b.n	8003eec <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003ea8:	e020      	b.n	8003eec <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8003eb0:	e01c      	b.n	8003eec <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003eb2:	7ffb      	ldrb	r3, [r7, #31]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d003      	beq.n	8003ec0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003ebe:	e015      	b.n	8003eec <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8003ec4:	e012      	b.n	8003eec <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ece:	d00c      	beq.n	8003eea <xTaskGenericNotify+0xd2>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	617b      	str	r3, [r7, #20]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xTaskGenericNotify+0xcc>
					break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <xTaskGenericNotify+0xd4>

					break;
 8003eea:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003eec:	7ffb      	ldrb	r3, [r7, #31]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d139      	bne.n	8003f66 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fb57 	bl	80025aa <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	2201      	movs	r2, #1
 8003f02:	409a      	lsls	r2, r3
 8003f04:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <xTaskGenericNotify+0x15c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <xTaskGenericNotify+0x15c>)
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <xTaskGenericNotify+0x160>)
 8003f1c:	441a      	add	r2, r3
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe fae3 	bl	80024f0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <xTaskGenericNotify+0x130>
	__asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	613b      	str	r3, [r7, #16]
}
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <xTaskGenericNotify+0x164>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d907      	bls.n	8003f66 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003f56:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <xTaskGenericNotify+0x168>)
 8003f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003f66:	f000 f9cd 	bl	8004304 <vPortExitCritical>

		return xReturn;
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3728      	adds	r7, #40	; 0x28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200003f0 	.word	0x200003f0
 8003f78:	200002ec 	.word	0x200002ec
 8003f7c:	200002e8 	.word	0x200002e8
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f94:	4b28      	ldr	r3, [pc, #160]	; (8004038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fb05 	bl	80025aa <uxListRemove>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	2201      	movs	r2, #1
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	4b21      	ldr	r3, [pc, #132]	; (800403c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	4a20      	ldr	r2, [pc, #128]	; (800403c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d10a      	bne.n	8003fdc <prvAddCurrentTaskToDelayedList+0x58>
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	481a      	ldr	r0, [pc, #104]	; (8004040 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fd6:	f7fe fa8b 	bl	80024f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fda:	e026      	b.n	800402a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d209      	bcs.n	8004008 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7fe fa99 	bl	8002538 <vListInsert>
}
 8004006:	e010      	b.n	800402a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <prvAddCurrentTaskToDelayedList+0xc4>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <prvAddCurrentTaskToDelayedList+0xb4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7fe fa8f 	bl	8002538 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <prvAddCurrentTaskToDelayedList+0xc8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	d202      	bcs.n	800402a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004024:	4a09      	ldr	r2, [pc, #36]	; (800404c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200003ec 	.word	0x200003ec
 8004038:	200002e8 	.word	0x200002e8
 800403c:	200003f0 	.word	0x200003f0
 8004040:	200003d4 	.word	0x200003d4
 8004044:	200003a4 	.word	0x200003a4
 8004048:	200003a0 	.word	0x200003a0
 800404c:	20000408 	.word	0x20000408

08004050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3b04      	subs	r3, #4
 8004060:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b04      	subs	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f023 0201 	bic.w	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b04      	subs	r3, #4
 800407e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004080:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <pxPortInitialiseStack+0x64>)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b14      	subs	r3, #20
 800408a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b04      	subs	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f06f 0202 	mvn.w	r2, #2
 800409e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b20      	subs	r3, #32
 80040a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	080040b9 	.word	0x080040b9

080040b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <prvTaskExitError+0x54>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d00a      	beq.n	80040e2 <prvTaskExitError+0x2a>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	60fb      	str	r3, [r7, #12]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <prvTaskExitError+0x28>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	60bb      	str	r3, [r7, #8]
}
 80040f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040f6:	bf00      	nop
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0fc      	beq.n	80040f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	2000000c 	.word	0x2000000c

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	4770      	bx	lr
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst2>:
 8004130:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <prvPortStartFirstTask+0x24>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8814 	msr	CONTROL, r0
 800414a:	b662      	cpsie	i
 800414c:	b661      	cpsie	f
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	df00      	svc	0
 8004158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800415a:	bf00      	nop
 800415c:	e000ed08 	.word	0xe000ed08

08004160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <xPortStartScheduler+0x120>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a46      	ldr	r2, [pc, #280]	; (8004284 <xPortStartScheduler+0x124>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10a      	bne.n	8004186 <xPortStartScheduler+0x26>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004186:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <xPortStartScheduler+0x120>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3f      	ldr	r2, [pc, #252]	; (8004288 <xPortStartScheduler+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10a      	bne.n	80041a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <xPortStartScheduler+0x12c>)
 80041a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b31      	ldr	r3, [pc, #196]	; (8004290 <xPortStartScheduler+0x130>)
 80041cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <xPortStartScheduler+0x134>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d4:	e009      	b.n	80041ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041d6:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <xPortStartScheduler+0x134>)
 80041de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d0ef      	beq.n	80041d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <xPortStartScheduler+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1c3 0307 	rsb	r3, r3, #7
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00a      	beq.n	8004218 <xPortStartScheduler+0xb8>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60bb      	str	r3, [r7, #8]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <xPortStartScheduler+0x134>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <xPortStartScheduler+0x134>)
 8004220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <xPortStartScheduler+0x134>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <xPortStartScheduler+0x134>)
 800422c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <xPortStartScheduler+0x138>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <xPortStartScheduler+0x138>)
 800423c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <xPortStartScheduler+0x138>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <xPortStartScheduler+0x138>)
 8004248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800424c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800424e:	f000 f8dd 	bl	800440c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <xPortStartScheduler+0x13c>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004258:	f000 f8fc 	bl	8004454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <xPortStartScheduler+0x140>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <xPortStartScheduler+0x140>)
 8004262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004268:	f7ff ff66 	bl	8004138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800426c:	f7ff faac 	bl	80037c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004270:	f7ff ff22 	bl	80040b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	e000ed00 	.word	0xe000ed00
 8004284:	410fc271 	.word	0x410fc271
 8004288:	410fc270 	.word	0x410fc270
 800428c:	e000e400 	.word	0xe000e400
 8004290:	20000414 	.word	0x20000414
 8004294:	20000418 	.word	0x20000418
 8004298:	e000ed20 	.word	0xe000ed20
 800429c:	2000000c 	.word	0x2000000c
 80042a0:	e000ef34 	.word	0xe000ef34

080042a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	607b      	str	r3, [r7, #4]
}
 80042bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <vPortEnterCritical+0x58>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <vPortEnterCritical+0x58>)
 80042c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <vPortEnterCritical+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d10f      	bne.n	80042f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <vPortEnterCritical+0x5c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	603b      	str	r3, [r7, #0]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <vPortEnterCritical+0x4a>
	}
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	2000000c 	.word	0x2000000c
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <vPortExitCritical+0x50>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <vPortExitCritical+0x24>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	607b      	str	r3, [r7, #4]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <vPortExitCritical+0x50>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <vPortExitCritical+0x50>)
 8004330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <vPortExitCritical+0x50>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <vPortExitCritical+0x42>
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2000000c 	.word	0x2000000c
	...

08004360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004360:	f3ef 8009 	mrs	r0, PSP
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <pxCurrentTCBConst>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f01e 0f10 	tst.w	lr, #16
 8004370:	bf08      	it	eq
 8004372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004384:	f380 8811 	msr	BASEPRI, r0
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f7ff fa1a 	bl	80037c8 <vTaskSwitchContext>
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f380 8811 	msr	BASEPRI, r0
 800439c:	bc09      	pop	{r0, r3}
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	6808      	ldr	r0, [r1, #0]
 80043a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a6:	f01e 0f10 	tst.w	lr, #16
 80043aa:	bf08      	it	eq
 80043ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043b0:	f380 8809 	msr	PSP, r0
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst>:
 80043c0:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043e2:	f7ff f939 	bl	8003658 <xTaskIncrementTick>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <SysTick_Handler+0x40>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	2300      	movs	r3, #0
 80043f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f383 8811 	msr	BASEPRI, r3
}
 80043fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <vPortSetupTimerInterrupt+0x34>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <vPortSetupTimerInterrupt+0x38>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <vPortSetupTimerInterrupt+0x3c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <vPortSetupTimerInterrupt+0x40>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	4a09      	ldr	r2, [pc, #36]	; (8004450 <vPortSetupTimerInterrupt+0x44>)
 800442a:	3b01      	subs	r3, #1
 800442c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <vPortSetupTimerInterrupt+0x34>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010
 8004444:	e000e018 	.word	0xe000e018
 8004448:	20000000 	.word	0x20000000
 800444c:	10624dd3 	.word	0x10624dd3
 8004450:	e000e014 	.word	0xe000e014

08004454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004464 <vPortEnableVFP+0x10>
 8004458:	6801      	ldr	r1, [r0, #0]
 800445a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800445e:	6001      	str	r1, [r0, #0]
 8004460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004462:	bf00      	nop
 8004464:	e000ed88 	.word	0xe000ed88

08004468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004474:	f7ff f836 	bl	80034e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004478:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <pvPortMalloc+0x180>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004480:	f000 f920 	bl	80046c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004484:	4b59      	ldr	r3, [pc, #356]	; (80045ec <pvPortMalloc+0x184>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 8093 	bne.w	80045b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01d      	beq.n	80044d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004498:	2208      	movs	r2, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d014      	beq.n	80044d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f023 0307 	bic.w	r3, r3, #7
 80044b0:	3308      	adds	r3, #8
 80044b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <pvPortMalloc+0x6c>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	617b      	str	r3, [r7, #20]
}
 80044d0:	bf00      	nop
 80044d2:	e7fe      	b.n	80044d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d06e      	beq.n	80045b8 <pvPortMalloc+0x150>
 80044da:	4b45      	ldr	r3, [pc, #276]	; (80045f0 <pvPortMalloc+0x188>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d869      	bhi.n	80045b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044e4:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <pvPortMalloc+0x18c>)
 80044e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044e8:	4b42      	ldr	r3, [pc, #264]	; (80045f4 <pvPortMalloc+0x18c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044ee:	e004      	b.n	80044fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d903      	bls.n	800450c <pvPortMalloc+0xa4>
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f1      	bne.n	80044f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800450c:	4b36      	ldr	r3, [pc, #216]	; (80045e8 <pvPortMalloc+0x180>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004512:	429a      	cmp	r2, r3
 8004514:	d050      	beq.n	80045b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2208      	movs	r2, #8
 800451c:	4413      	add	r3, r2
 800451e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	2308      	movs	r3, #8
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	429a      	cmp	r2, r3
 8004536:	d91f      	bls.n	8004578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <pvPortMalloc+0xf8>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	613b      	str	r3, [r7, #16]
}
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004572:	69b8      	ldr	r0, [r7, #24]
 8004574:	f000 f908 	bl	8004788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <pvPortMalloc+0x188>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <pvPortMalloc+0x188>)
 8004584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <pvPortMalloc+0x188>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <pvPortMalloc+0x190>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d203      	bcs.n	800459a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <pvPortMalloc+0x188>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <pvPortMalloc+0x190>)
 8004598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <pvPortMalloc+0x184>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045ae:	4b13      	ldr	r3, [pc, #76]	; (80045fc <pvPortMalloc+0x194>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3301      	adds	r3, #1
 80045b4:	4a11      	ldr	r2, [pc, #68]	; (80045fc <pvPortMalloc+0x194>)
 80045b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045b8:	f7fe ffa2 	bl	8003500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <pvPortMalloc+0x174>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60fb      	str	r3, [r7, #12]
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <pvPortMalloc+0x172>
	return pvReturn;
 80045dc:	69fb      	ldr	r3, [r7, #28]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20004024 	.word	0x20004024
 80045ec:	20004038 	.word	0x20004038
 80045f0:	20004028 	.word	0x20004028
 80045f4:	2000401c 	.word	0x2000401c
 80045f8:	2000402c 	.word	0x2000402c
 80045fc:	20004030 	.word	0x20004030

08004600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d04d      	beq.n	80046ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004612:	2308      	movs	r3, #8
 8004614:	425b      	negs	r3, r3
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4413      	add	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <vPortFree+0xb8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4013      	ands	r3, r2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <vPortFree+0x44>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60fb      	str	r3, [r7, #12]
}
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <vPortFree+0x62>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	60bb      	str	r3, [r7, #8]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <vPortFree+0xb8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01e      	beq.n	80046ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11a      	bne.n	80046ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <vPortFree+0xb8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004688:	f7fe ff2c 	bl	80034e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <vPortFree+0xbc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4413      	add	r3, r2
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <vPortFree+0xbc>)
 8004698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800469a:	6938      	ldr	r0, [r7, #16]
 800469c:	f000 f874 	bl	8004788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <vPortFree+0xc0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <vPortFree+0xc0>)
 80046a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046aa:	f7fe ff29 	bl	8003500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20004038 	.word	0x20004038
 80046bc:	20004028 	.word	0x20004028
 80046c0:	20004034 	.word	0x20004034

080046c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80046ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046d0:	4b27      	ldr	r3, [pc, #156]	; (8004770 <prvHeapInit+0xac>)
 80046d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3307      	adds	r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <prvHeapInit+0xac>)
 80046f4:	4413      	add	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046fc:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <prvHeapInit+0xb0>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <prvHeapInit+0xb0>)
 8004704:	2200      	movs	r2, #0
 8004706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004710:	2208      	movs	r2, #8
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a15      	ldr	r2, [pc, #84]	; (8004778 <prvHeapInit+0xb4>)
 8004724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004726:	4b14      	ldr	r3, [pc, #80]	; (8004778 <prvHeapInit+0xb4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <prvHeapInit+0xb4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <prvHeapInit+0xb4>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a0a      	ldr	r2, [pc, #40]	; (800477c <prvHeapInit+0xb8>)
 8004752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <prvHeapInit+0xbc>)
 800475a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <prvHeapInit+0xc0>)
 800475e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	2000041c 	.word	0x2000041c
 8004774:	2000401c 	.word	0x2000401c
 8004778:	20004024 	.word	0x20004024
 800477c:	2000402c 	.word	0x2000402c
 8004780:	20004028 	.word	0x20004028
 8004784:	20004038 	.word	0x20004038

08004788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <prvInsertBlockIntoFreeList+0xac>)
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e002      	b.n	800479c <prvInsertBlockIntoFreeList+0x14>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d8f7      	bhi.n	8004796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	4413      	add	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d108      	bne.n	80047ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	441a      	add	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	441a      	add	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d118      	bne.n	8004810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <prvInsertBlockIntoFreeList+0xb0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d00d      	beq.n	8004806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e008      	b.n	8004818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <prvInsertBlockIntoFreeList+0xb0>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e003      	b.n	8004818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	d002      	beq.n	8004826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000401c 	.word	0x2000401c
 8004838:	20004024 	.word	0x20004024

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4d0d      	ldr	r5, [pc, #52]	; (8004874 <__libc_init_array+0x38>)
 8004840:	4c0d      	ldr	r4, [pc, #52]	; (8004878 <__libc_init_array+0x3c>)
 8004842:	1b64      	subs	r4, r4, r5
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	2600      	movs	r6, #0
 8004848:	42a6      	cmp	r6, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	4d0b      	ldr	r5, [pc, #44]	; (800487c <__libc_init_array+0x40>)
 800484e:	4c0c      	ldr	r4, [pc, #48]	; (8004880 <__libc_init_array+0x44>)
 8004850:	f000 f82e 	bl	80048b0 <_init>
 8004854:	1b64      	subs	r4, r4, r5
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	2600      	movs	r6, #0
 800485a:	42a6      	cmp	r6, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	f855 3b04 	ldr.w	r3, [r5], #4
 8004864:	4798      	blx	r3
 8004866:	3601      	adds	r6, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	f855 3b04 	ldr.w	r3, [r5], #4
 800486e:	4798      	blx	r3
 8004870:	3601      	adds	r6, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	080049f0 	.word	0x080049f0
 8004878:	080049f0 	.word	0x080049f0
 800487c:	080049f0 	.word	0x080049f0
 8004880:	080049f4 	.word	0x080049f4

08004884 <memcpy>:
 8004884:	440a      	add	r2, r1
 8004886:	4291      	cmp	r1, r2
 8004888:	f100 33ff 	add.w	r3, r0, #4294967295
 800488c:	d100      	bne.n	8004890 <memcpy+0xc>
 800488e:	4770      	bx	lr
 8004890:	b510      	push	{r4, lr}
 8004892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800489a:	4291      	cmp	r1, r2
 800489c:	d1f9      	bne.n	8004892 <memcpy+0xe>
 800489e:	bd10      	pop	{r4, pc}

080048a0 <memset>:
 80048a0:	4402      	add	r2, r0
 80048a2:	4603      	mov	r3, r0
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d100      	bne.n	80048aa <memset+0xa>
 80048a8:	4770      	bx	lr
 80048aa:	f803 1b01 	strb.w	r1, [r3], #1
 80048ae:	e7f9      	b.n	80048a4 <memset+0x4>

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
